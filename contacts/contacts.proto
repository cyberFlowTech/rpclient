syntax = "proto3";

package contacts;

// protoc-gen-go 版本大于1.4.0, proto文件需要加上go_package,否则无法生成
option go_package = "./contacts";

message Contact {
  string OID      = 1; // 好友ID或群聊ID
  string Nick      = 2; // 用户昵称
  bool IsNotice = 3; //是否屏蔽系统消息
  string avatar  =4; //头像
  int32 Status  = 5; // 状态，是否已经删除
  string Letter = 6; // 昵称首字母，用于排序
  string  Remark=7;//好友备注
}

message MyGroup {
  string GID      = 1; // 好友ID或群聊ID
  string GNick      = 2; // 在群里等备注昵称
  bool IsNotice = 3; //是否屏蔽系统消息
  bool IsTop  =4; //置顶
  bool IsBook =5;//收藏
  string Avatar = 6; //群头像
  string GName  = 7;
  int64 Ctime = 8; //时间
  int32 Status  = 9; // 状态，是否已经删除
}

message ContactResult{
  int32 Ret = 1;
  string Message =2;
}

message GetContactsReq{
  string UserID =1;  //用户ID
  int32 PageSize =2; //分页Size，默认=100
  int32 PageIndex=3; //分页index,从1开始，默认为1
}

message GetContactsResp{
  ContactResult Result =1;
  int32 PageIndex = 2; //当前index
  int32 TotalSize = 3; //总共好友数
  repeated Contact Contacts = 4;//好友list
}

enum SetContactType{
  AddContact=0;
  NoticeContact=1;
  RemarkContact=2;
  DelContact=3;
}
message SetContactReq{
  string UserID = 1;
  Contact Contact = 2; //覆盖更新
  SetContactType SetType = 3; //0 add;1 update notice;2 udpate remark 3、delete
  string Context = 4;
  string Remark = 5;
}

message SetContactResp{
    ContactResult Result = 1;
}

message GetGroupContactsReq{
  string UserID =1;  //用户ID
  int32 PageSize =2; //分页Size，默认=100
  int32 PageIndex=3; //分页index,从1开始，默认为1
  repeated string Gids =4; //指定群信息环信ID
  bool  OnlyBookGroup=5; //只返回收藏等
}
message GetGroupContactsResp{
  ContactResult Result =1;
  int32 PageIndex = 2; //当前index
  int32 TotalSize = 3; //总共群个数
  repeated MyGroup Contacts = 4;//群list
}
enum SetGroupType{
   AddGroup = 0;
   NoticeGroup =1;
    BookGroup=2;
  TopGroup=3;
   GNickGroup=4;
   DelGroup=5;
}
message SetGroupContactReq{
  string UserID = 1;
  MyGroup Contact = 2; //覆盖更新
  SetGroupType SetType = 3; //1 add;2 set notice ;3 set top ;4 set bookmark; 5 set gnick ;6 delete
}
message SetGroupContactResp{
  ContactResult Result = 1;
}
//black list
message BlackInfo{
  string UserID =1; //用户id
  string Nick =2; //昵称
  string Avatar=3; //头像
}
message GetBlackListReq{
  string UserID=1;
  int32 PageSize =2; //分页Size，默认=100
  int32 PageIndex=3; //分页index,从1开始，默认为1
}
message GetBlackListResp{
  ContactResult Result =1;
  int32 PageIndex = 2; //当前index
  int32 TotalSize = 3; //总共群个数
  repeated BlackInfo BlackList =4;
}
enum SetBlackType{
  AddBlack=0;
  DelBlack=1;
}
message SetBlackListReq{
  string UserID =1;
  SetBlackType SetType =2;
  string Ouid =3;
}
message SetBlackListResp{
  ContactResult Result =1;
}

message FriendRequest{
  int64 OuID =1;
  string Msg =2;
  int32  mutual =3;//mutual 是否加了对方为我的好友
  int32  Status =4;
  uint64 Time =5;
  string Nick = 6; //昵称，remark
  string Avatar = 7;
  string Context = 8;
  string Remark = 9;
  int64 Num = 10;
}

//好友申请记录管理
message GetFriendRequestListReq{
  int64 UserID =1;
}
message GetFriendRequestListResp{
  ContactResult Result = 1;
  repeated  FriendRequest FRList =2;
}

enum SetFRequestType{
  AddFRequest=0; // 申请
  AcceptFRequest=1; // 同意
  DelFRequest=2; // 删除
  RejectFRequest=3; // 拒绝
}
message SetFriendRequestReq{
  int64 UserID =1;
  int64 OuID =2;
  SetFRequestType Type = 3;//0 add request, 1 accept, 2 del
  string Context = 4; // 申请信息
  string Remark = 5; // 对接收者的备注
}
message SetFriendRequestResp{
  ContactResult Result =1;
}

enum RelationType{
  CheckFriend=0;
  CheckBlock=1;
  CheckFocus=2;
  CheckGeneral=3;
  CheckBook = 4;
}
message CheckRelationReq {
  RelationType SetType = 1;
  repeated  RelationType RTypes=2;//要check的关系
  repeated string Ouids = 3;
  string UserID=4;
}
message Relation{
  map<string,int32> Relation=1;
}

message CheckRelationResp {
  ContactResult Result =1;
  map<string,Relation> Relations=2; //key为relationtype的字符串
}

message RunTaskReq {
  string TaskName = 1;
}

message GetSingleContactsReq {
  int64 UserId = 1;
}

message GetSingleContactsResp {
  repeated int64 UserIds = 1;
}

service Contacts {
  //获取申请list
  rpc GetFriendRequestList(GetFriendRequestListReq)returns(GetFriendRequestListResp);
  rpc SetFriendRequest(SetFriendRequestReq)returns(SetFriendRequestResp);

  //获取通讯录,管理通讯录
  rpc GetContacts(GetContactsReq) returns(GetContactsResp);
  rpc SetContact(SetContactReq) returns(SetContactResp);

  //查询我等群聊
  rpc GetGroupContacts(GetGroupContactsReq)returns(GetGroupContactsResp);
  rpc SetGroupContact(SetGroupContactReq) returns(SetGroupContactResp);

  //设置黑名单
  rpc GetBlackList(GetBlackListReq) returns(GetBlackListResp);
  rpc SetBlackList(SetBlackListReq) returns(SetBlackListResp);


  //relation 检查
  rpc CheckRelation(CheckRelationReq)returns(CheckRelationResp);

  rpc RunTask(RunTaskReq)returns(ContactResult);

  rpc GetSingleContacts(GetSingleContactsReq)returns(GetSingleContactsResp);

}