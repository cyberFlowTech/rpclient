// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: define/search.proto

package search

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchClient interface {
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
	HotSearch(ctx context.Context, in *HotSearchReq, opts ...grpc.CallOption) (*HotSearchResp, error)
	RunTask(ctx context.Context, in *RunTaskReq, opts ...grpc.CallOption) (*CommonResp, error)
	SyncDataToEs(ctx context.Context, in *SyncDataToEsReq, opts ...grpc.CallOption) (*CommonResp, error)
	DataSyncTask(ctx context.Context, in *EmptyData, opts ...grpc.CallOption) (*CommonResp, error)
	// 管理后台
	AdmGetList(ctx context.Context, in *AdmGetListReq, opts ...grpc.CallOption) (*HotSearchResp, error)
	AdmSaveHotWord(ctx context.Context, in *AdmSaveHotWordReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type searchClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchClient(cc grpc.ClientConnInterface) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, "/search.Search/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) HotSearch(ctx context.Context, in *HotSearchReq, opts ...grpc.CallOption) (*HotSearchResp, error) {
	out := new(HotSearchResp)
	err := c.cc.Invoke(ctx, "/search.Search/HotSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) RunTask(ctx context.Context, in *RunTaskReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/search.Search/RunTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SyncDataToEs(ctx context.Context, in *SyncDataToEsReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/search.Search/SyncDataToEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) DataSyncTask(ctx context.Context, in *EmptyData, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/search.Search/DataSyncTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) AdmGetList(ctx context.Context, in *AdmGetListReq, opts ...grpc.CallOption) (*HotSearchResp, error) {
	out := new(HotSearchResp)
	err := c.cc.Invoke(ctx, "/search.Search/AdmGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) AdmSaveHotWord(ctx context.Context, in *AdmSaveHotWordReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/search.Search/AdmSaveHotWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServer is the server API for Search service.
// All implementations must embed UnimplementedSearchServer
// for forward compatibility
type SearchServer interface {
	Search(context.Context, *SearchReq) (*SearchResp, error)
	HotSearch(context.Context, *HotSearchReq) (*HotSearchResp, error)
	RunTask(context.Context, *RunTaskReq) (*CommonResp, error)
	SyncDataToEs(context.Context, *SyncDataToEsReq) (*CommonResp, error)
	DataSyncTask(context.Context, *EmptyData) (*CommonResp, error)
	// 管理后台
	AdmGetList(context.Context, *AdmGetListReq) (*HotSearchResp, error)
	AdmSaveHotWord(context.Context, *AdmSaveHotWordReq) (*CommonResp, error)
	mustEmbedUnimplementedSearchServer()
}

// UnimplementedSearchServer must be embedded to have forward compatible implementations.
type UnimplementedSearchServer struct {
}

func (UnimplementedSearchServer) Search(context.Context, *SearchReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSearchServer) HotSearch(context.Context, *HotSearchReq) (*HotSearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotSearch not implemented")
}
func (UnimplementedSearchServer) RunTask(context.Context, *RunTaskReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTask not implemented")
}
func (UnimplementedSearchServer) SyncDataToEs(context.Context, *SyncDataToEsReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDataToEs not implemented")
}
func (UnimplementedSearchServer) DataSyncTask(context.Context, *EmptyData) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataSyncTask not implemented")
}
func (UnimplementedSearchServer) AdmGetList(context.Context, *AdmGetListReq) (*HotSearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdmGetList not implemented")
}
func (UnimplementedSearchServer) AdmSaveHotWord(context.Context, *AdmSaveHotWordReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdmSaveHotWord not implemented")
}
func (UnimplementedSearchServer) mustEmbedUnimplementedSearchServer() {}

// UnsafeSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServer will
// result in compilation errors.
type UnsafeSearchServer interface {
	mustEmbedUnimplementedSearchServer()
}

func RegisterSearchServer(s grpc.ServiceRegistrar, srv SearchServer) {
	s.RegisterService(&Search_ServiceDesc, srv)
}

func _Search_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.Search/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_HotSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).HotSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.Search/HotSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).HotSearch(ctx, req.(*HotSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_RunTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).RunTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.Search/RunTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).RunTask(ctx, req.(*RunTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SyncDataToEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncDataToEsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SyncDataToEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.Search/SyncDataToEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SyncDataToEs(ctx, req.(*SyncDataToEsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_DataSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).DataSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.Search/DataSyncTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).DataSyncTask(ctx, req.(*EmptyData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_AdmGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdmGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).AdmGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.Search/AdmGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).AdmGetList(ctx, req.(*AdmGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_AdmSaveHotWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdmSaveHotWordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).AdmSaveHotWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.Search/AdmSaveHotWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).AdmSaveHotWord(ctx, req.(*AdmSaveHotWordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Search_ServiceDesc is the grpc.ServiceDesc for Search service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Search_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "search.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Search_Search_Handler,
		},
		{
			MethodName: "HotSearch",
			Handler:    _Search_HotSearch_Handler,
		},
		{
			MethodName: "RunTask",
			Handler:    _Search_RunTask_Handler,
		},
		{
			MethodName: "SyncDataToEs",
			Handler:    _Search_SyncDataToEs_Handler,
		},
		{
			MethodName: "DataSyncTask",
			Handler:    _Search_DataSyncTask_Handler,
		},
		{
			MethodName: "AdmGetList",
			Handler:    _Search_AdmGetList_Handler,
		},
		{
			MethodName: "AdmSaveHotWord",
			Handler:    _Search_AdmSaveHotWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/search.proto",
}
