// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: define/account.v1.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountServer_GetBalanceList_FullMethodName = "/account.accountServer/getBalanceList"
	AccountServer_GetNetworkList_FullMethodName = "/account.accountServer/getNetworkList"
	AccountServer_BalanceOpt_FullMethodName     = "/account.accountServer/balanceOpt"
	AccountServer_Recharge_FullMethodName       = "/account.accountServer/recharge"
	AccountServer_GetBalanceLog_FullMethodName  = "/account.accountServer/getBalanceLog"
	AccountServer_GetNetCfg_FullMethodName      = "/account.accountServer/getNetCfg"
)

// AccountServerClient is the client API for AccountServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServerClient interface {
	GetBalanceList(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceListResp, error)
	GetNetworkList(ctx context.Context, in *NetworkListReq, opts ...grpc.CallOption) (*NetworkListResp, error)
	BalanceOpt(ctx context.Context, in *BalanceOptReq, opts ...grpc.CallOption) (*BalanceOptResp, error)
	Recharge(ctx context.Context, in *RechargeReq, opts ...grpc.CallOption) (*RechargeResp, error)
	GetBalanceLog(ctx context.Context, in *BalanceLogReq, opts ...grpc.CallOption) (*BalanceLogResp, error)
	GetNetCfg(ctx context.Context, in *NetCfgReq, opts ...grpc.CallOption) (*NetCfgResp, error)
}

type accountServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServerClient(cc grpc.ClientConnInterface) AccountServerClient {
	return &accountServerClient{cc}
}

func (c *accountServerClient) GetBalanceList(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceListResp, error) {
	out := new(BalanceListResp)
	err := c.cc.Invoke(ctx, AccountServer_GetBalanceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) GetNetworkList(ctx context.Context, in *NetworkListReq, opts ...grpc.CallOption) (*NetworkListResp, error) {
	out := new(NetworkListResp)
	err := c.cc.Invoke(ctx, AccountServer_GetNetworkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) BalanceOpt(ctx context.Context, in *BalanceOptReq, opts ...grpc.CallOption) (*BalanceOptResp, error) {
	out := new(BalanceOptResp)
	err := c.cc.Invoke(ctx, AccountServer_BalanceOpt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) Recharge(ctx context.Context, in *RechargeReq, opts ...grpc.CallOption) (*RechargeResp, error) {
	out := new(RechargeResp)
	err := c.cc.Invoke(ctx, AccountServer_Recharge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) GetBalanceLog(ctx context.Context, in *BalanceLogReq, opts ...grpc.CallOption) (*BalanceLogResp, error) {
	out := new(BalanceLogResp)
	err := c.cc.Invoke(ctx, AccountServer_GetBalanceLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) GetNetCfg(ctx context.Context, in *NetCfgReq, opts ...grpc.CallOption) (*NetCfgResp, error) {
	out := new(NetCfgResp)
	err := c.cc.Invoke(ctx, AccountServer_GetNetCfg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServerServer is the server API for AccountServer service.
// All implementations must embed UnimplementedAccountServerServer
// for forward compatibility
type AccountServerServer interface {
	GetBalanceList(context.Context, *BalanceReq) (*BalanceListResp, error)
	GetNetworkList(context.Context, *NetworkListReq) (*NetworkListResp, error)
	BalanceOpt(context.Context, *BalanceOptReq) (*BalanceOptResp, error)
	Recharge(context.Context, *RechargeReq) (*RechargeResp, error)
	GetBalanceLog(context.Context, *BalanceLogReq) (*BalanceLogResp, error)
	GetNetCfg(context.Context, *NetCfgReq) (*NetCfgResp, error)
	mustEmbedUnimplementedAccountServerServer()
}

// UnimplementedAccountServerServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServerServer struct {
}

func (UnimplementedAccountServerServer) GetBalanceList(context.Context, *BalanceReq) (*BalanceListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceList not implemented")
}
func (UnimplementedAccountServerServer) GetNetworkList(context.Context, *NetworkListReq) (*NetworkListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkList not implemented")
}
func (UnimplementedAccountServerServer) BalanceOpt(context.Context, *BalanceOptReq) (*BalanceOptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceOpt not implemented")
}
func (UnimplementedAccountServerServer) Recharge(context.Context, *RechargeReq) (*RechargeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recharge not implemented")
}
func (UnimplementedAccountServerServer) GetBalanceLog(context.Context, *BalanceLogReq) (*BalanceLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceLog not implemented")
}
func (UnimplementedAccountServerServer) GetNetCfg(context.Context, *NetCfgReq) (*NetCfgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetCfg not implemented")
}
func (UnimplementedAccountServerServer) mustEmbedUnimplementedAccountServerServer() {}

// UnsafeAccountServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServerServer will
// result in compilation errors.
type UnsafeAccountServerServer interface {
	mustEmbedUnimplementedAccountServerServer()
}

func RegisterAccountServerServer(s grpc.ServiceRegistrar, srv AccountServerServer) {
	s.RegisterService(&AccountServer_ServiceDesc, srv)
}

func _AccountServer_GetBalanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).GetBalanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_GetBalanceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).GetBalanceList(ctx, req.(*BalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_GetNetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).GetNetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_GetNetworkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).GetNetworkList(ctx, req.(*NetworkListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_BalanceOpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceOptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).BalanceOpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_BalanceOpt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).BalanceOpt(ctx, req.(*BalanceOptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_Recharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).Recharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_Recharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).Recharge(ctx, req.(*RechargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_GetBalanceLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).GetBalanceLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_GetBalanceLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).GetBalanceLog(ctx, req.(*BalanceLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_GetNetCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetCfgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).GetNetCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_GetNetCfg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).GetNetCfg(ctx, req.(*NetCfgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountServer_ServiceDesc is the grpc.ServiceDesc for AccountServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.accountServer",
	HandlerType: (*AccountServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBalanceList",
			Handler:    _AccountServer_GetBalanceList_Handler,
		},
		{
			MethodName: "getNetworkList",
			Handler:    _AccountServer_GetNetworkList_Handler,
		},
		{
			MethodName: "balanceOpt",
			Handler:    _AccountServer_BalanceOpt_Handler,
		},
		{
			MethodName: "recharge",
			Handler:    _AccountServer_Recharge_Handler,
		},
		{
			MethodName: "getBalanceLog",
			Handler:    _AccountServer_GetBalanceLog_Handler,
		},
		{
			MethodName: "getNetCfg",
			Handler:    _AccountServer_GetNetCfg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/account.v1.proto",
}
