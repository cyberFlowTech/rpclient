// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: define/account.v1.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountServer_GetBalanceList_FullMethodName = "/account.accountServer/getBalanceList"
	AccountServer_GetBalanceLog_FullMethodName  = "/account.accountServer/getBalanceLog"
	AccountServer_MigrateData_FullMethodName    = "/account.accountServer/migrateData"
	AccountServer_Cfg_FullMethodName            = "/account.accountServer/cfg"
	AccountServer_CreateOrder_FullMethodName    = "/account.accountServer/createOrder"
	AccountServer_QueryOrder_FullMethodName     = "/account.accountServer/queryOrder"
)

// AccountServerClient is the client API for AccountServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServerClient interface {
	GetBalanceList(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceListResp, error)
	GetBalanceLog(ctx context.Context, in *BalanceLogReq, opts ...grpc.CallOption) (*BalanceLogResp, error)
	MigrateData(ctx context.Context, in *MigrateReq, opts ...grpc.CallOption) (*MigrateResp, error)
	Cfg(ctx context.Context, in *CfgReq, opts ...grpc.CallOption) (*CfgResp, error)
	CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error)
	QueryOrder(ctx context.Context, in *QueryOrderReq, opts ...grpc.CallOption) (*QueryOrderResp, error)
}

type accountServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServerClient(cc grpc.ClientConnInterface) AccountServerClient {
	return &accountServerClient{cc}
}

func (c *accountServerClient) GetBalanceList(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceListResp, error) {
	out := new(BalanceListResp)
	err := c.cc.Invoke(ctx, AccountServer_GetBalanceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) GetBalanceLog(ctx context.Context, in *BalanceLogReq, opts ...grpc.CallOption) (*BalanceLogResp, error) {
	out := new(BalanceLogResp)
	err := c.cc.Invoke(ctx, AccountServer_GetBalanceLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) MigrateData(ctx context.Context, in *MigrateReq, opts ...grpc.CallOption) (*MigrateResp, error) {
	out := new(MigrateResp)
	err := c.cc.Invoke(ctx, AccountServer_MigrateData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) Cfg(ctx context.Context, in *CfgReq, opts ...grpc.CallOption) (*CfgResp, error) {
	out := new(CfgResp)
	err := c.cc.Invoke(ctx, AccountServer_Cfg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error) {
	out := new(CreateOrderResp)
	err := c.cc.Invoke(ctx, AccountServer_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) QueryOrder(ctx context.Context, in *QueryOrderReq, opts ...grpc.CallOption) (*QueryOrderResp, error) {
	out := new(QueryOrderResp)
	err := c.cc.Invoke(ctx, AccountServer_QueryOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServerServer is the server API for AccountServer service.
// All implementations must embed UnimplementedAccountServerServer
// for forward compatibility
type AccountServerServer interface {
	GetBalanceList(context.Context, *BalanceReq) (*BalanceListResp, error)
	GetBalanceLog(context.Context, *BalanceLogReq) (*BalanceLogResp, error)
	MigrateData(context.Context, *MigrateReq) (*MigrateResp, error)
	Cfg(context.Context, *CfgReq) (*CfgResp, error)
	CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderResp, error)
	QueryOrder(context.Context, *QueryOrderReq) (*QueryOrderResp, error)
	mustEmbedUnimplementedAccountServerServer()
}

// UnimplementedAccountServerServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServerServer struct {
}

func (UnimplementedAccountServerServer) GetBalanceList(context.Context, *BalanceReq) (*BalanceListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceList not implemented")
}
func (UnimplementedAccountServerServer) GetBalanceLog(context.Context, *BalanceLogReq) (*BalanceLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceLog not implemented")
}
func (UnimplementedAccountServerServer) MigrateData(context.Context, *MigrateReq) (*MigrateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateData not implemented")
}
func (UnimplementedAccountServerServer) Cfg(context.Context, *CfgReq) (*CfgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cfg not implemented")
}
func (UnimplementedAccountServerServer) CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedAccountServerServer) QueryOrder(context.Context, *QueryOrderReq) (*QueryOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrder not implemented")
}
func (UnimplementedAccountServerServer) mustEmbedUnimplementedAccountServerServer() {}

// UnsafeAccountServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServerServer will
// result in compilation errors.
type UnsafeAccountServerServer interface {
	mustEmbedUnimplementedAccountServerServer()
}

func RegisterAccountServerServer(s grpc.ServiceRegistrar, srv AccountServerServer) {
	s.RegisterService(&AccountServer_ServiceDesc, srv)
}

func _AccountServer_GetBalanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).GetBalanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_GetBalanceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).GetBalanceList(ctx, req.(*BalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_GetBalanceLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).GetBalanceLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_GetBalanceLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).GetBalanceLog(ctx, req.(*BalanceLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_MigrateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).MigrateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_MigrateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).MigrateData(ctx, req.(*MigrateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_Cfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CfgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).Cfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_Cfg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).Cfg(ctx, req.(*CfgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).CreateOrder(ctx, req.(*CreateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_QueryOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).QueryOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_QueryOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).QueryOrder(ctx, req.(*QueryOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountServer_ServiceDesc is the grpc.ServiceDesc for AccountServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.accountServer",
	HandlerType: (*AccountServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBalanceList",
			Handler:    _AccountServer_GetBalanceList_Handler,
		},
		{
			MethodName: "getBalanceLog",
			Handler:    _AccountServer_GetBalanceLog_Handler,
		},
		{
			MethodName: "migrateData",
			Handler:    _AccountServer_MigrateData_Handler,
		},
		{
			MethodName: "cfg",
			Handler:    _AccountServer_Cfg_Handler,
		},
		{
			MethodName: "createOrder",
			Handler:    _AccountServer_CreateOrder_Handler,
		},
		{
			MethodName: "queryOrder",
			Handler:    _AccountServer_QueryOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/account.v1.proto",
}
