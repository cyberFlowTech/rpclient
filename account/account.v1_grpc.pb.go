// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: define/account.v1.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountServer_GetBalanceList_FullMethodName  = "/account.accountServer/getBalanceList"
	AccountServer_GetNetworkList_FullMethodName  = "/account.accountServer/getNetworkList"
	AccountServer_BalanceOpt_FullMethodName      = "/account.accountServer/balanceOpt"
	AccountServer_GetBalanceLog_FullMethodName   = "/account.accountServer/getBalanceLog"
	AccountServer_GetNetCfg_FullMethodName       = "/account.accountServer/getNetCfg"
	AccountServer_RechargeApply_FullMethodName   = "/account.accountServer/rechargeApply"
	AccountServer_RechargeSubmit_FullMethodName  = "/account.accountServer/rechargeSubmit"
	AccountServer_Withdraw_FullMethodName        = "/account.accountServer/withdraw"
	AccountServer_CheckTrans_FullMethodName      = "/account.accountServer/checkTrans"
	AccountServer_Callback_FullMethodName        = "/account.accountServer/callback"
	AccountServer_TransInfo_FullMethodName       = "/account.accountServer/transInfo"
	AccountServer_WithdrawList_FullMethodName    = "/account.accountServer/withdrawList"
	AccountServer_ProcessWithdraw_FullMethodName = "/account.accountServer/processWithdraw"
	AccountServer_ProcessRecharge_FullMethodName = "/account.accountServer/processRecharge"
	AccountServer_RechargeList_FullMethodName    = "/account.accountServer/rechargeList"
	AccountServer_GetSign_FullMethodName         = "/account.accountServer/getSign"
	AccountServer_MigrateData_FullMethodName     = "/account.accountServer/migrateData"
)

// AccountServerClient is the client API for AccountServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServerClient interface {
	GetBalanceList(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceListResp, error)
	GetNetworkList(ctx context.Context, in *NetworkListReq, opts ...grpc.CallOption) (*NetworkListResp, error)
	BalanceOpt(ctx context.Context, in *BalanceOptReq, opts ...grpc.CallOption) (*BalanceOptResp, error)
	GetBalanceLog(ctx context.Context, in *BalanceLogReq, opts ...grpc.CallOption) (*BalanceLogResp, error)
	GetNetCfg(ctx context.Context, in *NetCfgReq, opts ...grpc.CallOption) (*NetCfgResp, error)
	RechargeApply(ctx context.Context, in *RechargeApplyReq, opts ...grpc.CallOption) (*RechargeApplyResp, error)
	RechargeSubmit(ctx context.Context, in *RechargeSubmitReq, opts ...grpc.CallOption) (*RechargeSubmitResp, error)
	Withdraw(ctx context.Context, in *WithdrawReq, opts ...grpc.CallOption) (*WithdrawResp, error)
	CheckTrans(ctx context.Context, in *TransReq, opts ...grpc.CallOption) (*TransResp, error)
	Callback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*CallbackResp, error)
	TransInfo(ctx context.Context, in *TransInfoReq, opts ...grpc.CallOption) (*TransInfoResp, error)
	WithdrawList(ctx context.Context, in *WithdrawMainReq, opts ...grpc.CallOption) (*WithdrawMainResp, error)
	ProcessWithdraw(ctx context.Context, in *ProcessWithdrawReq, opts ...grpc.CallOption) (*ProcessWithdrawResp, error)
	ProcessRecharge(ctx context.Context, in *ProcessRechargeReq, opts ...grpc.CallOption) (*ProcessRechargeResp, error)
	RechargeList(ctx context.Context, in *RechargeListReq, opts ...grpc.CallOption) (*RechargeListResp, error)
	GetSign(ctx context.Context, in *GetSignReq, opts ...grpc.CallOption) (*GetSignResp, error)
	MigrateData(ctx context.Context, in *MigrateReq, opts ...grpc.CallOption) (*MigrateResp, error)
}

type accountServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServerClient(cc grpc.ClientConnInterface) AccountServerClient {
	return &accountServerClient{cc}
}

func (c *accountServerClient) GetBalanceList(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceListResp, error) {
	out := new(BalanceListResp)
	err := c.cc.Invoke(ctx, AccountServer_GetBalanceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) GetNetworkList(ctx context.Context, in *NetworkListReq, opts ...grpc.CallOption) (*NetworkListResp, error) {
	out := new(NetworkListResp)
	err := c.cc.Invoke(ctx, AccountServer_GetNetworkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) BalanceOpt(ctx context.Context, in *BalanceOptReq, opts ...grpc.CallOption) (*BalanceOptResp, error) {
	out := new(BalanceOptResp)
	err := c.cc.Invoke(ctx, AccountServer_BalanceOpt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) GetBalanceLog(ctx context.Context, in *BalanceLogReq, opts ...grpc.CallOption) (*BalanceLogResp, error) {
	out := new(BalanceLogResp)
	err := c.cc.Invoke(ctx, AccountServer_GetBalanceLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) GetNetCfg(ctx context.Context, in *NetCfgReq, opts ...grpc.CallOption) (*NetCfgResp, error) {
	out := new(NetCfgResp)
	err := c.cc.Invoke(ctx, AccountServer_GetNetCfg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) RechargeApply(ctx context.Context, in *RechargeApplyReq, opts ...grpc.CallOption) (*RechargeApplyResp, error) {
	out := new(RechargeApplyResp)
	err := c.cc.Invoke(ctx, AccountServer_RechargeApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) RechargeSubmit(ctx context.Context, in *RechargeSubmitReq, opts ...grpc.CallOption) (*RechargeSubmitResp, error) {
	out := new(RechargeSubmitResp)
	err := c.cc.Invoke(ctx, AccountServer_RechargeSubmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) Withdraw(ctx context.Context, in *WithdrawReq, opts ...grpc.CallOption) (*WithdrawResp, error) {
	out := new(WithdrawResp)
	err := c.cc.Invoke(ctx, AccountServer_Withdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) CheckTrans(ctx context.Context, in *TransReq, opts ...grpc.CallOption) (*TransResp, error) {
	out := new(TransResp)
	err := c.cc.Invoke(ctx, AccountServer_CheckTrans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) Callback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*CallbackResp, error) {
	out := new(CallbackResp)
	err := c.cc.Invoke(ctx, AccountServer_Callback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) TransInfo(ctx context.Context, in *TransInfoReq, opts ...grpc.CallOption) (*TransInfoResp, error) {
	out := new(TransInfoResp)
	err := c.cc.Invoke(ctx, AccountServer_TransInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) WithdrawList(ctx context.Context, in *WithdrawMainReq, opts ...grpc.CallOption) (*WithdrawMainResp, error) {
	out := new(WithdrawMainResp)
	err := c.cc.Invoke(ctx, AccountServer_WithdrawList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) ProcessWithdraw(ctx context.Context, in *ProcessWithdrawReq, opts ...grpc.CallOption) (*ProcessWithdrawResp, error) {
	out := new(ProcessWithdrawResp)
	err := c.cc.Invoke(ctx, AccountServer_ProcessWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) ProcessRecharge(ctx context.Context, in *ProcessRechargeReq, opts ...grpc.CallOption) (*ProcessRechargeResp, error) {
	out := new(ProcessRechargeResp)
	err := c.cc.Invoke(ctx, AccountServer_ProcessRecharge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) RechargeList(ctx context.Context, in *RechargeListReq, opts ...grpc.CallOption) (*RechargeListResp, error) {
	out := new(RechargeListResp)
	err := c.cc.Invoke(ctx, AccountServer_RechargeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) GetSign(ctx context.Context, in *GetSignReq, opts ...grpc.CallOption) (*GetSignResp, error) {
	out := new(GetSignResp)
	err := c.cc.Invoke(ctx, AccountServer_GetSign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServerClient) MigrateData(ctx context.Context, in *MigrateReq, opts ...grpc.CallOption) (*MigrateResp, error) {
	out := new(MigrateResp)
	err := c.cc.Invoke(ctx, AccountServer_MigrateData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServerServer is the server API for AccountServer service.
// All implementations must embed UnimplementedAccountServerServer
// for forward compatibility
type AccountServerServer interface {
	GetBalanceList(context.Context, *BalanceReq) (*BalanceListResp, error)
	GetNetworkList(context.Context, *NetworkListReq) (*NetworkListResp, error)
	BalanceOpt(context.Context, *BalanceOptReq) (*BalanceOptResp, error)
	GetBalanceLog(context.Context, *BalanceLogReq) (*BalanceLogResp, error)
	GetNetCfg(context.Context, *NetCfgReq) (*NetCfgResp, error)
	RechargeApply(context.Context, *RechargeApplyReq) (*RechargeApplyResp, error)
	RechargeSubmit(context.Context, *RechargeSubmitReq) (*RechargeSubmitResp, error)
	Withdraw(context.Context, *WithdrawReq) (*WithdrawResp, error)
	CheckTrans(context.Context, *TransReq) (*TransResp, error)
	Callback(context.Context, *CallbackReq) (*CallbackResp, error)
	TransInfo(context.Context, *TransInfoReq) (*TransInfoResp, error)
	WithdrawList(context.Context, *WithdrawMainReq) (*WithdrawMainResp, error)
	ProcessWithdraw(context.Context, *ProcessWithdrawReq) (*ProcessWithdrawResp, error)
	ProcessRecharge(context.Context, *ProcessRechargeReq) (*ProcessRechargeResp, error)
	RechargeList(context.Context, *RechargeListReq) (*RechargeListResp, error)
	GetSign(context.Context, *GetSignReq) (*GetSignResp, error)
	MigrateData(context.Context, *MigrateReq) (*MigrateResp, error)
	mustEmbedUnimplementedAccountServerServer()
}

// UnimplementedAccountServerServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServerServer struct {
}

func (UnimplementedAccountServerServer) GetBalanceList(context.Context, *BalanceReq) (*BalanceListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceList not implemented")
}
func (UnimplementedAccountServerServer) GetNetworkList(context.Context, *NetworkListReq) (*NetworkListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkList not implemented")
}
func (UnimplementedAccountServerServer) BalanceOpt(context.Context, *BalanceOptReq) (*BalanceOptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceOpt not implemented")
}
func (UnimplementedAccountServerServer) GetBalanceLog(context.Context, *BalanceLogReq) (*BalanceLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceLog not implemented")
}
func (UnimplementedAccountServerServer) GetNetCfg(context.Context, *NetCfgReq) (*NetCfgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetCfg not implemented")
}
func (UnimplementedAccountServerServer) RechargeApply(context.Context, *RechargeApplyReq) (*RechargeApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RechargeApply not implemented")
}
func (UnimplementedAccountServerServer) RechargeSubmit(context.Context, *RechargeSubmitReq) (*RechargeSubmitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RechargeSubmit not implemented")
}
func (UnimplementedAccountServerServer) Withdraw(context.Context, *WithdrawReq) (*WithdrawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedAccountServerServer) CheckTrans(context.Context, *TransReq) (*TransResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTrans not implemented")
}
func (UnimplementedAccountServerServer) Callback(context.Context, *CallbackReq) (*CallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Callback not implemented")
}
func (UnimplementedAccountServerServer) TransInfo(context.Context, *TransInfoReq) (*TransInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransInfo not implemented")
}
func (UnimplementedAccountServerServer) WithdrawList(context.Context, *WithdrawMainReq) (*WithdrawMainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawList not implemented")
}
func (UnimplementedAccountServerServer) ProcessWithdraw(context.Context, *ProcessWithdrawReq) (*ProcessWithdrawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessWithdraw not implemented")
}
func (UnimplementedAccountServerServer) ProcessRecharge(context.Context, *ProcessRechargeReq) (*ProcessRechargeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRecharge not implemented")
}
func (UnimplementedAccountServerServer) RechargeList(context.Context, *RechargeListReq) (*RechargeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RechargeList not implemented")
}
func (UnimplementedAccountServerServer) GetSign(context.Context, *GetSignReq) (*GetSignResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSign not implemented")
}
func (UnimplementedAccountServerServer) MigrateData(context.Context, *MigrateReq) (*MigrateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateData not implemented")
}
func (UnimplementedAccountServerServer) mustEmbedUnimplementedAccountServerServer() {}

// UnsafeAccountServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServerServer will
// result in compilation errors.
type UnsafeAccountServerServer interface {
	mustEmbedUnimplementedAccountServerServer()
}

func RegisterAccountServerServer(s grpc.ServiceRegistrar, srv AccountServerServer) {
	s.RegisterService(&AccountServer_ServiceDesc, srv)
}

func _AccountServer_GetBalanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).GetBalanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_GetBalanceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).GetBalanceList(ctx, req.(*BalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_GetNetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).GetNetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_GetNetworkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).GetNetworkList(ctx, req.(*NetworkListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_BalanceOpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceOptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).BalanceOpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_BalanceOpt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).BalanceOpt(ctx, req.(*BalanceOptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_GetBalanceLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).GetBalanceLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_GetBalanceLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).GetBalanceLog(ctx, req.(*BalanceLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_GetNetCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetCfgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).GetNetCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_GetNetCfg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).GetNetCfg(ctx, req.(*NetCfgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_RechargeApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).RechargeApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_RechargeApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).RechargeApply(ctx, req.(*RechargeApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_RechargeSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeSubmitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).RechargeSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_RechargeSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).RechargeSubmit(ctx, req.(*RechargeSubmitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).Withdraw(ctx, req.(*WithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_CheckTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).CheckTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_CheckTrans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).CheckTrans(ctx, req.(*TransReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_Callback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).Callback(ctx, req.(*CallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_TransInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).TransInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_TransInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).TransInfo(ctx, req.(*TransInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_WithdrawList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawMainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).WithdrawList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_WithdrawList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).WithdrawList(ctx, req.(*WithdrawMainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_ProcessWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessWithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).ProcessWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_ProcessWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).ProcessWithdraw(ctx, req.(*ProcessWithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_ProcessRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRechargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).ProcessRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_ProcessRecharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).ProcessRecharge(ctx, req.(*ProcessRechargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_RechargeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).RechargeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_RechargeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).RechargeList(ctx, req.(*RechargeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_GetSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).GetSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_GetSign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).GetSign(ctx, req.(*GetSignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServer_MigrateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServerServer).MigrateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServer_MigrateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServerServer).MigrateData(ctx, req.(*MigrateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountServer_ServiceDesc is the grpc.ServiceDesc for AccountServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.accountServer",
	HandlerType: (*AccountServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBalanceList",
			Handler:    _AccountServer_GetBalanceList_Handler,
		},
		{
			MethodName: "getNetworkList",
			Handler:    _AccountServer_GetNetworkList_Handler,
		},
		{
			MethodName: "balanceOpt",
			Handler:    _AccountServer_BalanceOpt_Handler,
		},
		{
			MethodName: "getBalanceLog",
			Handler:    _AccountServer_GetBalanceLog_Handler,
		},
		{
			MethodName: "getNetCfg",
			Handler:    _AccountServer_GetNetCfg_Handler,
		},
		{
			MethodName: "rechargeApply",
			Handler:    _AccountServer_RechargeApply_Handler,
		},
		{
			MethodName: "rechargeSubmit",
			Handler:    _AccountServer_RechargeSubmit_Handler,
		},
		{
			MethodName: "withdraw",
			Handler:    _AccountServer_Withdraw_Handler,
		},
		{
			MethodName: "checkTrans",
			Handler:    _AccountServer_CheckTrans_Handler,
		},
		{
			MethodName: "callback",
			Handler:    _AccountServer_Callback_Handler,
		},
		{
			MethodName: "transInfo",
			Handler:    _AccountServer_TransInfo_Handler,
		},
		{
			MethodName: "withdrawList",
			Handler:    _AccountServer_WithdrawList_Handler,
		},
		{
			MethodName: "processWithdraw",
			Handler:    _AccountServer_ProcessWithdraw_Handler,
		},
		{
			MethodName: "processRecharge",
			Handler:    _AccountServer_ProcessRecharge_Handler,
		},
		{
			MethodName: "rechargeList",
			Handler:    _AccountServer_RechargeList_Handler,
		},
		{
			MethodName: "getSign",
			Handler:    _AccountServer_GetSign_Handler,
		},
		{
			MethodName: "migrateData",
			Handler:    _AccountServer_MigrateData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/account.v1.proto",
}
