// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: define/pack.v1.proto

package pack

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PackServer_GetPackDetail_FullMethodName = "/im.PackServer/getPackDetail"
	PackServer_AwardPack_FullMethodName     = "/im.PackServer/awardPack"
	PackServer_CreatePack_FullMethodName    = "/im.PackServer/createPack"
)

// PackServerClient is the client API for PackServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackServerClient interface {
	// 获取红包详情
	GetPackDetail(ctx context.Context, in *GetPackDetailParams, opts ...grpc.CallOption) (*GetPackDetailResp, error)
	// 领取红包
	AwardPack(ctx context.Context, in *AwardPackParams, opts ...grpc.CallOption) (*AwardPackResp, error)
	// 创建红包
	CreatePack(ctx context.Context, in *CreatePackParams, opts ...grpc.CallOption) (*CreatePackResp, error)
}

type packServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPackServerClient(cc grpc.ClientConnInterface) PackServerClient {
	return &packServerClient{cc}
}

func (c *packServerClient) GetPackDetail(ctx context.Context, in *GetPackDetailParams, opts ...grpc.CallOption) (*GetPackDetailResp, error) {
	out := new(GetPackDetailResp)
	err := c.cc.Invoke(ctx, PackServer_GetPackDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packServerClient) AwardPack(ctx context.Context, in *AwardPackParams, opts ...grpc.CallOption) (*AwardPackResp, error) {
	out := new(AwardPackResp)
	err := c.cc.Invoke(ctx, PackServer_AwardPack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packServerClient) CreatePack(ctx context.Context, in *CreatePackParams, opts ...grpc.CallOption) (*CreatePackResp, error) {
	out := new(CreatePackResp)
	err := c.cc.Invoke(ctx, PackServer_CreatePack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackServerServer is the server API for PackServer service.
// All implementations must embed UnimplementedPackServerServer
// for forward compatibility
type PackServerServer interface {
	// 获取红包详情
	GetPackDetail(context.Context, *GetPackDetailParams) (*GetPackDetailResp, error)
	// 领取红包
	AwardPack(context.Context, *AwardPackParams) (*AwardPackResp, error)
	// 创建红包
	CreatePack(context.Context, *CreatePackParams) (*CreatePackResp, error)
	mustEmbedUnimplementedPackServerServer()
}

// UnimplementedPackServerServer must be embedded to have forward compatible implementations.
type UnimplementedPackServerServer struct {
}

func (UnimplementedPackServerServer) GetPackDetail(context.Context, *GetPackDetailParams) (*GetPackDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackDetail not implemented")
}
func (UnimplementedPackServerServer) AwardPack(context.Context, *AwardPackParams) (*AwardPackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AwardPack not implemented")
}
func (UnimplementedPackServerServer) CreatePack(context.Context, *CreatePackParams) (*CreatePackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePack not implemented")
}
func (UnimplementedPackServerServer) mustEmbedUnimplementedPackServerServer() {}

// UnsafePackServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackServerServer will
// result in compilation errors.
type UnsafePackServerServer interface {
	mustEmbedUnimplementedPackServerServer()
}

func RegisterPackServerServer(s grpc.ServiceRegistrar, srv PackServerServer) {
	s.RegisterService(&PackServer_ServiceDesc, srv)
}

func _PackServer_GetPackDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackDetailParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackServerServer).GetPackDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackServer_GetPackDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackServerServer).GetPackDetail(ctx, req.(*GetPackDetailParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackServer_AwardPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwardPackParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackServerServer).AwardPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackServer_AwardPack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackServerServer).AwardPack(ctx, req.(*AwardPackParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackServer_CreatePack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackServerServer).CreatePack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackServer_CreatePack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackServerServer).CreatePack(ctx, req.(*CreatePackParams))
	}
	return interceptor(ctx, in, info, handler)
}

// PackServer_ServiceDesc is the grpc.ServiceDesc for PackServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "im.PackServer",
	HandlerType: (*PackServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getPackDetail",
			Handler:    _PackServer_GetPackDetail_Handler,
		},
		{
			MethodName: "awardPack",
			Handler:    _PackServer_AwardPack_Handler,
		},
		{
			MethodName: "createPack",
			Handler:    _PackServer_CreatePack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/pack.v1.proto",
}