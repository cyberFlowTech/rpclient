// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: club.v1.proto

package club

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GroupType int32

const (
	GroupType_SUP_GROUP     GroupType = 0 // 超级群（部落）
	GroupType_SMALL_GROUP   GroupType = 1 // 普通群
	GroupType_CHANNEL_GROUP GroupType = 2 // 频道（部落子群）
)

// Enum value maps for GroupType.
var (
	GroupType_name = map[int32]string{
		0: "SUP_GROUP",
		1: "SMALL_GROUP",
		2: "CHANNEL_GROUP",
	}
	GroupType_value = map[string]int32{
		"SUP_GROUP":     0,
		"SMALL_GROUP":   1,
		"CHANNEL_GROUP": 2,
	}
)

func (x GroupType) Enum() *GroupType {
	p := new(GroupType)
	*p = x
	return p
}

func (x GroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_club_v1_proto_enumTypes[0].Descriptor()
}

func (GroupType) Type() protoreflect.EnumType {
	return &file_club_v1_proto_enumTypes[0]
}

func (x GroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupType.Descriptor instead.
func (GroupType) EnumDescriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{0}
}

type CommentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`         //评论ID
	UserId int64  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"` //评论者UserId
	Text   string `protobuf:"bytes,3,opt,name=Text,proto3" json:"Text,omitempty"`      //评论文本
	Time   int64  `protobuf:"varint,4,opt,name=Time,proto3" json:"Time,omitempty"`     //评论时间
	Nick   string `protobuf:"bytes,5,opt,name=Nick,proto3" json:"Nick,omitempty"`      // 评论者昵称
	Avatar string `protobuf:"bytes,6,opt,name=Avatar,proto3" json:"Avatar,omitempty"`  //评论者头像
}

func (x *CommentInfo) Reset() {
	*x = CommentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentInfo) ProtoMessage() {}

func (x *CommentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentInfo.ProtoReflect.Descriptor instead.
func (*CommentInfo) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{0}
}

func (x *CommentInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommentInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CommentInfo) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CommentInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CommentInfo) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *CommentInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

type DynamicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64          `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                        //动态id
	UserId        int64          `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`                // 用户ID
	Type          int64          `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`                    // 动态类型（0：普通用户动态，1：抖音链接，2长文）
	Title         string         `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`                   // 标题
	Desc          string         `protobuf:"bytes,5,opt,name=Desc,proto3" json:"Desc,omitempty"`                     // 描述信息
	Imgs          string         `protobuf:"bytes,6,opt,name=Imgs,proto3" json:"Imgs,omitempty"`                     // 封面图片
	Etime         int64          `protobuf:"varint,7,opt,name=Etime,proto3" json:"Etime,omitempty"`                  // 最后编辑时间
	Status        int64          `protobuf:"varint,8,opt,name=Status,proto3" json:"Status,omitempty"`                // 文章状态（-1已删除,0编辑中，1已发布）
	Ext           string         `protobuf:"bytes,9,opt,name=Ext,proto3" json:"Ext,omitempty"`                       // 扩展信息(json格式存储)
	ToDownloadNum int64          `protobuf:"varint,10,opt,name=ToDownloadNum,proto3" json:"ToDownloadNum,omitempty"` // 链接跳转下载次数
	ToAppNum      int64          `protobuf:"varint,11,opt,name=ToAppNum,proto3" json:"ToAppNum,omitempty"`           // 链接跳转app次数
	ToH5Num       int64          `protobuf:"varint,12,opt,name=ToH5Num,proto3" json:"ToH5Num,omitempty"`             // 打开h5分享链接
	ImgType       int64          `protobuf:"varint,13,opt,name=ImgType,proto3" json:"ImgType,omitempty"`             // 客户端布局处理（0 多图 1横图 2竖图）
	Ctime         int64          `protobuf:"varint,14,opt,name=Ctime,proto3" json:"Ctime,omitempty"`                 // 发表时间
	Media         string         `protobuf:"bytes,15,opt,name=Media,proto3" json:"Media,omitempty"`                  // 媒体资源
	HasCollect    int64          `protobuf:"varint,16,opt,name=HasCollect,proto3" json:"HasCollect,omitempty"`       //是否已经收藏
	HasPraised    int64          `protobuf:"varint,17,opt,name=HasPraised,proto3" json:"HasPraised,omitempty"`       //是否已经点赞
	HasFocus      int64          `protobuf:"varint,18,opt,name=HasFocus,proto3" json:"HasFocus,omitempty"`           //是否已经关注
	PraiseCount   int64          `protobuf:"varint,19,opt,name=PraiseCount,proto3" json:"PraiseCount,omitempty"`     //点赞总数
	CommentCount  int64          `protobuf:"varint,20,opt,name=CommentCount,proto3" json:"CommentCount,omitempty"`   //评论总数
	CollectCount  int64          `protobuf:"varint,21,opt,name=CollectCount,proto3" json:"CollectCount,omitempty"`   //收藏总数
	TbMids        string         `protobuf:"bytes,22,opt,name=TbMids,proto3" json:"TbMids,omitempty"`                //同步到到部落ID ->根据部落ID查询部落信息，对外是否可见
	Nick          string         `protobuf:"bytes,23,opt,name=Nick,proto3" json:"Nick,omitempty"`                    //昵称 -> 调用 用户服务查询用户信息
	Avatar        string         `protobuf:"bytes,24,opt,name=Avatar,proto3" json:"Avatar,omitempty"`                //头像 -> 调用 用户服务查询用户信息
	ShareCount    int64          `protobuf:"varint,25,opt,name=ShareCount,proto3" json:"ShareCount,omitempty"`       //分享总数
	Text          string         `protobuf:"bytes,26,opt,name=Text,proto3" json:"Text,omitempty"`                    //动态点赞列表
	CanShare      int64          `protobuf:"varint,27,opt,name=CanShare,proto3" json:"CanShare,omitempty"`           //是否能分享 1 能分享 0不能分享
	Comments      []*CommentInfo `protobuf:"bytes,28,rep,name=comments,proto3" json:"comments,omitempty"`            //评论列表
}

func (x *DynamicInfo) Reset() {
	*x = DynamicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicInfo) ProtoMessage() {}

func (x *DynamicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicInfo.ProtoReflect.Descriptor instead.
func (*DynamicInfo) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{1}
}

func (x *DynamicInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DynamicInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DynamicInfo) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DynamicInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DynamicInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DynamicInfo) GetImgs() string {
	if x != nil {
		return x.Imgs
	}
	return ""
}

func (x *DynamicInfo) GetEtime() int64 {
	if x != nil {
		return x.Etime
	}
	return 0
}

func (x *DynamicInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DynamicInfo) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *DynamicInfo) GetToDownloadNum() int64 {
	if x != nil {
		return x.ToDownloadNum
	}
	return 0
}

func (x *DynamicInfo) GetToAppNum() int64 {
	if x != nil {
		return x.ToAppNum
	}
	return 0
}

func (x *DynamicInfo) GetToH5Num() int64 {
	if x != nil {
		return x.ToH5Num
	}
	return 0
}

func (x *DynamicInfo) GetImgType() int64 {
	if x != nil {
		return x.ImgType
	}
	return 0
}

func (x *DynamicInfo) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *DynamicInfo) GetMedia() string {
	if x != nil {
		return x.Media
	}
	return ""
}

func (x *DynamicInfo) GetHasCollect() int64 {
	if x != nil {
		return x.HasCollect
	}
	return 0
}

func (x *DynamicInfo) GetHasPraised() int64 {
	if x != nil {
		return x.HasPraised
	}
	return 0
}

func (x *DynamicInfo) GetHasFocus() int64 {
	if x != nil {
		return x.HasFocus
	}
	return 0
}

func (x *DynamicInfo) GetPraiseCount() int64 {
	if x != nil {
		return x.PraiseCount
	}
	return 0
}

func (x *DynamicInfo) GetCommentCount() int64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *DynamicInfo) GetCollectCount() int64 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *DynamicInfo) GetTbMids() string {
	if x != nil {
		return x.TbMids
	}
	return ""
}

func (x *DynamicInfo) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *DynamicInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *DynamicInfo) GetShareCount() int64 {
	if x != nil {
		return x.ShareCount
	}
	return 0
}

func (x *DynamicInfo) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *DynamicInfo) GetCanShare() int64 {
	if x != nil {
		return x.CanShare
	}
	return 0
}

func (x *DynamicInfo) GetComments() []*CommentInfo {
	if x != nil {
		return x.Comments
	}
	return nil
}

// * 用户部落列表
type ClubListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64 `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`         // 分页
	UserId   int64 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`     // 用户id
	PageSize int64 `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"` // 分页大小
}

func (x *ClubListReq) Reset() {
	*x = ClubListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubListReq) ProtoMessage() {}

func (x *ClubListReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubListReq.ProtoReflect.Descriptor instead.
func (*ClubListReq) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{2}
}

func (x *ClubListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ClubListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ClubListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ClubListRespList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`          // 部落id，加密后的
	Name   string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`      // 部落名称
	Avatar string `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"Avatar,omitempty"`  // 部落头像
	Bg     string `protobuf:"bytes,4,opt,name=Bg,proto3" json:"Bg,omitempty"`          // 部落背景
	Status int64  `protobuf:"varint,5,opt,name=Status,proto3" json:"Status,omitempty"` // 部落状态 0初始化 2:正常 3:已删除
	Master int64  `protobuf:"varint,6,opt,name=Master,proto3" json:"Master,omitempty"` // 群主
}

func (x *ClubListRespList) Reset() {
	*x = ClubListRespList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubListRespList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubListRespList) ProtoMessage() {}

func (x *ClubListRespList) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubListRespList.ProtoReflect.Descriptor instead.
func (*ClubListRespList) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{3}
}

func (x *ClubListRespList) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClubListRespList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClubListRespList) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ClubListRespList) GetBg() string {
	if x != nil {
		return x.Bg
	}
	return ""
}

func (x *ClubListRespList) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ClubListRespList) GetMaster() int64 {
	if x != nil {
		return x.Master
	}
	return 0
}

type ClubListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64               `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`   // 当前也码
	Pages int64               `protobuf:"varint,2,opt,name=Pages,proto3" json:"Pages,omitempty"` // 总页数
	List  []*ClubListRespList `protobuf:"bytes,3,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *ClubListResp) Reset() {
	*x = ClubListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubListResp) ProtoMessage() {}

func (x *ClubListResp) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubListResp.ProtoReflect.Descriptor instead.
func (*ClubListResp) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{4}
}

func (x *ClubListResp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ClubListResp) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *ClubListResp) GetList() []*ClubListRespList {
	if x != nil {
		return x.List
	}
	return nil
}

// * 部落详情
type ClubInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TbMid int64 `protobuf:"varint,1,opt,name=TbMid,proto3" json:"TbMid,omitempty"` // 部落id
}

func (x *ClubInfoReq) Reset() {
	*x = ClubInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubInfoReq) ProtoMessage() {}

func (x *ClubInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubInfoReq.ProtoReflect.Descriptor instead.
func (*ClubInfoReq) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{5}
}

func (x *ClubInfoReq) GetTbMid() int64 {
	if x != nil {
		return x.TbMid
	}
	return 0
}

type ClubInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                  // 部落加密id
	Name       string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`              // 部落名称
	Avatar     string                 `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"Avatar,omitempty"`          // 部落头像
	Desc       string                 `protobuf:"bytes,4,opt,name=Desc,proto3" json:"Desc,omitempty"`              // 部落简介
	Bg         string                 `protobuf:"bytes,5,opt,name=Bg,proto3" json:"Bg,omitempty"`                  // 部落背景
	IsDel      int64                  `protobuf:"varint,6,opt,name=IsDel,proto3" json:"IsDel,omitempty"`           // 部落是否删除 0否，1是
	InClub     int64                  `protobuf:"varint,7,opt,name=InClub,proto3" json:"InClub,omitempty"`         // 用户是否在部落 0否，1是
	UserCount  int64                  `protobuf:"varint,8,opt,name=UserCount,proto3" json:"UserCount,omitempty"`   // 部落总人数
	Nickname   string                 `protobuf:"bytes,9,opt,name=Nickname,proto3" json:"Nickname,omitempty"`      // 用户在部落的昵称
	Dname      string                 `protobuf:"bytes,10,opt,name=Dname,proto3" json:"Dname,omitempty"`           // 社区配置名称
	IsVerify   int64                  `protobuf:"varint,11,opt,name=IsVerify,proto3" json:"IsVerify,omitempty"`    // 加入部落是否要审核 0否，1是
	IsSearch   int64                  `protobuf:"varint,12,opt,name=IsSearch,proto3" json:"IsSearch,omitempty"`    // 部落是否可搜索 0否，1是
	IsQuery    int64                  `protobuf:"varint,13,opt,name=IsQuery,proto3" json:"IsQuery,omitempty"`      // 成员直接互相访问 0否，1是
	ShowStat   int64                  `protobuf:"varint,14,opt,name=ShowStat,proto3" json:"ShowStat,omitempty"`    // 是否显示统计 0否，1是
	Type       int64                  `protobuf:"varint,15,opt,name=Type,proto3" json:"Type,omitempty"`            // 部落类型
	Notify     int64                  `protobuf:"varint,16,opt,name=Notify,proto3" json:"Notify,omitempty"`        // 通知状态
	Zones      []*ClubInfoResZones    `protobuf:"bytes,17,rep,name=Zones,proto3" json:"Zones,omitempty"`           // 部落分组
	AccessList *ClubInfoResAccessList `protobuf:"bytes,18,opt,name=AccessList,proto3" json:"AccessList,omitempty"` // 权限信息
	Dynamic    []*ClubInfoResDynamic  `protobuf:"bytes,19,rep,name=Dynamic,proto3" json:"Dynamic,omitempty"`       // 部落动态
	Dapp       *ClubInfoResZonesDapp  `protobuf:"bytes,20,opt,name=Dapp,proto3" json:"Dapp,omitempty"`             // 部落应用
}

func (x *ClubInfoRes) Reset() {
	*x = ClubInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubInfoRes) ProtoMessage() {}

func (x *ClubInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubInfoRes.ProtoReflect.Descriptor instead.
func (*ClubInfoRes) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{6}
}

func (x *ClubInfoRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClubInfoRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClubInfoRes) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ClubInfoRes) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ClubInfoRes) GetBg() string {
	if x != nil {
		return x.Bg
	}
	return ""
}

func (x *ClubInfoRes) GetIsDel() int64 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

func (x *ClubInfoRes) GetInClub() int64 {
	if x != nil {
		return x.InClub
	}
	return 0
}

func (x *ClubInfoRes) GetUserCount() int64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *ClubInfoRes) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ClubInfoRes) GetDname() string {
	if x != nil {
		return x.Dname
	}
	return ""
}

func (x *ClubInfoRes) GetIsVerify() int64 {
	if x != nil {
		return x.IsVerify
	}
	return 0
}

func (x *ClubInfoRes) GetIsSearch() int64 {
	if x != nil {
		return x.IsSearch
	}
	return 0
}

func (x *ClubInfoRes) GetIsQuery() int64 {
	if x != nil {
		return x.IsQuery
	}
	return 0
}

func (x *ClubInfoRes) GetShowStat() int64 {
	if x != nil {
		return x.ShowStat
	}
	return 0
}

func (x *ClubInfoRes) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ClubInfoRes) GetNotify() int64 {
	if x != nil {
		return x.Notify
	}
	return 0
}

func (x *ClubInfoRes) GetZones() []*ClubInfoResZones {
	if x != nil {
		return x.Zones
	}
	return nil
}

func (x *ClubInfoRes) GetAccessList() *ClubInfoResAccessList {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *ClubInfoRes) GetDynamic() []*ClubInfoResDynamic {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

func (x *ClubInfoRes) GetDapp() *ClubInfoResZonesDapp {
	if x != nil {
		return x.Dapp
	}
	return nil
}

type ClubInfoResZones struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64                       `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`            // 分组id
	TbMid    int64                       `protobuf:"varint,2,opt,name=TbMid,proto3" json:"TbMid,omitempty"`      // 部落id
	Name     string                      `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`         // 分组名称
	IsDel    int64                       `protobuf:"varint,4,opt,name=IsDel,proto3" json:"IsDel,omitempty"`      // 是否删除 0否，1是
	Sort     int64                       `protobuf:"varint,5,opt,name=Sort,proto3" json:"Sort,omitempty"`        // 排序
	Ctime    int64                       `protobuf:"varint,6,opt,name=Ctime,proto3" json:"Ctime,omitempty"`      // 创建时间
	IsShow   int64                       `protobuf:"varint,7,opt,name=IsShow,proto3" json:"IsShow,omitempty"`    // 是否展示 0否，1是
	Status   string                      `protobuf:"bytes,8,opt,name=Status,proto3" json:"Status,omitempty"`     // 状态
	Channels []*ClubInfoResZonesChannels `protobuf:"bytes,9,rep,name=Channels,proto3" json:"Channels,omitempty"` // 频道列表
}

func (x *ClubInfoResZones) Reset() {
	*x = ClubInfoResZones{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubInfoResZones) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubInfoResZones) ProtoMessage() {}

func (x *ClubInfoResZones) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubInfoResZones.ProtoReflect.Descriptor instead.
func (*ClubInfoResZones) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{7}
}

func (x *ClubInfoResZones) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClubInfoResZones) GetTbMid() int64 {
	if x != nil {
		return x.TbMid
	}
	return 0
}

func (x *ClubInfoResZones) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClubInfoResZones) GetIsDel() int64 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

func (x *ClubInfoResZones) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ClubInfoResZones) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *ClubInfoResZones) GetIsShow() int64 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

func (x *ClubInfoResZones) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClubInfoResZones) GetChannels() []*ClubInfoResZonesChannels {
	if x != nil {
		return x.Channels
	}
	return nil
}

type ClubInfoResZonesChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain     int64   `protobuf:"varint,1,opt,name=Chain,proto3" json:"Chain,omitempty"`        // 所属链（1000000:ETH,1000001:Polygon,2000000:BTC,3000000:TRON）
	CleanTime string  `protobuf:"bytes,2,opt,name=CleanTime,proto3" json:"CleanTime,omitempty"` // 自动清理时间，单位分钟
	Coins     float32 `protobuf:"fixed32,3,opt,name=Coins,proto3" json:"Coins,omitempty"`       // 小于0表示不限制，大于等于0为最低额度限制
	Ctime     int64   `protobuf:"varint,4,opt,name=Ctime,proto3" json:"Ctime,omitempty"`        // 创建时间
	Desc      string  `protobuf:"bytes,5,opt,name=Desc,proto3" json:"Desc,omitempty"`           // 简介
	Frozen    int64   `protobuf:"varint,6,opt,name=Frozen,proto3" json:"Frozen,omitempty"`      // 用户状态 0正常，1锁定，2冻结
	Icon      string  `protobuf:"bytes,7,opt,name=Icon,proto3" json:"Icon,omitempty"`           // 图片
	ID        int64   `protobuf:"varint,8,opt,name=ID,proto3" json:"ID,omitempty"`              // 频道id
	ImID      string  `protobuf:"bytes,9,opt,name=ImID,proto3" json:"ImID,omitempty"`           // im_id
	IsBan     int64   `protobuf:"varint,10,opt,name=IsBan,proto3" json:"IsBan,omitempty"`       // 是否全员禁言：0否1是
	IsBlock   int64   `protobuf:"varint,11,opt,name=IsBlock,proto3" json:"IsBlock,omitempty"`   // 管理员封禁：0否1是
	IsClean   int64   `protobuf:"varint,12,opt,name=IsClean,proto3" json:"IsClean,omitempty"`   // 是否自动清理消息：0否1是
	IsDel     int64   `protobuf:"varint,13,opt,name=IsDel,proto3" json:"IsDel,omitempty"`       // 是否删除：0否1是
	MapID     string  `protobuf:"bytes,14,opt,name=MapID,proto3" json:"MapID,omitempty"`        // 环信im id
	Name      string  `protobuf:"bytes,15,opt,name=Name,proto3" json:"Name,omitempty"`          // 频道名
	Property  int64   `protobuf:"varint,16,opt,name=Property,proto3" json:"Property,omitempty"` // 0:持有数字货币，1:持有数字藏品,2:无限制
	Sort      int64   `protobuf:"varint,17,opt,name=Sort,proto3" json:"Sort,omitempty"`         // 排序
	TbMid     int64   `protobuf:"varint,18,opt,name=TbMid,proto3" json:"TbMid,omitempty"`       // 部落id
	TbZid     int64   `protobuf:"varint,19,opt,name=TbZid,proto3" json:"TbZid,omitempty"`       // 分组id
	Type      int64   `protobuf:"varint,20,opt,name=Type,proto3" json:"Type,omitempty"`         // 频道类型：0文字房子；1语音房间
}

func (x *ClubInfoResZonesChannels) Reset() {
	*x = ClubInfoResZonesChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubInfoResZonesChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubInfoResZonesChannels) ProtoMessage() {}

func (x *ClubInfoResZonesChannels) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubInfoResZonesChannels.ProtoReflect.Descriptor instead.
func (*ClubInfoResZonesChannels) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{8}
}

func (x *ClubInfoResZonesChannels) GetChain() int64 {
	if x != nil {
		return x.Chain
	}
	return 0
}

func (x *ClubInfoResZonesChannels) GetCleanTime() string {
	if x != nil {
		return x.CleanTime
	}
	return ""
}

func (x *ClubInfoResZonesChannels) GetCoins() float32 {
	if x != nil {
		return x.Coins
	}
	return 0
}

func (x *ClubInfoResZonesChannels) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *ClubInfoResZonesChannels) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ClubInfoResZonesChannels) GetFrozen() int64 {
	if x != nil {
		return x.Frozen
	}
	return 0
}

func (x *ClubInfoResZonesChannels) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ClubInfoResZonesChannels) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ClubInfoResZonesChannels) GetImID() string {
	if x != nil {
		return x.ImID
	}
	return ""
}

func (x *ClubInfoResZonesChannels) GetIsBan() int64 {
	if x != nil {
		return x.IsBan
	}
	return 0
}

func (x *ClubInfoResZonesChannels) GetIsBlock() int64 {
	if x != nil {
		return x.IsBlock
	}
	return 0
}

func (x *ClubInfoResZonesChannels) GetIsClean() int64 {
	if x != nil {
		return x.IsClean
	}
	return 0
}

func (x *ClubInfoResZonesChannels) GetIsDel() int64 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

func (x *ClubInfoResZonesChannels) GetMapID() string {
	if x != nil {
		return x.MapID
	}
	return ""
}

func (x *ClubInfoResZonesChannels) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClubInfoResZonesChannels) GetProperty() int64 {
	if x != nil {
		return x.Property
	}
	return 0
}

func (x *ClubInfoResZonesChannels) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ClubInfoResZonesChannels) GetTbMid() int64 {
	if x != nil {
		return x.TbMid
	}
	return 0
}

func (x *ClubInfoResZonesChannels) GetTbZid() int64 {
	if x != nil {
		return x.TbZid
	}
	return 0
}

func (x *ClubInfoResZonesChannels) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ClubInfoResAccessList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMaster int64                        `protobuf:"varint,1,opt,name=IsMaster,proto3" json:"IsMaster,omitempty"` // 是否群主
	IsRole   int64                        `protobuf:"varint,2,opt,name=IsRole,proto3" json:"IsRole,omitempty"`     // 是否管理员
	MinSort  int64                        `protobuf:"varint,3,opt,name=MinSort,proto3" json:"MinSort,omitempty"`   // 最大权重值
	Access   *ClubInfoResAccessListAccess `protobuf:"bytes,4,opt,name=Access,proto3" json:"Access,omitempty"`      // 权限列表
}

func (x *ClubInfoResAccessList) Reset() {
	*x = ClubInfoResAccessList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubInfoResAccessList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubInfoResAccessList) ProtoMessage() {}

func (x *ClubInfoResAccessList) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubInfoResAccessList.ProtoReflect.Descriptor instead.
func (*ClubInfoResAccessList) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{9}
}

func (x *ClubInfoResAccessList) GetIsMaster() int64 {
	if x != nil {
		return x.IsMaster
	}
	return 0
}

func (x *ClubInfoResAccessList) GetIsRole() int64 {
	if x != nil {
		return x.IsRole
	}
	return 0
}

func (x *ClubInfoResAccessList) GetMinSort() int64 {
	if x != nil {
		return x.MinSort
	}
	return 0
}

func (x *ClubInfoResAccessList) GetAccess() *ClubInfoResAccessListAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

type ClubInfoResAccessListAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MCommunity int64 `protobuf:"varint,1,opt,name=MCommunity,proto3" json:"MCommunity,omitempty"` // 管理社区权限
	MMain      int64 `protobuf:"varint,2,opt,name=MMain,proto3" json:"MMain,omitempty"`           // 管理部落权限
	MMembers   int64 `protobuf:"varint,3,opt,name=MMembers,proto3" json:"MMembers,omitempty"`     // 管理成员权限
	MMessage   int64 `protobuf:"varint,4,opt,name=MMessage,proto3" json:"MMessage,omitempty"`     // 管理消息权限
	PComment   int64 `protobuf:"varint,5,opt,name=PComment,proto3" json:"PComment,omitempty"`     // 评论动态权限
	PStories   int64 `protobuf:"varint,6,opt,name=PStories,proto3" json:"PStories,omitempty"`     // 发送动态权限
	SInvite    int64 `protobuf:"varint,7,opt,name=SInvite,proto3" json:"SInvite,omitempty"`       // 创建邀请（1有权限 0没有 默认值是全体成员默认权限）
	SMessage   int64 `protobuf:"varint,8,opt,name=SMessage,proto3" json:"SMessage,omitempty"`     // 发送消息权限
}

func (x *ClubInfoResAccessListAccess) Reset() {
	*x = ClubInfoResAccessListAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubInfoResAccessListAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubInfoResAccessListAccess) ProtoMessage() {}

func (x *ClubInfoResAccessListAccess) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubInfoResAccessListAccess.ProtoReflect.Descriptor instead.
func (*ClubInfoResAccessListAccess) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{10}
}

func (x *ClubInfoResAccessListAccess) GetMCommunity() int64 {
	if x != nil {
		return x.MCommunity
	}
	return 0
}

func (x *ClubInfoResAccessListAccess) GetMMain() int64 {
	if x != nil {
		return x.MMain
	}
	return 0
}

func (x *ClubInfoResAccessListAccess) GetMMembers() int64 {
	if x != nil {
		return x.MMembers
	}
	return 0
}

func (x *ClubInfoResAccessListAccess) GetMMessage() int64 {
	if x != nil {
		return x.MMessage
	}
	return 0
}

func (x *ClubInfoResAccessListAccess) GetPComment() int64 {
	if x != nil {
		return x.PComment
	}
	return 0
}

func (x *ClubInfoResAccessListAccess) GetPStories() int64 {
	if x != nil {
		return x.PStories
	}
	return 0
}

func (x *ClubInfoResAccessListAccess) GetSInvite() int64 {
	if x != nil {
		return x.SInvite
	}
	return 0
}

func (x *ClubInfoResAccessListAccess) GetSMessage() int64 {
	if x != nil {
		return x.SMessage
	}
	return 0
}

type ClubInfoResDynamic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type         int64                  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`     // 0：普通用户动态，1：抖音链接，2长文
	Title        string                 `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`    // 标题
	Imgs         string                 `protobuf:"bytes,4,opt,name=Imgs,proto3" json:"Imgs,omitempty"`      // 图片
	Desc         string                 `protobuf:"bytes,5,opt,name=Desc,proto3" json:"Desc,omitempty"`      // 内容
	Ctime        int64                  `protobuf:"varint,6,opt,name=Ctime,proto3" json:"Ctime,omitempty"`   // 创建时间
	Etime        int64                  `protobuf:"varint,7,opt,name=Etime,proto3" json:"Etime,omitempty"`   // 最后编辑时间
	Status       int64                  `protobuf:"varint,8,opt,name=Status,proto3" json:"Status,omitempty"` // 状态 -1已删除,0编辑中，1已发布
	Ext          *ClubInfoResDynamicExt `protobuf:"bytes,9,opt,name=Ext,proto3" json:"Ext,omitempty"`
	ImgType      int64                  `protobuf:"varint,10,opt,name=ImgType,proto3" json:"ImgType,omitempty"`         // 客户端布局处理（0 多图 1横图 2竖图）
	IsRecommend  int64                  `protobuf:"varint,11,opt,name=IsRecommend,proto3" json:"IsRecommend,omitempty"` // 是否推荐 0否，1是
	Nick         string                 `protobuf:"bytes,12,opt,name=Nick,proto3" json:"Nick,omitempty"`                // 发布者昵称
	Avatar       string                 `protobuf:"bytes,13,opt,name=Avatar,proto3" json:"Avatar,omitempty"`            // 发布者头像
	Did          int64                  `protobuf:"varint,14,opt,name=Did,proto3" json:"Did,omitempty"`
	Duid         int64                  `protobuf:"varint,15,opt,name=Duid,proto3" json:"Duid,omitempty"` // 发布者id
	HasPraised   int64                  `protobuf:"varint,16,opt,name=HasPraised,proto3" json:"HasPraised,omitempty"`
	PraiseCount  int64                  `protobuf:"varint,17,opt,name=PraiseCount,proto3" json:"PraiseCount,omitempty"`   // 点赞数
	CommentCount int64                  `protobuf:"varint,18,opt,name=CommentCount,proto3" json:"CommentCount,omitempty"` // 评论数
	CanShare     int64                  `protobuf:"varint,19,opt,name=CanShare,proto3" json:"CanShare,omitempty"`         // 是否可以被分享
}

func (x *ClubInfoResDynamic) Reset() {
	*x = ClubInfoResDynamic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubInfoResDynamic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubInfoResDynamic) ProtoMessage() {}

func (x *ClubInfoResDynamic) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubInfoResDynamic.ProtoReflect.Descriptor instead.
func (*ClubInfoResDynamic) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{11}
}

func (x *ClubInfoResDynamic) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ClubInfoResDynamic) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ClubInfoResDynamic) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ClubInfoResDynamic) GetImgs() string {
	if x != nil {
		return x.Imgs
	}
	return ""
}

func (x *ClubInfoResDynamic) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ClubInfoResDynamic) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *ClubInfoResDynamic) GetEtime() int64 {
	if x != nil {
		return x.Etime
	}
	return 0
}

func (x *ClubInfoResDynamic) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ClubInfoResDynamic) GetExt() *ClubInfoResDynamicExt {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *ClubInfoResDynamic) GetImgType() int64 {
	if x != nil {
		return x.ImgType
	}
	return 0
}

func (x *ClubInfoResDynamic) GetIsRecommend() int64 {
	if x != nil {
		return x.IsRecommend
	}
	return 0
}

func (x *ClubInfoResDynamic) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *ClubInfoResDynamic) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ClubInfoResDynamic) GetDid() int64 {
	if x != nil {
		return x.Did
	}
	return 0
}

func (x *ClubInfoResDynamic) GetDuid() int64 {
	if x != nil {
		return x.Duid
	}
	return 0
}

func (x *ClubInfoResDynamic) GetHasPraised() int64 {
	if x != nil {
		return x.HasPraised
	}
	return 0
}

func (x *ClubInfoResDynamic) GetPraiseCount() int64 {
	if x != nil {
		return x.PraiseCount
	}
	return 0
}

func (x *ClubInfoResDynamic) GetCommentCount() int64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *ClubInfoResDynamic) GetCanShare() int64 {
	if x != nil {
		return x.CanShare
	}
	return 0
}

type ClubInfoResDynamicExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link string `protobuf:"bytes,1,opt,name=Link,proto3" json:"Link,omitempty"` // 文章类型的链接
}

func (x *ClubInfoResDynamicExt) Reset() {
	*x = ClubInfoResDynamicExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubInfoResDynamicExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubInfoResDynamicExt) ProtoMessage() {}

func (x *ClubInfoResDynamicExt) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubInfoResDynamicExt.ProtoReflect.Descriptor instead.
func (*ClubInfoResDynamicExt) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{12}
}

func (x *ClubInfoResDynamicExt) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type ClubInfoResZonesDapp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctime      int64  `protobuf:"varint,1,opt,name=Ctime,proto3" json:"Ctime,omitempty"`           // 创建时间
	DappDesc   string `protobuf:"bytes,2,opt,name=DappDesc,proto3" json:"DappDesc,omitempty"`      // 应该简介
	DappLogo   string `protobuf:"bytes,3,opt,name=DappLogo,proto3" json:"DappLogo,omitempty"`      // logo
	DappName   string `protobuf:"bytes,4,opt,name=DappName,proto3" json:"DappName,omitempty"`      // 名称
	ID         int64  `protobuf:"varint,5,opt,name=ID,proto3" json:"ID,omitempty"`                 // id
	IsOfficial int64  `protobuf:"varint,6,opt,name=IsOfficial,proto3" json:"IsOfficial,omitempty"` // 是否官方 2否，1是
	TbMid      int64  `protobuf:"varint,7,opt,name=TbMid,proto3" json:"TbMid,omitempty"`           // 部落id
	UserID     int64  `protobuf:"varint,8,opt,name=UserID,proto3" json:"UserID,omitempty"`         // 添加应用者
}

func (x *ClubInfoResZonesDapp) Reset() {
	*x = ClubInfoResZonesDapp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubInfoResZonesDapp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubInfoResZonesDapp) ProtoMessage() {}

func (x *ClubInfoResZonesDapp) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubInfoResZonesDapp.ProtoReflect.Descriptor instead.
func (*ClubInfoResZonesDapp) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{13}
}

func (x *ClubInfoResZonesDapp) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *ClubInfoResZonesDapp) GetDappDesc() string {
	if x != nil {
		return x.DappDesc
	}
	return ""
}

func (x *ClubInfoResZonesDapp) GetDappLogo() string {
	if x != nil {
		return x.DappLogo
	}
	return ""
}

func (x *ClubInfoResZonesDapp) GetDappName() string {
	if x != nil {
		return x.DappName
	}
	return ""
}

func (x *ClubInfoResZonesDapp) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ClubInfoResZonesDapp) GetIsOfficial() int64 {
	if x != nil {
		return x.IsOfficial
	}
	return 0
}

func (x *ClubInfoResZonesDapp) GetTbMid() int64 {
	if x != nil {
		return x.TbMid
	}
	return 0
}

func (x *ClubInfoResZonesDapp) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

// * 群用户状态
type GroupUserStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户id
	ImId   string `protobuf:"bytes,2,opt,name=ImId,proto3" json:"ImId,omitempty"`      // im_id 我们服务端自己的生成的id
}

func (x *GroupUserStatusReq) Reset() {
	*x = GroupUserStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupUserStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupUserStatusReq) ProtoMessage() {}

func (x *GroupUserStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupUserStatusReq.ProtoReflect.Descriptor instead.
func (*GroupUserStatusReq) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{14}
}

func (x *GroupUserStatusReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GroupUserStatusReq) GetImId() string {
	if x != nil {
		return x.ImId
	}
	return ""
}

type GroupUserStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frozen    int64 `protobuf:"varint,1,opt,name=Frozen,proto3" json:"Frozen,omitempty"`       // 用户状态 0正常，1锁定，2冻结
	Gag       int64 `protobuf:"varint,2,opt,name=Gag,proto3" json:"Gag,omitempty"`             // 禁言状态 0正常，1全体禁言，2单人禁言
	IsClean   int64 `protobuf:"varint,3,opt,name=IsClean,proto3" json:"IsClean,omitempty"`     // 是否清除聊天记录 0否，1是
	CleanTime int64 `protobuf:"varint,4,opt,name=CleanTime,proto3" json:"CleanTime,omitempty"` // 消息清理时间 单位分钟
}

func (x *GroupUserStatusRes) Reset() {
	*x = GroupUserStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupUserStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupUserStatusRes) ProtoMessage() {}

func (x *GroupUserStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupUserStatusRes.ProtoReflect.Descriptor instead.
func (*GroupUserStatusRes) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{15}
}

func (x *GroupUserStatusRes) GetFrozen() int64 {
	if x != nil {
		return x.Frozen
	}
	return 0
}

func (x *GroupUserStatusRes) GetGag() int64 {
	if x != nil {
		return x.Gag
	}
	return 0
}

func (x *GroupUserStatusRes) GetIsClean() int64 {
	if x != nil {
		return x.IsClean
	}
	return 0
}

func (x *GroupUserStatusRes) GetCleanTime() int64 {
	if x != nil {
		return x.CleanTime
	}
	return 0
}

// *群信息
type GroupInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupType GroupType `protobuf:"varint,1,opt,name=GroupType,proto3,enum=club.GroupType" json:"GroupType,omitempty"` // 群类型
	TbMid     int64     `protobuf:"varint,2,opt,name=TbMid,proto3" json:"TbMid,omitempty"`                             // 部落id 查询部落时需要
	ImId      string    `protobuf:"bytes,3,opt,name=ImId,proto3" json:"ImId,omitempty"`                                // im_id 查询群聊或频道
}

func (x *GroupInfoReq) Reset() {
	*x = GroupInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoReq) ProtoMessage() {}

func (x *GroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoReq.ProtoReflect.Descriptor instead.
func (*GroupInfoReq) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{16}
}

func (x *GroupInfoReq) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_SUP_GROUP
}

func (x *GroupInfoReq) GetTbMid() int64 {
	if x != nil {
		return x.TbMid
	}
	return 0
}

func (x *GroupInfoReq) GetImId() string {
	if x != nil {
		return x.ImId
	}
	return ""
}

type GroupInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64     `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                // mysql自增id
	Name      string    `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`             // 名称
	Desc      string    `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`             // 简介
	Avatar    string    `protobuf:"bytes,4,opt,name=Avatar,proto3" json:"Avatar,omitempty"`         // 群聊头像
	Icon      string    `protobuf:"bytes,5,opt,name=Icon,proto3" json:"Icon,omitempty"`             // 图标
	Bg        string    `protobuf:"bytes,6,opt,name=Bg,proto3" json:"Bg,omitempty"`                 // 自定义背景图片
	Type      int64     `protobuf:"varint,7,opt,name=Type,proto3" json:"Type,omitempty"`            // 类型
	Master    int64     `protobuf:"varint,8,opt,name=Master,proto3" json:"Master,omitempty"`        // 群主
	Count     int64     `protobuf:"varint,9,opt,name=Count,proto3" json:"Count,omitempty"`          // 人数
	ImId      string    `protobuf:"bytes,10,opt,name=ImId,proto3" json:"ImId,omitempty"`            // 系统内唯一id
	Sort      int64     `protobuf:"varint,11,opt,name=Sort,proto3" json:"Sort,omitempty"`           // 排序
	Ctime     int64     `protobuf:"varint,12,opt,name=Ctime,proto3" json:"Ctime,omitempty"`         // 创建时间
	Property  int64     `protobuf:"varint,13,opt,name=Property,proto3" json:"Property,omitempty"`   // 0:持有数字货币，1:持有数字藏品,2:无限制
	Chain     int64     `protobuf:"varint,14,opt,name=Chain,proto3" json:"Chain,omitempty"`         // 所属链（1000000:ETH,1000001:Polygon,2000000:BTC,3000000:TRON）
	Coins     float32   `protobuf:"fixed32,15,opt,name=Coins,proto3" json:"Coins,omitempty"`        // 小于0表示不限制，大于等于0为最低额度限制
	IsDel     int64     `protobuf:"varint,16,opt,name=IsDel,proto3" json:"IsDel,omitempty"`         // 是否删除：0否1是
	IsBan     int64     `protobuf:"varint,17,opt,name=IsBan,proto3" json:"IsBan,omitempty"`         // 是否全员禁言：0否1是
	IsClean   int64     `protobuf:"varint,18,opt,name=IsClean,proto3" json:"IsClean,omitempty"`     // 是否自动清理消息：0否1是
	CleanTime int64     `protobuf:"varint,19,opt,name=CleanTime,proto3" json:"CleanTime,omitempty"` // 自动清理时间，单位分钟
	IsBlock   int64     `protobuf:"varint,20,opt,name=IsBlock,proto3" json:"IsBlock,omitempty"`     // 管理员封禁：0否1是
	IsVerify  int64     `protobuf:"varint,21,opt,name=IsVerify,proto3" json:"IsVerify,omitempty"`   // 加入是否审核：0否1是
	IsSearch  int64     `protobuf:"varint,22,opt,name=IsSearch,proto3" json:"IsSearch,omitempty"`   // 是否可被搜索：0否1是
	IsQuery   int64     `protobuf:"varint,23,opt,name=IsQuery,proto3" json:"IsQuery,omitempty"`     // 成员是否看相互访问：0否1是
	Status    int64     `protobuf:"varint,24,opt,name=Status,proto3" json:"Status,omitempty"`       // 群状态：0初始化 2:正常 3:已删除
	Api       string    `protobuf:"bytes,25,opt,name=Api,proto3" json:"Api,omitempty"`              // 创建api
	Ext       *GroupExt `protobuf:"bytes,26,opt,name=Ext,proto3" json:"Ext,omitempty"`              // 拓展信息
}

func (x *GroupInfoRes) Reset() {
	*x = GroupInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoRes) ProtoMessage() {}

func (x *GroupInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoRes.ProtoReflect.Descriptor instead.
func (*GroupInfoRes) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{17}
}

func (x *GroupInfoRes) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupInfoRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupInfoRes) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GroupInfoRes) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *GroupInfoRes) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *GroupInfoRes) GetBg() string {
	if x != nil {
		return x.Bg
	}
	return ""
}

func (x *GroupInfoRes) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GroupInfoRes) GetMaster() int64 {
	if x != nil {
		return x.Master
	}
	return 0
}

func (x *GroupInfoRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GroupInfoRes) GetImId() string {
	if x != nil {
		return x.ImId
	}
	return ""
}

func (x *GroupInfoRes) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *GroupInfoRes) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *GroupInfoRes) GetProperty() int64 {
	if x != nil {
		return x.Property
	}
	return 0
}

func (x *GroupInfoRes) GetChain() int64 {
	if x != nil {
		return x.Chain
	}
	return 0
}

func (x *GroupInfoRes) GetCoins() float32 {
	if x != nil {
		return x.Coins
	}
	return 0
}

func (x *GroupInfoRes) GetIsDel() int64 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

func (x *GroupInfoRes) GetIsBan() int64 {
	if x != nil {
		return x.IsBan
	}
	return 0
}

func (x *GroupInfoRes) GetIsClean() int64 {
	if x != nil {
		return x.IsClean
	}
	return 0
}

func (x *GroupInfoRes) GetCleanTime() int64 {
	if x != nil {
		return x.CleanTime
	}
	return 0
}

func (x *GroupInfoRes) GetIsBlock() int64 {
	if x != nil {
		return x.IsBlock
	}
	return 0
}

func (x *GroupInfoRes) GetIsVerify() int64 {
	if x != nil {
		return x.IsVerify
	}
	return 0
}

func (x *GroupInfoRes) GetIsSearch() int64 {
	if x != nil {
		return x.IsSearch
	}
	return 0
}

func (x *GroupInfoRes) GetIsQuery() int64 {
	if x != nil {
		return x.IsQuery
	}
	return 0
}

func (x *GroupInfoRes) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GroupInfoRes) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *GroupInfoRes) GetExt() *GroupExt {
	if x != nil {
		return x.Ext
	}
	return nil
}

type GroupExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TbMid     string `protobuf:"bytes,1,opt,name=TbMid,proto3" json:"TbMid,omitempty"`         // 超级群唯一标识
	TbZid     string `protobuf:"bytes,2,opt,name=TbZid,proto3" json:"TbZid,omitempty"`         // 分组唯一标识
	EasemobId string `protobuf:"bytes,3,opt,name=EasemobId,proto3" json:"EasemobId,omitempty"` // 环信群id
}

func (x *GroupExt) Reset() {
	*x = GroupExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupExt) ProtoMessage() {}

func (x *GroupExt) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupExt.ProtoReflect.Descriptor instead.
func (*GroupExt) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{18}
}

func (x *GroupExt) GetTbMid() string {
	if x != nil {
		return x.TbMid
	}
	return ""
}

func (x *GroupExt) GetTbZid() string {
	if x != nil {
		return x.TbZid
	}
	return ""
}

func (x *GroupExt) GetEasemobId() string {
	if x != nil {
		return x.EasemobId
	}
	return ""
}

type APIError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`      //错误码 0正常
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"` //错误消息
}

func (x *APIError) Reset() {
	*x = APIError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIError) ProtoMessage() {}

func (x *APIError) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIError.ProtoReflect.Descriptor instead.
func (*APIError) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{19}
}

func (x *APIError) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *APIError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type APICommonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *APIError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Data  string    `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *APICommonResponse) Reset() {
	*x = APICommonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APICommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APICommonResponse) ProtoMessage() {}

func (x *APICommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APICommonResponse.ProtoReflect.Descriptor instead.
func (*APICommonResponse) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{20}
}

func (x *APICommonResponse) GetError() *APIError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *APICommonResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type SetClubRecommendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TbMid string `protobuf:"bytes,1,opt,name=TbMid,proto3" json:"TbMid,omitempty"` //部落ID
	Did   int64  `protobuf:"varint,2,opt,name=Did,proto3" json:"Did,omitempty"`    //动态ID
	Duid  int64  `protobuf:"varint,3,opt,name=Duid,proto3" json:"Duid,omitempty"`  //动态发布者UID
	Opt   int64  `protobuf:"varint,4,opt,name=Opt,proto3" json:"Opt,omitempty"`    //0下架 1推荐 2取消推荐
}

func (x *SetClubRecommendRequest) Reset() {
	*x = SetClubRecommendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetClubRecommendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClubRecommendRequest) ProtoMessage() {}

func (x *SetClubRecommendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClubRecommendRequest.ProtoReflect.Descriptor instead.
func (*SetClubRecommendRequest) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{21}
}

func (x *SetClubRecommendRequest) GetTbMid() string {
	if x != nil {
		return x.TbMid
	}
	return ""
}

func (x *SetClubRecommendRequest) GetDid() int64 {
	if x != nil {
		return x.Did
	}
	return 0
}

func (x *SetClubRecommendRequest) GetDuid() int64 {
	if x != nil {
		return x.Duid
	}
	return 0
}

func (x *SetClubRecommendRequest) GetOpt() int64 {
	if x != nil {
		return x.Opt
	}
	return 0
}

type GetClubDynamicListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TbMid  int64 `protobuf:"varint,1,opt,name=TbMid,proto3" json:"TbMid,omitempty"`   //部落ID
	Page   int64 `protobuf:"varint,2,opt,name=Page,proto3" json:"Page,omitempty"`     //页码
	UserID int64 `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"` //用于判断是否已经点赞
}

func (x *GetClubDynamicListRequest) Reset() {
	*x = GetClubDynamicListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClubDynamicListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClubDynamicListRequest) ProtoMessage() {}

func (x *GetClubDynamicListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClubDynamicListRequest.ProtoReflect.Descriptor instead.
func (*GetClubDynamicListRequest) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{22}
}

func (x *GetClubDynamicListRequest) GetTbMid() int64 {
	if x != nil {
		return x.TbMid
	}
	return 0
}

func (x *GetClubDynamicListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetClubDynamicListRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type GetClubDynamicListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*DynamicInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"` //动态信息
	Error *APIError      `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *GetClubDynamicListResponse) Reset() {
	*x = GetClubDynamicListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClubDynamicListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClubDynamicListResponse) ProtoMessage() {}

func (x *GetClubDynamicListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClubDynamicListResponse.ProtoReflect.Descriptor instead.
func (*GetClubDynamicListResponse) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{23}
}

func (x *GetClubDynamicListResponse) GetData() []*DynamicInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetClubDynamicListResponse) GetError() *APIError {
	if x != nil {
		return x.Error
	}
	return nil
}

type RefreshClubDynamicListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TbMid int64 `protobuf:"varint,1,opt,name=TbMid,proto3" json:"TbMid,omitempty"` //部落ID
}

func (x *RefreshClubDynamicListRequest) Reset() {
	*x = RefreshClubDynamicListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshClubDynamicListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshClubDynamicListRequest) ProtoMessage() {}

func (x *RefreshClubDynamicListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshClubDynamicListRequest.ProtoReflect.Descriptor instead.
func (*RefreshClubDynamicListRequest) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{24}
}

func (x *RefreshClubDynamicListRequest) GetTbMid() int64 {
	if x != nil {
		return x.TbMid
	}
	return 0
}

type SetClubDynamicActRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TbMid int64 `protobuf:"varint,1,opt,name=TbMid,proto3" json:"TbMid,omitempty"` // 部落id
	Did   int64 `protobuf:"varint,2,opt,name=Did,proto3" json:"Did,omitempty"`     // 动态id
	Duid  int64 `protobuf:"varint,3,opt,name=Duid,proto3" json:"Duid,omitempty"`   // 发布者Uid
	Opt   int64 `protobuf:"varint,4,opt,name=Opt,proto3" json:"Opt,omitempty"`     // 0 删除
}

func (x *SetClubDynamicActRequest) Reset() {
	*x = SetClubDynamicActRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetClubDynamicActRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClubDynamicActRequest) ProtoMessage() {}

func (x *SetClubDynamicActRequest) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClubDynamicActRequest.ProtoReflect.Descriptor instead.
func (*SetClubDynamicActRequest) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{25}
}

func (x *SetClubDynamicActRequest) GetTbMid() int64 {
	if x != nil {
		return x.TbMid
	}
	return 0
}

func (x *SetClubDynamicActRequest) GetDid() int64 {
	if x != nil {
		return x.Did
	}
	return 0
}

func (x *SetClubDynamicActRequest) GetDuid() int64 {
	if x != nil {
		return x.Duid
	}
	return 0
}

func (x *SetClubDynamicActRequest) GetOpt() int64 {
	if x != nil {
		return x.Opt
	}
	return 0
}

type ClubDynamicCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`    // 社区名称
	BgImg string `protobuf:"bytes,2,opt,name=BgImg,proto3" json:"BgImg,omitempty"`  // 社区背景图
	IsPub int64  `protobuf:"varint,3,opt,name=IsPub,proto3" json:"IsPub,omitempty"` // 社区动态是否公开 1公开 0不公开
}

func (x *ClubDynamicCfg) Reset() {
	*x = ClubDynamicCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubDynamicCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubDynamicCfg) ProtoMessage() {}

func (x *ClubDynamicCfg) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubDynamicCfg.ProtoReflect.Descriptor instead.
func (*ClubDynamicCfg) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{26}
}

func (x *ClubDynamicCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClubDynamicCfg) GetBgImg() string {
	if x != nil {
		return x.BgImg
	}
	return ""
}

func (x *ClubDynamicCfg) GetIsPub() int64 {
	if x != nil {
		return x.IsPub
	}
	return 0
}

type SaveClubDynamicCfgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TbMid int64           `protobuf:"varint,1,opt,name=TbMid,proto3" json:"TbMid,omitempty"` // 部落id
	Cfg   *ClubDynamicCfg `protobuf:"bytes,2,opt,name=cfg,proto3" json:"cfg,omitempty"`      // 部落社区管理
}

func (x *SaveClubDynamicCfgRequest) Reset() {
	*x = SaveClubDynamicCfgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveClubDynamicCfgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveClubDynamicCfgRequest) ProtoMessage() {}

func (x *SaveClubDynamicCfgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveClubDynamicCfgRequest.ProtoReflect.Descriptor instead.
func (*SaveClubDynamicCfgRequest) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{27}
}

func (x *SaveClubDynamicCfgRequest) GetTbMid() int64 {
	if x != nil {
		return x.TbMid
	}
	return 0
}

func (x *SaveClubDynamicCfgRequest) GetCfg() *ClubDynamicCfg {
	if x != nil {
		return x.Cfg
	}
	return nil
}

type GetClubDynamicCfgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TbMid int64 `protobuf:"varint,1,opt,name=TbMid,proto3" json:"TbMid,omitempty"` // 部落id
}

func (x *GetClubDynamicCfgRequest) Reset() {
	*x = GetClubDynamicCfgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClubDynamicCfgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClubDynamicCfgRequest) ProtoMessage() {}

func (x *GetClubDynamicCfgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClubDynamicCfgRequest.ProtoReflect.Descriptor instead.
func (*GetClubDynamicCfgRequest) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{28}
}

func (x *GetClubDynamicCfgRequest) GetTbMid() int64 {
	if x != nil {
		return x.TbMid
	}
	return 0
}

type GetClubDynamicCfgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TbMid int64           `protobuf:"varint,1,opt,name=TbMid,proto3" json:"TbMid,omitempty"` // 部落id
	Cfg   *ClubDynamicCfg `protobuf:"bytes,2,opt,name=cfg,proto3" json:"cfg,omitempty"`      // 部落动态社区配置信息
	Error *APIError       `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *GetClubDynamicCfgResponse) Reset() {
	*x = GetClubDynamicCfgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_club_v1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClubDynamicCfgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClubDynamicCfgResponse) ProtoMessage() {}

func (x *GetClubDynamicCfgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_club_v1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClubDynamicCfgResponse.ProtoReflect.Descriptor instead.
func (*GetClubDynamicCfgResponse) Descriptor() ([]byte, []int) {
	return file_club_v1_proto_rawDescGZIP(), []int{29}
}

func (x *GetClubDynamicCfgResponse) GetTbMid() int64 {
	if x != nil {
		return x.TbMid
	}
	return 0
}

func (x *GetClubDynamicCfgResponse) GetCfg() *ClubDynamicCfg {
	if x != nil {
		return x.Cfg
	}
	return nil
}

func (x *GetClubDynamicCfgResponse) GetError() *APIError {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_club_v1_proto protoreflect.FileDescriptor

var file_club_v1_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x63, 0x6c, 0x75, 0x62, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x22, 0xf2, 0x05, 0x0a, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6d, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6d, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x45, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x78, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54,
	0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x54, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x75,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x4e, 0x75, 0x6d, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x6f, 0x48, 0x35, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x54, 0x6f, 0x48, 0x35, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x49, 0x6d, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x43, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x48, 0x61, 0x73, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x48, 0x61, 0x73, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x48, 0x61, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x48, 0x61, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x61,
	0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x69, 0x63, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x69, 0x63, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x61, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43,
	0x61, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x75, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x8e, 0x01,
	0x0a, 0x10, 0x43, 0x6c, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x42, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x42, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x22, 0x64,
	0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x6c,
	0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x22, 0xd4, 0x04, 0x0a, 0x0b, 0x43, 0x6c,
	0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x42, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x42, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x44,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x44, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x49, 0x73, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x49, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x49, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x68, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x68, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x05, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12,
	0x3b, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x07, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x12, 0x2e, 0x0a, 0x04, 0x44, 0x61, 0x70, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x44, 0x61, 0x70, 0x70, 0x52, 0x04, 0x44, 0x61, 0x70, 0x70,
	0x22, 0xf8, 0x01, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x49, 0x73, 0x44, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3a, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x52, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xd8, 0x03, 0x0a, 0x18,
	0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x43, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6d, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6d, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x49, 0x73, 0x42, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x73, 0x42,
	0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x49,
	0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x61, 0x70, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x61, 0x70,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x62, 0x5a, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x62, 0x5a,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x49, 0x73,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x53, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x39,
	0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x06, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x1b, 0x43, 0x6c,
	0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4d,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x4d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x4d, 0x61, 0x69, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x53, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf9, 0x03, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6d, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6d, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x45, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x45, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x45, 0x78, 0x74, 0x52, 0x03, 0x45, 0x78,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x49, 0x6d, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x49, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x69, 0x63,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x44, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x75, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x48, 0x61, 0x73, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x61, 0x6e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x22, 0x2b, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x45, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xde,
	0x01, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x5a, 0x6f,
	0x6e, 0x65, 0x73, 0x44, 0x61, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x61, 0x70, 0x70, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x44, 0x61, 0x70, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x70,
	0x70, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x70,
	0x70, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x49, 0x73, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x40, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6d, 0x49,
	0x64, 0x22, 0x76, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x47, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x47, 0x61,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x49, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x0c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63,
	0x6c, 0x75, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x62, 0x4d, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x49, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6d,
	0x49, 0x64, 0x22, 0xe6, 0x04, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x42, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x42, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6d, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x43, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x49, 0x73, 0x44, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x42, 0x61, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x73, 0x42, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x49, 0x73,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x49, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x49, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x49, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x70, 0x69, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x70, 0x69, 0x12, 0x20, 0x0a, 0x03, 0x45, 0x78, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x52, 0x03, 0x45, 0x78, 0x74, 0x22, 0x54, 0x0a, 0x08, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x62, 0x5a, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x62,
	0x5a, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x61, 0x73, 0x65, 0x6d, 0x6f, 0x62, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x61, 0x73, 0x65, 0x6d, 0x6f, 0x62, 0x49,
	0x64, 0x22, 0x38, 0x0a, 0x08, 0x41, 0x50, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x11, 0x41,
	0x50, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x41, 0x50, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x17, 0x53, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x44,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x44, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x44, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x75, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x4f, 0x70, 0x74, 0x22, 0x5d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x69, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x41, 0x50,
	0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x35, 0x0a,
	0x1d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54,
	0x62, 0x4d, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x44, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x4f, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x4f, 0x70, 0x74, 0x22, 0x50,
	0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x66, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x67, 0x49, 0x6d, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x67, 0x49, 0x6d, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73,
	0x50, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x73, 0x50, 0x75, 0x62,
	0x22, 0x59, 0x0a, 0x19, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x43, 0x66, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x62,
	0x4d, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x63, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x43, 0x66, 0x67, 0x52, 0x03, 0x63, 0x66, 0x67, 0x22, 0x30, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x66, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64, 0x22, 0x7f, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43,
	0x66, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x62,
	0x4d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x62, 0x4d, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x03, 0x63, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x43, 0x66, 0x67, 0x52, 0x03, 0x63, 0x66, 0x67, 0x12, 0x24, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x41,
	0x50, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x3e,
	0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x55, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4d,
	0x41, 0x4c, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x32, 0xc6,
	0x04, 0x0a, 0x0a, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x0b, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x63,
	0x6c, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x11, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x75,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x67, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x62,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e,
	0x41, 0x50, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x12, 0x73, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x43, 0x66, 0x67, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x66,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e,
	0x41, 0x50, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x43, 0x66, 0x67, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x66, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x66, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x63, 0x6c, 0x75, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_club_v1_proto_rawDescOnce sync.Once
	file_club_v1_proto_rawDescData = file_club_v1_proto_rawDesc
)

func file_club_v1_proto_rawDescGZIP() []byte {
	file_club_v1_proto_rawDescOnce.Do(func() {
		file_club_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_club_v1_proto_rawDescData)
	})
	return file_club_v1_proto_rawDescData
}

var file_club_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_club_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_club_v1_proto_goTypes = []interface{}{
	(GroupType)(0),                        // 0: club.GroupType
	(*CommentInfo)(nil),                   // 1: club.CommentInfo
	(*DynamicInfo)(nil),                   // 2: club.DynamicInfo
	(*ClubListReq)(nil),                   // 3: club.ClubListReq
	(*ClubListRespList)(nil),              // 4: club.ClubListRespList
	(*ClubListResp)(nil),                  // 5: club.ClubListResp
	(*ClubInfoReq)(nil),                   // 6: club.ClubInfoReq
	(*ClubInfoRes)(nil),                   // 7: club.ClubInfoRes
	(*ClubInfoResZones)(nil),              // 8: club.ClubInfoResZones
	(*ClubInfoResZonesChannels)(nil),      // 9: club.ClubInfoResZonesChannels
	(*ClubInfoResAccessList)(nil),         // 10: club.ClubInfoResAccessList
	(*ClubInfoResAccessListAccess)(nil),   // 11: club.ClubInfoResAccessListAccess
	(*ClubInfoResDynamic)(nil),            // 12: club.ClubInfoResDynamic
	(*ClubInfoResDynamicExt)(nil),         // 13: club.ClubInfoResDynamicExt
	(*ClubInfoResZonesDapp)(nil),          // 14: club.ClubInfoResZonesDapp
	(*GroupUserStatusReq)(nil),            // 15: club.GroupUserStatusReq
	(*GroupUserStatusRes)(nil),            // 16: club.GroupUserStatusRes
	(*GroupInfoReq)(nil),                  // 17: club.GroupInfoReq
	(*GroupInfoRes)(nil),                  // 18: club.GroupInfoRes
	(*GroupExt)(nil),                      // 19: club.GroupExt
	(*APIError)(nil),                      // 20: club.APIError
	(*APICommonResponse)(nil),             // 21: club.APICommonResponse
	(*SetClubRecommendRequest)(nil),       // 22: club.SetClubRecommendRequest
	(*GetClubDynamicListRequest)(nil),     // 23: club.GetClubDynamicListRequest
	(*GetClubDynamicListResponse)(nil),    // 24: club.GetClubDynamicListResponse
	(*RefreshClubDynamicListRequest)(nil), // 25: club.RefreshClubDynamicListRequest
	(*SetClubDynamicActRequest)(nil),      // 26: club.SetClubDynamicActRequest
	(*ClubDynamicCfg)(nil),                // 27: club.ClubDynamicCfg
	(*SaveClubDynamicCfgRequest)(nil),     // 28: club.SaveClubDynamicCfgRequest
	(*GetClubDynamicCfgRequest)(nil),      // 29: club.GetClubDynamicCfgRequest
	(*GetClubDynamicCfgResponse)(nil),     // 30: club.GetClubDynamicCfgResponse
}
var file_club_v1_proto_depIdxs = []int32{
	1,  // 0: club.DynamicInfo.comments:type_name -> club.CommentInfo
	4,  // 1: club.ClubListResp.List:type_name -> club.ClubListRespList
	8,  // 2: club.ClubInfoRes.Zones:type_name -> club.ClubInfoResZones
	10, // 3: club.ClubInfoRes.AccessList:type_name -> club.ClubInfoResAccessList
	12, // 4: club.ClubInfoRes.Dynamic:type_name -> club.ClubInfoResDynamic
	14, // 5: club.ClubInfoRes.Dapp:type_name -> club.ClubInfoResZonesDapp
	9,  // 6: club.ClubInfoResZones.Channels:type_name -> club.ClubInfoResZonesChannels
	11, // 7: club.ClubInfoResAccessList.Access:type_name -> club.ClubInfoResAccessListAccess
	13, // 8: club.ClubInfoResDynamic.Ext:type_name -> club.ClubInfoResDynamicExt
	0,  // 9: club.GroupInfoReq.GroupType:type_name -> club.GroupType
	19, // 10: club.GroupInfoRes.Ext:type_name -> club.GroupExt
	20, // 11: club.APICommonResponse.Error:type_name -> club.APIError
	2,  // 12: club.GetClubDynamicListResponse.data:type_name -> club.DynamicInfo
	20, // 13: club.GetClubDynamicListResponse.Error:type_name -> club.APIError
	27, // 14: club.SaveClubDynamicCfgRequest.cfg:type_name -> club.ClubDynamicCfg
	27, // 15: club.GetClubDynamicCfgResponse.cfg:type_name -> club.ClubDynamicCfg
	20, // 16: club.GetClubDynamicCfgResponse.Error:type_name -> club.APIError
	3,  // 17: club.ClubServer.getClubList:input_type -> club.ClubListReq
	6,  // 18: club.ClubServer.getClubInfo:input_type -> club.ClubInfoReq
	15, // 19: club.ClubServer.getGroupUserStatus:input_type -> club.GroupUserStatusReq
	17, // 20: club.ClubServer.getGroupInfo:input_type -> club.GroupInfoReq
	23, // 21: club.ClubServer.getClubDynamicList:input_type -> club.GetClubDynamicListRequest
	26, // 22: club.ClubServer.setClubDynamicAct:input_type -> club.SetClubDynamicActRequest
	28, // 23: club.ClubServer.saveClubDynamicCfg:input_type -> club.SaveClubDynamicCfgRequest
	29, // 24: club.ClubServer.getClubDynamicCfg:input_type -> club.GetClubDynamicCfgRequest
	5,  // 25: club.ClubServer.getClubList:output_type -> club.ClubListResp
	7,  // 26: club.ClubServer.getClubInfo:output_type -> club.ClubInfoRes
	16, // 27: club.ClubServer.getGroupUserStatus:output_type -> club.GroupUserStatusRes
	18, // 28: club.ClubServer.getGroupInfo:output_type -> club.GroupInfoRes
	24, // 29: club.ClubServer.getClubDynamicList:output_type -> club.GetClubDynamicListResponse
	21, // 30: club.ClubServer.setClubDynamicAct:output_type -> club.APICommonResponse
	21, // 31: club.ClubServer.saveClubDynamicCfg:output_type -> club.APICommonResponse
	30, // 32: club.ClubServer.getClubDynamicCfg:output_type -> club.GetClubDynamicCfgResponse
	25, // [25:33] is the sub-list for method output_type
	17, // [17:25] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_club_v1_proto_init() }
func file_club_v1_proto_init() {
	if File_club_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_club_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubListRespList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubInfoResZones); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubInfoResZonesChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubInfoResAccessList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubInfoResAccessListAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubInfoResDynamic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubInfoResDynamicExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubInfoResZonesDapp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupUserStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupUserStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APICommonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetClubRecommendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClubDynamicListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClubDynamicListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshClubDynamicListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetClubDynamicActRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubDynamicCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveClubDynamicCfgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClubDynamicCfgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_club_v1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClubDynamicCfgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_club_v1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_club_v1_proto_goTypes,
		DependencyIndexes: file_club_v1_proto_depIdxs,
		EnumInfos:         file_club_v1_proto_enumTypes,
		MessageInfos:      file_club_v1_proto_msgTypes,
	}.Build()
	File_club_v1_proto = out.File
	file_club_v1_proto_rawDesc = nil
	file_club_v1_proto_goTypes = nil
	file_club_v1_proto_depIdxs = nil
}
