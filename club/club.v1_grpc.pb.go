// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: club.v1.proto

package club

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClubServer_GetClubList_FullMethodName              = "/club.ClubServer/getClubList"
	ClubServer_GetClubInfo_FullMethodName              = "/club.ClubServer/getClubInfo"
	ClubServer_GetGroupUserStatus_FullMethodName       = "/club.ClubServer/getGroupUserStatus"
	ClubServer_GetGroupInfo_FullMethodName             = "/club.ClubServer/getGroupInfo"
	ClubServer_GetClubDynamicList_FullMethodName       = "/club.ClubServer/getClubDynamicList"
	ClubServer_SetClubDynamicAct_FullMethodName        = "/club.ClubServer/setClubDynamicAct"
	ClubServer_SaveClubDynamicCfg_FullMethodName       = "/club.ClubServer/saveClubDynamicCfg"
	ClubServer_GetClubDynamicCfg_FullMethodName        = "/club.ClubServer/getClubDynamicCfg"
	ClubServer_GetClubDynamicStatistics_FullMethodName = "/club.ClubServer/getClubDynamicStatistics"
)

// ClubServerClient is the client API for ClubServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubServerClient interface {
	// 用户部落列表
	GetClubList(ctx context.Context, in *ClubListReq, opts ...grpc.CallOption) (*ClubListResp, error)
	// 部落详情
	GetClubInfo(ctx context.Context, in *ClubInfoReq, opts ...grpc.CallOption) (*ClubInfoRes, error)
	// 群用户状态
	GetGroupUserStatus(ctx context.Context, in *GroupUserStatusReq, opts ...grpc.CallOption) (*GroupUserStatusRes, error)
	GetGroupInfo(ctx context.Context, in *GroupInfoReq, opts ...grpc.CallOption) (*GroupInfoRes, error)
	// 获取部落动态列表
	GetClubDynamicList(ctx context.Context, in *GetClubDynamicListRequest, opts ...grpc.CallOption) (*GetClubDynamicListResponse, error)
	// 部落动态-删除
	SetClubDynamicAct(ctx context.Context, in *SetClubDynamicActRequest, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 更新部落动态配置（动态名称、背景图、是否隐藏部落动态
	SaveClubDynamicCfg(ctx context.Context, in *SaveClubDynamicCfgRequest, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 获取部落动态社区配置
	GetClubDynamicCfg(ctx context.Context, in *GetClubDynamicCfgsRequest, opts ...grpc.CallOption) (*GetClubDynamicCfgsResponse, error)
	// 获取部落统计数据
	GetClubDynamicStatistics(ctx context.Context, in *ClubDynamicStatisticsRequest, opts ...grpc.CallOption) (*ClubDynamicStatisticsResponse, error)
}

type clubServerClient struct {
	cc grpc.ClientConnInterface
}

func NewClubServerClient(cc grpc.ClientConnInterface) ClubServerClient {
	return &clubServerClient{cc}
}

func (c *clubServerClient) GetClubList(ctx context.Context, in *ClubListReq, opts ...grpc.CallOption) (*ClubListResp, error) {
	out := new(ClubListResp)
	err := c.cc.Invoke(ctx, ClubServer_GetClubList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetClubInfo(ctx context.Context, in *ClubInfoReq, opts ...grpc.CallOption) (*ClubInfoRes, error) {
	out := new(ClubInfoRes)
	err := c.cc.Invoke(ctx, ClubServer_GetClubInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetGroupUserStatus(ctx context.Context, in *GroupUserStatusReq, opts ...grpc.CallOption) (*GroupUserStatusRes, error) {
	out := new(GroupUserStatusRes)
	err := c.cc.Invoke(ctx, ClubServer_GetGroupUserStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetGroupInfo(ctx context.Context, in *GroupInfoReq, opts ...grpc.CallOption) (*GroupInfoRes, error) {
	out := new(GroupInfoRes)
	err := c.cc.Invoke(ctx, ClubServer_GetGroupInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetClubDynamicList(ctx context.Context, in *GetClubDynamicListRequest, opts ...grpc.CallOption) (*GetClubDynamicListResponse, error) {
	out := new(GetClubDynamicListResponse)
	err := c.cc.Invoke(ctx, ClubServer_GetClubDynamicList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) SetClubDynamicAct(ctx context.Context, in *SetClubDynamicActRequest, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, ClubServer_SetClubDynamicAct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) SaveClubDynamicCfg(ctx context.Context, in *SaveClubDynamicCfgRequest, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, ClubServer_SaveClubDynamicCfg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetClubDynamicCfg(ctx context.Context, in *GetClubDynamicCfgsRequest, opts ...grpc.CallOption) (*GetClubDynamicCfgsResponse, error) {
	out := new(GetClubDynamicCfgsResponse)
	err := c.cc.Invoke(ctx, ClubServer_GetClubDynamicCfg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetClubDynamicStatistics(ctx context.Context, in *ClubDynamicStatisticsRequest, opts ...grpc.CallOption) (*ClubDynamicStatisticsResponse, error) {
	out := new(ClubDynamicStatisticsResponse)
	err := c.cc.Invoke(ctx, ClubServer_GetClubDynamicStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubServerServer is the server API for ClubServer service.
// All implementations must embed UnimplementedClubServerServer
// for forward compatibility
type ClubServerServer interface {
	// 用户部落列表
	GetClubList(context.Context, *ClubListReq) (*ClubListResp, error)
	// 部落详情
	GetClubInfo(context.Context, *ClubInfoReq) (*ClubInfoRes, error)
	// 群用户状态
	GetGroupUserStatus(context.Context, *GroupUserStatusReq) (*GroupUserStatusRes, error)
	GetGroupInfo(context.Context, *GroupInfoReq) (*GroupInfoRes, error)
	// 获取部落动态列表
	GetClubDynamicList(context.Context, *GetClubDynamicListRequest) (*GetClubDynamicListResponse, error)
	// 部落动态-删除
	SetClubDynamicAct(context.Context, *SetClubDynamicActRequest) (*APICommonResponse, error)
	// 更新部落动态配置（动态名称、背景图、是否隐藏部落动态
	SaveClubDynamicCfg(context.Context, *SaveClubDynamicCfgRequest) (*APICommonResponse, error)
	// 获取部落动态社区配置
	GetClubDynamicCfg(context.Context, *GetClubDynamicCfgsRequest) (*GetClubDynamicCfgsResponse, error)
	// 获取部落统计数据
	GetClubDynamicStatistics(context.Context, *ClubDynamicStatisticsRequest) (*ClubDynamicStatisticsResponse, error)
	mustEmbedUnimplementedClubServerServer()
}

// UnimplementedClubServerServer must be embedded to have forward compatible implementations.
type UnimplementedClubServerServer struct {
}

func (UnimplementedClubServerServer) GetClubList(context.Context, *ClubListReq) (*ClubListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubList not implemented")
}
func (UnimplementedClubServerServer) GetClubInfo(context.Context, *ClubInfoReq) (*ClubInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubInfo not implemented")
}
func (UnimplementedClubServerServer) GetGroupUserStatus(context.Context, *GroupUserStatusReq) (*GroupUserStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupUserStatus not implemented")
}
func (UnimplementedClubServerServer) GetGroupInfo(context.Context, *GroupInfoReq) (*GroupInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfo not implemented")
}
func (UnimplementedClubServerServer) GetClubDynamicList(context.Context, *GetClubDynamicListRequest) (*GetClubDynamicListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubDynamicList not implemented")
}
func (UnimplementedClubServerServer) SetClubDynamicAct(context.Context, *SetClubDynamicActRequest) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClubDynamicAct not implemented")
}
func (UnimplementedClubServerServer) SaveClubDynamicCfg(context.Context, *SaveClubDynamicCfgRequest) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveClubDynamicCfg not implemented")
}
func (UnimplementedClubServerServer) GetClubDynamicCfg(context.Context, *GetClubDynamicCfgsRequest) (*GetClubDynamicCfgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubDynamicCfg not implemented")
}
func (UnimplementedClubServerServer) GetClubDynamicStatistics(context.Context, *ClubDynamicStatisticsRequest) (*ClubDynamicStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubDynamicStatistics not implemented")
}
func (UnimplementedClubServerServer) mustEmbedUnimplementedClubServerServer() {}

// UnsafeClubServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubServerServer will
// result in compilation errors.
type UnsafeClubServerServer interface {
	mustEmbedUnimplementedClubServerServer()
}

func RegisterClubServerServer(s grpc.ServiceRegistrar, srv ClubServerServer) {
	s.RegisterService(&ClubServer_ServiceDesc, srv)
}

func _ClubServer_GetClubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetClubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServer_GetClubList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetClubList(ctx, req.(*ClubListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetClubInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetClubInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServer_GetClubInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetClubInfo(ctx, req.(*ClubInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetGroupUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetGroupUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServer_GetGroupUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetGroupUserStatus(ctx, req.(*GroupUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServer_GetGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetGroupInfo(ctx, req.(*GroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetClubDynamicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClubDynamicListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetClubDynamicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServer_GetClubDynamicList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetClubDynamicList(ctx, req.(*GetClubDynamicListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_SetClubDynamicAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClubDynamicActRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).SetClubDynamicAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServer_SetClubDynamicAct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).SetClubDynamicAct(ctx, req.(*SetClubDynamicActRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_SaveClubDynamicCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveClubDynamicCfgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).SaveClubDynamicCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServer_SaveClubDynamicCfg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).SaveClubDynamicCfg(ctx, req.(*SaveClubDynamicCfgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetClubDynamicCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClubDynamicCfgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetClubDynamicCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServer_GetClubDynamicCfg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetClubDynamicCfg(ctx, req.(*GetClubDynamicCfgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetClubDynamicStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubDynamicStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetClubDynamicStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServer_GetClubDynamicStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetClubDynamicStatistics(ctx, req.(*ClubDynamicStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClubServer_ServiceDesc is the grpc.ServiceDesc for ClubServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClubServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "club.ClubServer",
	HandlerType: (*ClubServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getClubList",
			Handler:    _ClubServer_GetClubList_Handler,
		},
		{
			MethodName: "getClubInfo",
			Handler:    _ClubServer_GetClubInfo_Handler,
		},
		{
			MethodName: "getGroupUserStatus",
			Handler:    _ClubServer_GetGroupUserStatus_Handler,
		},
		{
			MethodName: "getGroupInfo",
			Handler:    _ClubServer_GetGroupInfo_Handler,
		},
		{
			MethodName: "getClubDynamicList",
			Handler:    _ClubServer_GetClubDynamicList_Handler,
		},
		{
			MethodName: "setClubDynamicAct",
			Handler:    _ClubServer_SetClubDynamicAct_Handler,
		},
		{
			MethodName: "saveClubDynamicCfg",
			Handler:    _ClubServer_SaveClubDynamicCfg_Handler,
		},
		{
			MethodName: "getClubDynamicCfg",
			Handler:    _ClubServer_GetClubDynamicCfg_Handler,
		},
		{
			MethodName: "getClubDynamicStatistics",
			Handler:    _ClubServer_GetClubDynamicStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "club.v1.proto",
}
