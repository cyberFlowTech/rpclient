// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: club.v1.proto

package club

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClubServer_GetClubList_FullMethodName        = "/club.ClubServer/getClubList"
	ClubServer_GetClubInfo_FullMethodName        = "/club.ClubServer/getClubInfo"
	ClubServer_GetGroupUserStatus_FullMethodName = "/club.ClubServer/getGroupUserStatus"
)

// ClubServerClient is the client API for ClubServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubServerClient interface {
	// 用户部落列表
	GetClubList(ctx context.Context, in *ClubListReq, opts ...grpc.CallOption) (*ClubListResp, error)
	// 部落详情
	GetClubInfo(ctx context.Context, in *ClubInfoReq, opts ...grpc.CallOption) (*ClubInfoRes, error)
	// 群用户状态
	GetGroupUserStatus(ctx context.Context, in *GroupUserStatusReq, opts ...grpc.CallOption) (*GroupUserStatusRes, error)
}

type clubServerClient struct {
	cc grpc.ClientConnInterface
}

func NewClubServerClient(cc grpc.ClientConnInterface) ClubServerClient {
	return &clubServerClient{cc}
}

func (c *clubServerClient) GetClubList(ctx context.Context, in *ClubListReq, opts ...grpc.CallOption) (*ClubListResp, error) {
	out := new(ClubListResp)
	err := c.cc.Invoke(ctx, ClubServer_GetClubList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetClubInfo(ctx context.Context, in *ClubInfoReq, opts ...grpc.CallOption) (*ClubInfoRes, error) {
	out := new(ClubInfoRes)
	err := c.cc.Invoke(ctx, ClubServer_GetClubInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetGroupUserStatus(ctx context.Context, in *GroupUserStatusReq, opts ...grpc.CallOption) (*GroupUserStatusRes, error) {
	out := new(GroupUserStatusRes)
	err := c.cc.Invoke(ctx, ClubServer_GetGroupUserStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubServerServer is the server API for ClubServer service.
// All implementations must embed UnimplementedClubServerServer
// for forward compatibility
type ClubServerServer interface {
	// 用户部落列表
	GetClubList(context.Context, *ClubListReq) (*ClubListResp, error)
	// 部落详情
	GetClubInfo(context.Context, *ClubInfoReq) (*ClubInfoRes, error)
	// 群用户状态
	GetGroupUserStatus(context.Context, *GroupUserStatusReq) (*GroupUserStatusRes, error)
	mustEmbedUnimplementedClubServerServer()
}

// UnimplementedClubServerServer must be embedded to have forward compatible implementations.
type UnimplementedClubServerServer struct {
}

func (UnimplementedClubServerServer) GetClubList(context.Context, *ClubListReq) (*ClubListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubList not implemented")
}
func (UnimplementedClubServerServer) GetClubInfo(context.Context, *ClubInfoReq) (*ClubInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubInfo not implemented")
}
func (UnimplementedClubServerServer) GetGroupUserStatus(context.Context, *GroupUserStatusReq) (*GroupUserStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupUserStatus not implemented")
}
func (UnimplementedClubServerServer) mustEmbedUnimplementedClubServerServer() {}

// UnsafeClubServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubServerServer will
// result in compilation errors.
type UnsafeClubServerServer interface {
	mustEmbedUnimplementedClubServerServer()
}

func RegisterClubServerServer(s grpc.ServiceRegistrar, srv ClubServerServer) {
	s.RegisterService(&ClubServer_ServiceDesc, srv)
}

func _ClubServer_GetClubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetClubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServer_GetClubList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetClubList(ctx, req.(*ClubListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetClubInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetClubInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServer_GetClubInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetClubInfo(ctx, req.(*ClubInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetGroupUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetGroupUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServer_GetGroupUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetGroupUserStatus(ctx, req.(*GroupUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ClubServer_ServiceDesc is the grpc.ServiceDesc for ClubServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClubServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "club.ClubServer",
	HandlerType: (*ClubServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getClubList",
			Handler:    _ClubServer_GetClubList_Handler,
		},
		{
			MethodName: "getClubInfo",
			Handler:    _ClubServer_GetClubInfo_Handler,
		},
		{
			MethodName: "getGroupUserStatus",
			Handler:    _ClubServer_GetGroupUserStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "club.v1.proto",
}
