// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: define/club.v1.proto

package club

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClubServerClient is the client API for ClubServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubServerClient interface {
	// 用户部落列表
	GetClubList(ctx context.Context, in *ClubListReq, opts ...grpc.CallOption) (*ClubListResp, error)
	// 部落详情
	GetClubInfo(ctx context.Context, in *ClubInfoReq, opts ...grpc.CallOption) (*ClubInfoRes, error)
	// 批量(目前仅返回基本信息，不包含个性化信息
	BatchClubInfo(ctx context.Context, in *BatchClubInfoReq, opts ...grpc.CallOption) (*BatchClubInfoResp, error)
	// 群用户状态
	GetGroupUserStatus(ctx context.Context, in *GroupUserStatusReq, opts ...grpc.CallOption) (*GroupUserStatusRes, error)
	GetGroupInfo(ctx context.Context, in *GroupInfoReq, opts ...grpc.CallOption) (*GroupInfoRes, error)
	// 获取部落动态列表(迁移到动态服务
	//
	//	rpc getClubDynamicList(GetClubDynamicListRequest) returns (GetClubDynamicListResponse);
	//
	// 部落动态-删除
	SetClubDynamicAct(ctx context.Context, in *SetClubDynamicActRequest, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 更新部落动态配置（动态名称、背景图、是否隐藏部落动态
	SaveClubDynamicCfg(ctx context.Context, in *SaveClubDynamicCfgRequest, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 获取部落动态社区配置
	GetClubDynamicCfg(ctx context.Context, in *GetClubDynamicCfgsRequest, opts ...grpc.CallOption) (*GetClubDynamicCfgsResponse, error)
	// 获取部落统计数据
	GetClubDynamicStatistics(ctx context.Context, in *ClubDynamicStatisticsRequest, opts ...grpc.CallOption) (*ClubDynamicStatisticsResponse, error)
	// 增加部落参与数
	IncrClubParticipate(ctx context.Context, in *IncrClubParticipateRequest, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 创建部落
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
	// 免打扰
	Disturb(ctx context.Context, in *DisturbReq, opts ...grpc.CallOption) (*DisturbResp, error)
	// 加入部落申请
	JoinApply(ctx context.Context, in *JoinApplyReq, opts ...grpc.CallOption) (*JoinApplyResp, error)
	// 加入部落审核
	Audit(ctx context.Context, in *AuditReq, opts ...grpc.CallOption) (*AuditResp, error)
	// 获取权限
	GetAccess(ctx context.Context, in *GetAccessReq, opts ...grpc.CallOption) (*GetAccessResp, error)
	// 退出部落
	Quit(ctx context.Context, in *QuitReq, opts ...grpc.CallOption) (*QuitResp, error)
	// 部落解散
	Dissolution(ctx context.Context, in *DissReq, opts ...grpc.CallOption) (*DissResp, error)
	// 踢出用户
	Kick(ctx context.Context, in *KickReq, opts ...grpc.CallOption) (*KickResp, error)
	// 设置备注
	SetNick(ctx context.Context, in *SetNickReq, opts ...grpc.CallOption) (*SetNickResp, error)
	// 部落修改
	Setting(ctx context.Context, in *ClubModifyReq, opts ...grpc.CallOption) (*ClubModifyResp, error)
	// 分组创建
	ZoneCreate(ctx context.Context, in *ZoneCreateReq, opts ...grpc.CallOption) (*ZoneCreateResp, error)
	// 频道创建
	ChannelCreate(ctx context.Context, in *ChannelCreateReq, opts ...grpc.CallOption) (*ChannelCreateResp, error)
	// 分组修改
	ZoneUpdate(ctx context.Context, in *ZoneUpdateReq, opts ...grpc.CallOption) (*ZoneUpdateResp, error)
	// 频道修改
	ChannelUpdate(ctx context.Context, in *ChannelUpdateReq, opts ...grpc.CallOption) (*ChannelUpdateResp, error)
	// 删除频道
	ChannelDelete(ctx context.Context, in *ChannelDeleteReq, opts ...grpc.CallOption) (*ChannelDeleteResp, error)
	// 频道详情
	GetChannelInfo(ctx context.Context, in *ChannelInfoReq, opts ...grpc.CallOption) (*ChannelInfoResp, error)
	// 删除分组
	ZoneDelete(ctx context.Context, in *ZoneDeleteReq, opts ...grpc.CallOption) (*ZoneDeleteResp, error)
	// 转让部落
	Transfer(ctx context.Context, in *TransferReq, opts ...grpc.CallOption) (*TransferResp, error)
	// 部落成员列表、身份组成员列表
	GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*GetUserListResp, error)
	// 房间排序
	ChannelSort(ctx context.Context, in *ChannelSortReq, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 分组排序
	ZoneSort(ctx context.Context, in *ZoneSortReq, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 部落排序
	ClubSort(ctx context.Context, in *ClubSortReq, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 获取用户在部落里自定义信息（部落昵称
	GetUserCustomInfo(ctx context.Context, in *GetUserCustomInfoReq, opts ...grpc.CallOption) (*GetUserCustomInfoResp, error)
	// 获取部落推荐
	GetRecommend(ctx context.Context, in *GetRecommendRequest, opts ...grpc.CallOption) (*GetRecommendResponse, error)
	// 获取身份组列表
	GetRoleList(ctx context.Context, in *GetRoleListRequest, opts ...grpc.CallOption) (*GetRoleListResponse, error)
	// 获取身份组详情信息
	GetRoleInfo(ctx context.Context, in *GetRoleInfoRequest, opts ...grpc.CallOption) (*GetRoleInfoResponse, error)
	// 新建或更新身份组信息
	SaveRoleInfo(ctx context.Context, in *SaveRoleInfoRequest, opts ...grpc.CallOption) (*SaveRoleInfoResponse, error)
	// 删除身份组
	DeleteRoleInfo(ctx context.Context, in *DeleteRoleInfoRequest, opts ...grpc.CallOption) (*DeleteRoleInfoResponse, error)
	// 身份组成员增删
	OptRoleUser(ctx context.Context, in *OptRoleUserRequest, opts ...grpc.CallOption) (*OptRoleUserResponse, error)
	// 身份组排序
	SetRoleSort(ctx context.Context, in *SetRoleSortRequest, opts ...grpc.CallOption) (*SetRoleSortResponse, error)
	// 获取部落动态未阅读统计信息
	GetDynamicUnReadStatic(ctx context.Context, in *GetDynamicUnReadStaticRequest, opts ...grpc.CallOption) (*GetDynamicUnReadStaticResponse, error)
	// 获取目标用户名
	GetUsersNickName(ctx context.Context, in *GetUsersNickNameRequest, opts ...grpc.CallOption) (*GetUsersNickNameResponse, error)
	// 创建频道公告
	CreateNotice(ctx context.Context, in *CreateNoticeRequest, opts ...grpc.CallOption) (*CreateNoticeResponse, error)
	// 更新频道公告
	UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*UpdateNoticeResponse, error)
	// 删除频道公告
	DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...grpc.CallOption) (*DeleteNoticeResponse, error)
	// 获取封禁列表/禁言列表
	GetBanList(ctx context.Context, in *GetBanListRequest, opts ...grpc.CallOption) (*GetBanListResponse, error)
	// 封禁/禁言
	OptBan(ctx context.Context, in *OptBanRequest, opts ...grpc.CallOption) (*OptBanResponse, error)
	// 设置最近访问频道应用房间用户
	SetChannelVisited(ctx context.Context, in *SetChannelVisitedRequest, opts ...grpc.CallOption) (*SetChannelVisitedResponse, error)
	// 获取最近访问频道应用房间用户
	GetChannelVisited(ctx context.Context, in *GetChannelVisitedRequest, opts ...grpc.CallOption) (*GetChannelVisitedResponse, error)
	// 生成部落分享码
	GetShareCode(ctx context.Context, in *GetShareCodeRequest, opts ...grpc.CallOption) (*GetShareCodeResponse, error)
	// 获取部落分享码信息
	GetShareCodeInfo(ctx context.Context, in *GetShareCodeInfoRequest, opts ...grpc.CallOption) (*GetShareCodeInfoResponse, error)
	// 部落搜索
	ClubSearch(ctx context.Context, in *ClubSearchRequest, opts ...grpc.CallOption) (*ClubSearchResponse, error)
	// 后台管理 - 日志记录
	StatLog(ctx context.Context, in *StatLogReq, opts ...grpc.CallOption) (*StatLogResp, error)
	// 判断是否具备权限能力
	HasAuth(ctx context.Context, in *HasAuthReq, opts ...grpc.CallOption) (*HasAuthResp, error)
	// 根据分享码获取部落信息
	GetInfoByShareCode(ctx context.Context, in *GetInfoByShareCodeReq, opts ...grpc.CallOption) (*GetInfoByShareCodeResp, error)
	// 获取推荐部落分类
	GetClubTags(ctx context.Context, in *GetClubTagsReq, opts ...grpc.CallOption) (*GetClubTagsResp, error)
	// 频道禁言
	ChannelBan(ctx context.Context, in *ChannelBanReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 更新推荐部落
	UpdateRecommend(ctx context.Context, in *UpdateRecommendReq, opts ...grpc.CallOption) (*UpdateRecommendResp, error)
	// 根据Ip获取部落Ids
	GetClubsByIp(ctx context.Context, in *GetClubsByIpReq, opts ...grpc.CallOption) (*GetClubsByIpResp, error)
	// 获取部落在线用户
	GetOnlineUsers(ctx context.Context, in *GetOnlineUsersReq, opts ...grpc.CallOption) (*GetOnlineUsersResp, error)
	// 设置用户在线
	SetUsersOnline(ctx context.Context, in *SetUsersOnlineReq, opts ...grpc.CallOption) (*SetUsersOnlineResp, error)
}

type clubServerClient struct {
	cc grpc.ClientConnInterface
}

func NewClubServerClient(cc grpc.ClientConnInterface) ClubServerClient {
	return &clubServerClient{cc}
}

func (c *clubServerClient) GetClubList(ctx context.Context, in *ClubListReq, opts ...grpc.CallOption) (*ClubListResp, error) {
	out := new(ClubListResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/getClubList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetClubInfo(ctx context.Context, in *ClubInfoReq, opts ...grpc.CallOption) (*ClubInfoRes, error) {
	out := new(ClubInfoRes)
	err := c.cc.Invoke(ctx, "/club.ClubServer/getClubInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) BatchClubInfo(ctx context.Context, in *BatchClubInfoReq, opts ...grpc.CallOption) (*BatchClubInfoResp, error) {
	out := new(BatchClubInfoResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/batchClubInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetGroupUserStatus(ctx context.Context, in *GroupUserStatusReq, opts ...grpc.CallOption) (*GroupUserStatusRes, error) {
	out := new(GroupUserStatusRes)
	err := c.cc.Invoke(ctx, "/club.ClubServer/getGroupUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetGroupInfo(ctx context.Context, in *GroupInfoReq, opts ...grpc.CallOption) (*GroupInfoRes, error) {
	out := new(GroupInfoRes)
	err := c.cc.Invoke(ctx, "/club.ClubServer/getGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) SetClubDynamicAct(ctx context.Context, in *SetClubDynamicActRequest, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/setClubDynamicAct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) SaveClubDynamicCfg(ctx context.Context, in *SaveClubDynamicCfgRequest, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/saveClubDynamicCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetClubDynamicCfg(ctx context.Context, in *GetClubDynamicCfgsRequest, opts ...grpc.CallOption) (*GetClubDynamicCfgsResponse, error) {
	out := new(GetClubDynamicCfgsResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/getClubDynamicCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetClubDynamicStatistics(ctx context.Context, in *ClubDynamicStatisticsRequest, opts ...grpc.CallOption) (*ClubDynamicStatisticsResponse, error) {
	out := new(ClubDynamicStatisticsResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/getClubDynamicStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) IncrClubParticipate(ctx context.Context, in *IncrClubParticipateRequest, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/IncrClubParticipate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) Disturb(ctx context.Context, in *DisturbReq, opts ...grpc.CallOption) (*DisturbResp, error) {
	out := new(DisturbResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/disturb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) JoinApply(ctx context.Context, in *JoinApplyReq, opts ...grpc.CallOption) (*JoinApplyResp, error) {
	out := new(JoinApplyResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/joinApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) Audit(ctx context.Context, in *AuditReq, opts ...grpc.CallOption) (*AuditResp, error) {
	out := new(AuditResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/audit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetAccess(ctx context.Context, in *GetAccessReq, opts ...grpc.CallOption) (*GetAccessResp, error) {
	out := new(GetAccessResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/getAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) Quit(ctx context.Context, in *QuitReq, opts ...grpc.CallOption) (*QuitResp, error) {
	out := new(QuitResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) Dissolution(ctx context.Context, in *DissReq, opts ...grpc.CallOption) (*DissResp, error) {
	out := new(DissResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/dissolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) Kick(ctx context.Context, in *KickReq, opts ...grpc.CallOption) (*KickResp, error) {
	out := new(KickResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/kick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) SetNick(ctx context.Context, in *SetNickReq, opts ...grpc.CallOption) (*SetNickResp, error) {
	out := new(SetNickResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/setNick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) Setting(ctx context.Context, in *ClubModifyReq, opts ...grpc.CallOption) (*ClubModifyResp, error) {
	out := new(ClubModifyResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/setting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) ZoneCreate(ctx context.Context, in *ZoneCreateReq, opts ...grpc.CallOption) (*ZoneCreateResp, error) {
	out := new(ZoneCreateResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/zoneCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) ChannelCreate(ctx context.Context, in *ChannelCreateReq, opts ...grpc.CallOption) (*ChannelCreateResp, error) {
	out := new(ChannelCreateResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/channelCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) ZoneUpdate(ctx context.Context, in *ZoneUpdateReq, opts ...grpc.CallOption) (*ZoneUpdateResp, error) {
	out := new(ZoneUpdateResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/zoneUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) ChannelUpdate(ctx context.Context, in *ChannelUpdateReq, opts ...grpc.CallOption) (*ChannelUpdateResp, error) {
	out := new(ChannelUpdateResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/channelUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) ChannelDelete(ctx context.Context, in *ChannelDeleteReq, opts ...grpc.CallOption) (*ChannelDeleteResp, error) {
	out := new(ChannelDeleteResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/channelDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetChannelInfo(ctx context.Context, in *ChannelInfoReq, opts ...grpc.CallOption) (*ChannelInfoResp, error) {
	out := new(ChannelInfoResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/getChannelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) ZoneDelete(ctx context.Context, in *ZoneDeleteReq, opts ...grpc.CallOption) (*ZoneDeleteResp, error) {
	out := new(ZoneDeleteResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/zoneDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) Transfer(ctx context.Context, in *TransferReq, opts ...grpc.CallOption) (*TransferResp, error) {
	out := new(TransferResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*GetUserListResp, error) {
	out := new(GetUserListResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/getUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) ChannelSort(ctx context.Context, in *ChannelSortReq, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/channelSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) ZoneSort(ctx context.Context, in *ZoneSortReq, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/zoneSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) ClubSort(ctx context.Context, in *ClubSortReq, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/clubSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetUserCustomInfo(ctx context.Context, in *GetUserCustomInfoReq, opts ...grpc.CallOption) (*GetUserCustomInfoResp, error) {
	out := new(GetUserCustomInfoResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/getUserCustomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetRecommend(ctx context.Context, in *GetRecommendRequest, opts ...grpc.CallOption) (*GetRecommendResponse, error) {
	out := new(GetRecommendResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/GetRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetRoleList(ctx context.Context, in *GetRoleListRequest, opts ...grpc.CallOption) (*GetRoleListResponse, error) {
	out := new(GetRoleListResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/GetRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetRoleInfo(ctx context.Context, in *GetRoleInfoRequest, opts ...grpc.CallOption) (*GetRoleInfoResponse, error) {
	out := new(GetRoleInfoResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/GetRoleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) SaveRoleInfo(ctx context.Context, in *SaveRoleInfoRequest, opts ...grpc.CallOption) (*SaveRoleInfoResponse, error) {
	out := new(SaveRoleInfoResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/SaveRoleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) DeleteRoleInfo(ctx context.Context, in *DeleteRoleInfoRequest, opts ...grpc.CallOption) (*DeleteRoleInfoResponse, error) {
	out := new(DeleteRoleInfoResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/DeleteRoleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) OptRoleUser(ctx context.Context, in *OptRoleUserRequest, opts ...grpc.CallOption) (*OptRoleUserResponse, error) {
	out := new(OptRoleUserResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/OptRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) SetRoleSort(ctx context.Context, in *SetRoleSortRequest, opts ...grpc.CallOption) (*SetRoleSortResponse, error) {
	out := new(SetRoleSortResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/SetRoleSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetDynamicUnReadStatic(ctx context.Context, in *GetDynamicUnReadStaticRequest, opts ...grpc.CallOption) (*GetDynamicUnReadStaticResponse, error) {
	out := new(GetDynamicUnReadStaticResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/GetDynamicUnReadStatic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetUsersNickName(ctx context.Context, in *GetUsersNickNameRequest, opts ...grpc.CallOption) (*GetUsersNickNameResponse, error) {
	out := new(GetUsersNickNameResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/GetUsersNickName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) CreateNotice(ctx context.Context, in *CreateNoticeRequest, opts ...grpc.CallOption) (*CreateNoticeResponse, error) {
	out := new(CreateNoticeResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/CreateNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*UpdateNoticeResponse, error) {
	out := new(UpdateNoticeResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/UpdateNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...grpc.CallOption) (*DeleteNoticeResponse, error) {
	out := new(DeleteNoticeResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/DeleteNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetBanList(ctx context.Context, in *GetBanListRequest, opts ...grpc.CallOption) (*GetBanListResponse, error) {
	out := new(GetBanListResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/GetBanList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) OptBan(ctx context.Context, in *OptBanRequest, opts ...grpc.CallOption) (*OptBanResponse, error) {
	out := new(OptBanResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/OptBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) SetChannelVisited(ctx context.Context, in *SetChannelVisitedRequest, opts ...grpc.CallOption) (*SetChannelVisitedResponse, error) {
	out := new(SetChannelVisitedResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/SetChannelVisited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetChannelVisited(ctx context.Context, in *GetChannelVisitedRequest, opts ...grpc.CallOption) (*GetChannelVisitedResponse, error) {
	out := new(GetChannelVisitedResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/GetChannelVisited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetShareCode(ctx context.Context, in *GetShareCodeRequest, opts ...grpc.CallOption) (*GetShareCodeResponse, error) {
	out := new(GetShareCodeResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/GetShareCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetShareCodeInfo(ctx context.Context, in *GetShareCodeInfoRequest, opts ...grpc.CallOption) (*GetShareCodeInfoResponse, error) {
	out := new(GetShareCodeInfoResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/GetShareCodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) ClubSearch(ctx context.Context, in *ClubSearchRequest, opts ...grpc.CallOption) (*ClubSearchResponse, error) {
	out := new(ClubSearchResponse)
	err := c.cc.Invoke(ctx, "/club.ClubServer/ClubSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) StatLog(ctx context.Context, in *StatLogReq, opts ...grpc.CallOption) (*StatLogResp, error) {
	out := new(StatLogResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/StatLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) HasAuth(ctx context.Context, in *HasAuthReq, opts ...grpc.CallOption) (*HasAuthResp, error) {
	out := new(HasAuthResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/HasAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetInfoByShareCode(ctx context.Context, in *GetInfoByShareCodeReq, opts ...grpc.CallOption) (*GetInfoByShareCodeResp, error) {
	out := new(GetInfoByShareCodeResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/GetInfoByShareCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetClubTags(ctx context.Context, in *GetClubTagsReq, opts ...grpc.CallOption) (*GetClubTagsResp, error) {
	out := new(GetClubTagsResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/GetClubTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) ChannelBan(ctx context.Context, in *ChannelBanReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/ChannelBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) UpdateRecommend(ctx context.Context, in *UpdateRecommendReq, opts ...grpc.CallOption) (*UpdateRecommendResp, error) {
	out := new(UpdateRecommendResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/UpdateRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetClubsByIp(ctx context.Context, in *GetClubsByIpReq, opts ...grpc.CallOption) (*GetClubsByIpResp, error) {
	out := new(GetClubsByIpResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/GetClubsByIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) GetOnlineUsers(ctx context.Context, in *GetOnlineUsersReq, opts ...grpc.CallOption) (*GetOnlineUsersResp, error) {
	out := new(GetOnlineUsersResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/GetOnlineUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServerClient) SetUsersOnline(ctx context.Context, in *SetUsersOnlineReq, opts ...grpc.CallOption) (*SetUsersOnlineResp, error) {
	out := new(SetUsersOnlineResp)
	err := c.cc.Invoke(ctx, "/club.ClubServer/SetUsersOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubServerServer is the server API for ClubServer service.
// All implementations must embed UnimplementedClubServerServer
// for forward compatibility
type ClubServerServer interface {
	// 用户部落列表
	GetClubList(context.Context, *ClubListReq) (*ClubListResp, error)
	// 部落详情
	GetClubInfo(context.Context, *ClubInfoReq) (*ClubInfoRes, error)
	// 批量(目前仅返回基本信息，不包含个性化信息
	BatchClubInfo(context.Context, *BatchClubInfoReq) (*BatchClubInfoResp, error)
	// 群用户状态
	GetGroupUserStatus(context.Context, *GroupUserStatusReq) (*GroupUserStatusRes, error)
	GetGroupInfo(context.Context, *GroupInfoReq) (*GroupInfoRes, error)
	// 获取部落动态列表(迁移到动态服务
	//
	//	rpc getClubDynamicList(GetClubDynamicListRequest) returns (GetClubDynamicListResponse);
	//
	// 部落动态-删除
	SetClubDynamicAct(context.Context, *SetClubDynamicActRequest) (*APICommonResponse, error)
	// 更新部落动态配置（动态名称、背景图、是否隐藏部落动态
	SaveClubDynamicCfg(context.Context, *SaveClubDynamicCfgRequest) (*APICommonResponse, error)
	// 获取部落动态社区配置
	GetClubDynamicCfg(context.Context, *GetClubDynamicCfgsRequest) (*GetClubDynamicCfgsResponse, error)
	// 获取部落统计数据
	GetClubDynamicStatistics(context.Context, *ClubDynamicStatisticsRequest) (*ClubDynamicStatisticsResponse, error)
	// 增加部落参与数
	IncrClubParticipate(context.Context, *IncrClubParticipateRequest) (*APICommonResponse, error)
	// 创建部落
	Create(context.Context, *CreateReq) (*CreateResp, error)
	// 免打扰
	Disturb(context.Context, *DisturbReq) (*DisturbResp, error)
	// 加入部落申请
	JoinApply(context.Context, *JoinApplyReq) (*JoinApplyResp, error)
	// 加入部落审核
	Audit(context.Context, *AuditReq) (*AuditResp, error)
	// 获取权限
	GetAccess(context.Context, *GetAccessReq) (*GetAccessResp, error)
	// 退出部落
	Quit(context.Context, *QuitReq) (*QuitResp, error)
	// 部落解散
	Dissolution(context.Context, *DissReq) (*DissResp, error)
	// 踢出用户
	Kick(context.Context, *KickReq) (*KickResp, error)
	// 设置备注
	SetNick(context.Context, *SetNickReq) (*SetNickResp, error)
	// 部落修改
	Setting(context.Context, *ClubModifyReq) (*ClubModifyResp, error)
	// 分组创建
	ZoneCreate(context.Context, *ZoneCreateReq) (*ZoneCreateResp, error)
	// 频道创建
	ChannelCreate(context.Context, *ChannelCreateReq) (*ChannelCreateResp, error)
	// 分组修改
	ZoneUpdate(context.Context, *ZoneUpdateReq) (*ZoneUpdateResp, error)
	// 频道修改
	ChannelUpdate(context.Context, *ChannelUpdateReq) (*ChannelUpdateResp, error)
	// 删除频道
	ChannelDelete(context.Context, *ChannelDeleteReq) (*ChannelDeleteResp, error)
	// 频道详情
	GetChannelInfo(context.Context, *ChannelInfoReq) (*ChannelInfoResp, error)
	// 删除分组
	ZoneDelete(context.Context, *ZoneDeleteReq) (*ZoneDeleteResp, error)
	// 转让部落
	Transfer(context.Context, *TransferReq) (*TransferResp, error)
	// 部落成员列表、身份组成员列表
	GetUserList(context.Context, *GetUserListReq) (*GetUserListResp, error)
	// 房间排序
	ChannelSort(context.Context, *ChannelSortReq) (*APICommonResponse, error)
	// 分组排序
	ZoneSort(context.Context, *ZoneSortReq) (*APICommonResponse, error)
	// 部落排序
	ClubSort(context.Context, *ClubSortReq) (*APICommonResponse, error)
	// 获取用户在部落里自定义信息（部落昵称
	GetUserCustomInfo(context.Context, *GetUserCustomInfoReq) (*GetUserCustomInfoResp, error)
	// 获取部落推荐
	GetRecommend(context.Context, *GetRecommendRequest) (*GetRecommendResponse, error)
	// 获取身份组列表
	GetRoleList(context.Context, *GetRoleListRequest) (*GetRoleListResponse, error)
	// 获取身份组详情信息
	GetRoleInfo(context.Context, *GetRoleInfoRequest) (*GetRoleInfoResponse, error)
	// 新建或更新身份组信息
	SaveRoleInfo(context.Context, *SaveRoleInfoRequest) (*SaveRoleInfoResponse, error)
	// 删除身份组
	DeleteRoleInfo(context.Context, *DeleteRoleInfoRequest) (*DeleteRoleInfoResponse, error)
	// 身份组成员增删
	OptRoleUser(context.Context, *OptRoleUserRequest) (*OptRoleUserResponse, error)
	// 身份组排序
	SetRoleSort(context.Context, *SetRoleSortRequest) (*SetRoleSortResponse, error)
	// 获取部落动态未阅读统计信息
	GetDynamicUnReadStatic(context.Context, *GetDynamicUnReadStaticRequest) (*GetDynamicUnReadStaticResponse, error)
	// 获取目标用户名
	GetUsersNickName(context.Context, *GetUsersNickNameRequest) (*GetUsersNickNameResponse, error)
	// 创建频道公告
	CreateNotice(context.Context, *CreateNoticeRequest) (*CreateNoticeResponse, error)
	// 更新频道公告
	UpdateNotice(context.Context, *UpdateNoticeRequest) (*UpdateNoticeResponse, error)
	// 删除频道公告
	DeleteNotice(context.Context, *DeleteNoticeRequest) (*DeleteNoticeResponse, error)
	// 获取封禁列表/禁言列表
	GetBanList(context.Context, *GetBanListRequest) (*GetBanListResponse, error)
	// 封禁/禁言
	OptBan(context.Context, *OptBanRequest) (*OptBanResponse, error)
	// 设置最近访问频道应用房间用户
	SetChannelVisited(context.Context, *SetChannelVisitedRequest) (*SetChannelVisitedResponse, error)
	// 获取最近访问频道应用房间用户
	GetChannelVisited(context.Context, *GetChannelVisitedRequest) (*GetChannelVisitedResponse, error)
	// 生成部落分享码
	GetShareCode(context.Context, *GetShareCodeRequest) (*GetShareCodeResponse, error)
	// 获取部落分享码信息
	GetShareCodeInfo(context.Context, *GetShareCodeInfoRequest) (*GetShareCodeInfoResponse, error)
	// 部落搜索
	ClubSearch(context.Context, *ClubSearchRequest) (*ClubSearchResponse, error)
	// 后台管理 - 日志记录
	StatLog(context.Context, *StatLogReq) (*StatLogResp, error)
	// 判断是否具备权限能力
	HasAuth(context.Context, *HasAuthReq) (*HasAuthResp, error)
	// 根据分享码获取部落信息
	GetInfoByShareCode(context.Context, *GetInfoByShareCodeReq) (*GetInfoByShareCodeResp, error)
	// 获取推荐部落分类
	GetClubTags(context.Context, *GetClubTagsReq) (*GetClubTagsResp, error)
	// 频道禁言
	ChannelBan(context.Context, *ChannelBanReq) (*CommonResp, error)
	// 更新推荐部落
	UpdateRecommend(context.Context, *UpdateRecommendReq) (*UpdateRecommendResp, error)
	// 根据Ip获取部落Ids
	GetClubsByIp(context.Context, *GetClubsByIpReq) (*GetClubsByIpResp, error)
	// 获取部落在线用户
	GetOnlineUsers(context.Context, *GetOnlineUsersReq) (*GetOnlineUsersResp, error)
	// 设置用户在线
	SetUsersOnline(context.Context, *SetUsersOnlineReq) (*SetUsersOnlineResp, error)
	mustEmbedUnimplementedClubServerServer()
}

// UnimplementedClubServerServer must be embedded to have forward compatible implementations.
type UnimplementedClubServerServer struct {
}

func (UnimplementedClubServerServer) GetClubList(context.Context, *ClubListReq) (*ClubListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubList not implemented")
}
func (UnimplementedClubServerServer) GetClubInfo(context.Context, *ClubInfoReq) (*ClubInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubInfo not implemented")
}
func (UnimplementedClubServerServer) BatchClubInfo(context.Context, *BatchClubInfoReq) (*BatchClubInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchClubInfo not implemented")
}
func (UnimplementedClubServerServer) GetGroupUserStatus(context.Context, *GroupUserStatusReq) (*GroupUserStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupUserStatus not implemented")
}
func (UnimplementedClubServerServer) GetGroupInfo(context.Context, *GroupInfoReq) (*GroupInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfo not implemented")
}
func (UnimplementedClubServerServer) SetClubDynamicAct(context.Context, *SetClubDynamicActRequest) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClubDynamicAct not implemented")
}
func (UnimplementedClubServerServer) SaveClubDynamicCfg(context.Context, *SaveClubDynamicCfgRequest) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveClubDynamicCfg not implemented")
}
func (UnimplementedClubServerServer) GetClubDynamicCfg(context.Context, *GetClubDynamicCfgsRequest) (*GetClubDynamicCfgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubDynamicCfg not implemented")
}
func (UnimplementedClubServerServer) GetClubDynamicStatistics(context.Context, *ClubDynamicStatisticsRequest) (*ClubDynamicStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubDynamicStatistics not implemented")
}
func (UnimplementedClubServerServer) IncrClubParticipate(context.Context, *IncrClubParticipateRequest) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrClubParticipate not implemented")
}
func (UnimplementedClubServerServer) Create(context.Context, *CreateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedClubServerServer) Disturb(context.Context, *DisturbReq) (*DisturbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disturb not implemented")
}
func (UnimplementedClubServerServer) JoinApply(context.Context, *JoinApplyReq) (*JoinApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinApply not implemented")
}
func (UnimplementedClubServerServer) Audit(context.Context, *AuditReq) (*AuditResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Audit not implemented")
}
func (UnimplementedClubServerServer) GetAccess(context.Context, *GetAccessReq) (*GetAccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccess not implemented")
}
func (UnimplementedClubServerServer) Quit(context.Context, *QuitReq) (*QuitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (UnimplementedClubServerServer) Dissolution(context.Context, *DissReq) (*DissResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dissolution not implemented")
}
func (UnimplementedClubServerServer) Kick(context.Context, *KickReq) (*KickResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kick not implemented")
}
func (UnimplementedClubServerServer) SetNick(context.Context, *SetNickReq) (*SetNickResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNick not implemented")
}
func (UnimplementedClubServerServer) Setting(context.Context, *ClubModifyReq) (*ClubModifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setting not implemented")
}
func (UnimplementedClubServerServer) ZoneCreate(context.Context, *ZoneCreateReq) (*ZoneCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZoneCreate not implemented")
}
func (UnimplementedClubServerServer) ChannelCreate(context.Context, *ChannelCreateReq) (*ChannelCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelCreate not implemented")
}
func (UnimplementedClubServerServer) ZoneUpdate(context.Context, *ZoneUpdateReq) (*ZoneUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZoneUpdate not implemented")
}
func (UnimplementedClubServerServer) ChannelUpdate(context.Context, *ChannelUpdateReq) (*ChannelUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelUpdate not implemented")
}
func (UnimplementedClubServerServer) ChannelDelete(context.Context, *ChannelDeleteReq) (*ChannelDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelDelete not implemented")
}
func (UnimplementedClubServerServer) GetChannelInfo(context.Context, *ChannelInfoReq) (*ChannelInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInfo not implemented")
}
func (UnimplementedClubServerServer) ZoneDelete(context.Context, *ZoneDeleteReq) (*ZoneDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZoneDelete not implemented")
}
func (UnimplementedClubServerServer) Transfer(context.Context, *TransferReq) (*TransferResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedClubServerServer) GetUserList(context.Context, *GetUserListReq) (*GetUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedClubServerServer) ChannelSort(context.Context, *ChannelSortReq) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelSort not implemented")
}
func (UnimplementedClubServerServer) ZoneSort(context.Context, *ZoneSortReq) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZoneSort not implemented")
}
func (UnimplementedClubServerServer) ClubSort(context.Context, *ClubSortReq) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubSort not implemented")
}
func (UnimplementedClubServerServer) GetUserCustomInfo(context.Context, *GetUserCustomInfoReq) (*GetUserCustomInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCustomInfo not implemented")
}
func (UnimplementedClubServerServer) GetRecommend(context.Context, *GetRecommendRequest) (*GetRecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommend not implemented")
}
func (UnimplementedClubServerServer) GetRoleList(context.Context, *GetRoleListRequest) (*GetRoleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleList not implemented")
}
func (UnimplementedClubServerServer) GetRoleInfo(context.Context, *GetRoleInfoRequest) (*GetRoleInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleInfo not implemented")
}
func (UnimplementedClubServerServer) SaveRoleInfo(context.Context, *SaveRoleInfoRequest) (*SaveRoleInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRoleInfo not implemented")
}
func (UnimplementedClubServerServer) DeleteRoleInfo(context.Context, *DeleteRoleInfoRequest) (*DeleteRoleInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleInfo not implemented")
}
func (UnimplementedClubServerServer) OptRoleUser(context.Context, *OptRoleUserRequest) (*OptRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptRoleUser not implemented")
}
func (UnimplementedClubServerServer) SetRoleSort(context.Context, *SetRoleSortRequest) (*SetRoleSortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoleSort not implemented")
}
func (UnimplementedClubServerServer) GetDynamicUnReadStatic(context.Context, *GetDynamicUnReadStaticRequest) (*GetDynamicUnReadStaticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDynamicUnReadStatic not implemented")
}
func (UnimplementedClubServerServer) GetUsersNickName(context.Context, *GetUsersNickNameRequest) (*GetUsersNickNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersNickName not implemented")
}
func (UnimplementedClubServerServer) CreateNotice(context.Context, *CreateNoticeRequest) (*CreateNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotice not implemented")
}
func (UnimplementedClubServerServer) UpdateNotice(context.Context, *UpdateNoticeRequest) (*UpdateNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotice not implemented")
}
func (UnimplementedClubServerServer) DeleteNotice(context.Context, *DeleteNoticeRequest) (*DeleteNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotice not implemented")
}
func (UnimplementedClubServerServer) GetBanList(context.Context, *GetBanListRequest) (*GetBanListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanList not implemented")
}
func (UnimplementedClubServerServer) OptBan(context.Context, *OptBanRequest) (*OptBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptBan not implemented")
}
func (UnimplementedClubServerServer) SetChannelVisited(context.Context, *SetChannelVisitedRequest) (*SetChannelVisitedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChannelVisited not implemented")
}
func (UnimplementedClubServerServer) GetChannelVisited(context.Context, *GetChannelVisitedRequest) (*GetChannelVisitedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelVisited not implemented")
}
func (UnimplementedClubServerServer) GetShareCode(context.Context, *GetShareCodeRequest) (*GetShareCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShareCode not implemented")
}
func (UnimplementedClubServerServer) GetShareCodeInfo(context.Context, *GetShareCodeInfoRequest) (*GetShareCodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShareCodeInfo not implemented")
}
func (UnimplementedClubServerServer) ClubSearch(context.Context, *ClubSearchRequest) (*ClubSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubSearch not implemented")
}
func (UnimplementedClubServerServer) StatLog(context.Context, *StatLogReq) (*StatLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatLog not implemented")
}
func (UnimplementedClubServerServer) HasAuth(context.Context, *HasAuthReq) (*HasAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasAuth not implemented")
}
func (UnimplementedClubServerServer) GetInfoByShareCode(context.Context, *GetInfoByShareCodeReq) (*GetInfoByShareCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoByShareCode not implemented")
}
func (UnimplementedClubServerServer) GetClubTags(context.Context, *GetClubTagsReq) (*GetClubTagsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubTags not implemented")
}
func (UnimplementedClubServerServer) ChannelBan(context.Context, *ChannelBanReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelBan not implemented")
}
func (UnimplementedClubServerServer) UpdateRecommend(context.Context, *UpdateRecommendReq) (*UpdateRecommendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecommend not implemented")
}
func (UnimplementedClubServerServer) GetClubsByIp(context.Context, *GetClubsByIpReq) (*GetClubsByIpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubsByIp not implemented")
}
func (UnimplementedClubServerServer) GetOnlineUsers(context.Context, *GetOnlineUsersReq) (*GetOnlineUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineUsers not implemented")
}
func (UnimplementedClubServerServer) SetUsersOnline(context.Context, *SetUsersOnlineReq) (*SetUsersOnlineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUsersOnline not implemented")
}
func (UnimplementedClubServerServer) mustEmbedUnimplementedClubServerServer() {}

// UnsafeClubServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubServerServer will
// result in compilation errors.
type UnsafeClubServerServer interface {
	mustEmbedUnimplementedClubServerServer()
}

func RegisterClubServerServer(s grpc.ServiceRegistrar, srv ClubServerServer) {
	s.RegisterService(&ClubServer_ServiceDesc, srv)
}

func _ClubServer_GetClubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetClubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/getClubList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetClubList(ctx, req.(*ClubListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetClubInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetClubInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/getClubInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetClubInfo(ctx, req.(*ClubInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_BatchClubInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchClubInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).BatchClubInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/batchClubInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).BatchClubInfo(ctx, req.(*BatchClubInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetGroupUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetGroupUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/getGroupUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetGroupUserStatus(ctx, req.(*GroupUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/getGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetGroupInfo(ctx, req.(*GroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_SetClubDynamicAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClubDynamicActRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).SetClubDynamicAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/setClubDynamicAct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).SetClubDynamicAct(ctx, req.(*SetClubDynamicActRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_SaveClubDynamicCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveClubDynamicCfgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).SaveClubDynamicCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/saveClubDynamicCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).SaveClubDynamicCfg(ctx, req.(*SaveClubDynamicCfgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetClubDynamicCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClubDynamicCfgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetClubDynamicCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/getClubDynamicCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetClubDynamicCfg(ctx, req.(*GetClubDynamicCfgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetClubDynamicStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubDynamicStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetClubDynamicStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/getClubDynamicStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetClubDynamicStatistics(ctx, req.(*ClubDynamicStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_IncrClubParticipate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrClubParticipateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).IncrClubParticipate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/IncrClubParticipate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).IncrClubParticipate(ctx, req.(*IncrClubParticipateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_Disturb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisturbReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).Disturb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/disturb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).Disturb(ctx, req.(*DisturbReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_JoinApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).JoinApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/joinApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).JoinApply(ctx, req.(*JoinApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_Audit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).Audit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/audit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).Audit(ctx, req.(*AuditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/getAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetAccess(ctx, req.(*GetAccessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).Quit(ctx, req.(*QuitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_Dissolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DissReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).Dissolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/dissolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).Dissolution(ctx, req.(*DissReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).Kick(ctx, req.(*KickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_SetNick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).SetNick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/setNick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).SetNick(ctx, req.(*SetNickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_Setting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubModifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).Setting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/setting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).Setting(ctx, req.(*ClubModifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_ZoneCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).ZoneCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/zoneCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).ZoneCreate(ctx, req.(*ZoneCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_ChannelCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).ChannelCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/channelCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).ChannelCreate(ctx, req.(*ChannelCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_ZoneUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).ZoneUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/zoneUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).ZoneUpdate(ctx, req.(*ZoneUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_ChannelUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).ChannelUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/channelUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).ChannelUpdate(ctx, req.(*ChannelUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_ChannelDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).ChannelDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/channelDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).ChannelDelete(ctx, req.(*ChannelDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/getChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetChannelInfo(ctx, req.(*ChannelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_ZoneDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).ZoneDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/zoneDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).ZoneDelete(ctx, req.(*ZoneDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).Transfer(ctx, req.(*TransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/getUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetUserList(ctx, req.(*GetUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_ChannelSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).ChannelSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/channelSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).ChannelSort(ctx, req.(*ChannelSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_ZoneSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).ZoneSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/zoneSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).ZoneSort(ctx, req.(*ZoneSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_ClubSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).ClubSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/clubSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).ClubSort(ctx, req.(*ClubSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetUserCustomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCustomInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetUserCustomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/getUserCustomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetUserCustomInfo(ctx, req.(*GetUserCustomInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/GetRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetRecommend(ctx, req.(*GetRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/GetRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetRoleList(ctx, req.(*GetRoleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/GetRoleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetRoleInfo(ctx, req.(*GetRoleInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_SaveRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRoleInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).SaveRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/SaveRoleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).SaveRoleInfo(ctx, req.(*SaveRoleInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_DeleteRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).DeleteRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/DeleteRoleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).DeleteRoleInfo(ctx, req.(*DeleteRoleInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_OptRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).OptRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/OptRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).OptRoleUser(ctx, req.(*OptRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_SetRoleSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoleSortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).SetRoleSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/SetRoleSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).SetRoleSort(ctx, req.(*SetRoleSortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetDynamicUnReadStatic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDynamicUnReadStaticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetDynamicUnReadStatic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/GetDynamicUnReadStatic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetDynamicUnReadStatic(ctx, req.(*GetDynamicUnReadStaticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetUsersNickName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersNickNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetUsersNickName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/GetUsersNickName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetUsersNickName(ctx, req.(*GetUsersNickNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_CreateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).CreateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/CreateNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).CreateNotice(ctx, req.(*CreateNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_UpdateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).UpdateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/UpdateNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).UpdateNotice(ctx, req.(*UpdateNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_DeleteNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).DeleteNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/DeleteNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).DeleteNotice(ctx, req.(*DeleteNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetBanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetBanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/GetBanList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetBanList(ctx, req.(*GetBanListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_OptBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).OptBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/OptBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).OptBan(ctx, req.(*OptBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_SetChannelVisited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelVisitedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).SetChannelVisited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/SetChannelVisited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).SetChannelVisited(ctx, req.(*SetChannelVisitedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetChannelVisited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelVisitedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetChannelVisited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/GetChannelVisited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetChannelVisited(ctx, req.(*GetChannelVisitedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetShareCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShareCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetShareCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/GetShareCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetShareCode(ctx, req.(*GetShareCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetShareCodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShareCodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetShareCodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/GetShareCodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetShareCodeInfo(ctx, req.(*GetShareCodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_ClubSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).ClubSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/ClubSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).ClubSearch(ctx, req.(*ClubSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_StatLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).StatLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/StatLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).StatLog(ctx, req.(*StatLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_HasAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).HasAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/HasAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).HasAuth(ctx, req.(*HasAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetInfoByShareCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoByShareCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetInfoByShareCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/GetInfoByShareCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetInfoByShareCode(ctx, req.(*GetInfoByShareCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetClubTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClubTagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetClubTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/GetClubTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetClubTags(ctx, req.(*GetClubTagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_ChannelBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelBanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).ChannelBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/ChannelBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).ChannelBan(ctx, req.(*ChannelBanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_UpdateRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecommendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).UpdateRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/UpdateRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).UpdateRecommend(ctx, req.(*UpdateRecommendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetClubsByIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClubsByIpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetClubsByIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/GetClubsByIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetClubsByIp(ctx, req.(*GetClubsByIpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_GetOnlineUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnlineUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).GetOnlineUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/GetOnlineUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).GetOnlineUsers(ctx, req.(*GetOnlineUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServer_SetUsersOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUsersOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServerServer).SetUsersOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubServer/SetUsersOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServerServer).SetUsersOnline(ctx, req.(*SetUsersOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ClubServer_ServiceDesc is the grpc.ServiceDesc for ClubServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClubServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "club.ClubServer",
	HandlerType: (*ClubServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getClubList",
			Handler:    _ClubServer_GetClubList_Handler,
		},
		{
			MethodName: "getClubInfo",
			Handler:    _ClubServer_GetClubInfo_Handler,
		},
		{
			MethodName: "batchClubInfo",
			Handler:    _ClubServer_BatchClubInfo_Handler,
		},
		{
			MethodName: "getGroupUserStatus",
			Handler:    _ClubServer_GetGroupUserStatus_Handler,
		},
		{
			MethodName: "getGroupInfo",
			Handler:    _ClubServer_GetGroupInfo_Handler,
		},
		{
			MethodName: "setClubDynamicAct",
			Handler:    _ClubServer_SetClubDynamicAct_Handler,
		},
		{
			MethodName: "saveClubDynamicCfg",
			Handler:    _ClubServer_SaveClubDynamicCfg_Handler,
		},
		{
			MethodName: "getClubDynamicCfg",
			Handler:    _ClubServer_GetClubDynamicCfg_Handler,
		},
		{
			MethodName: "getClubDynamicStatistics",
			Handler:    _ClubServer_GetClubDynamicStatistics_Handler,
		},
		{
			MethodName: "IncrClubParticipate",
			Handler:    _ClubServer_IncrClubParticipate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _ClubServer_Create_Handler,
		},
		{
			MethodName: "disturb",
			Handler:    _ClubServer_Disturb_Handler,
		},
		{
			MethodName: "joinApply",
			Handler:    _ClubServer_JoinApply_Handler,
		},
		{
			MethodName: "audit",
			Handler:    _ClubServer_Audit_Handler,
		},
		{
			MethodName: "getAccess",
			Handler:    _ClubServer_GetAccess_Handler,
		},
		{
			MethodName: "quit",
			Handler:    _ClubServer_Quit_Handler,
		},
		{
			MethodName: "dissolution",
			Handler:    _ClubServer_Dissolution_Handler,
		},
		{
			MethodName: "kick",
			Handler:    _ClubServer_Kick_Handler,
		},
		{
			MethodName: "setNick",
			Handler:    _ClubServer_SetNick_Handler,
		},
		{
			MethodName: "setting",
			Handler:    _ClubServer_Setting_Handler,
		},
		{
			MethodName: "zoneCreate",
			Handler:    _ClubServer_ZoneCreate_Handler,
		},
		{
			MethodName: "channelCreate",
			Handler:    _ClubServer_ChannelCreate_Handler,
		},
		{
			MethodName: "zoneUpdate",
			Handler:    _ClubServer_ZoneUpdate_Handler,
		},
		{
			MethodName: "channelUpdate",
			Handler:    _ClubServer_ChannelUpdate_Handler,
		},
		{
			MethodName: "channelDelete",
			Handler:    _ClubServer_ChannelDelete_Handler,
		},
		{
			MethodName: "getChannelInfo",
			Handler:    _ClubServer_GetChannelInfo_Handler,
		},
		{
			MethodName: "zoneDelete",
			Handler:    _ClubServer_ZoneDelete_Handler,
		},
		{
			MethodName: "transfer",
			Handler:    _ClubServer_Transfer_Handler,
		},
		{
			MethodName: "getUserList",
			Handler:    _ClubServer_GetUserList_Handler,
		},
		{
			MethodName: "channelSort",
			Handler:    _ClubServer_ChannelSort_Handler,
		},
		{
			MethodName: "zoneSort",
			Handler:    _ClubServer_ZoneSort_Handler,
		},
		{
			MethodName: "clubSort",
			Handler:    _ClubServer_ClubSort_Handler,
		},
		{
			MethodName: "getUserCustomInfo",
			Handler:    _ClubServer_GetUserCustomInfo_Handler,
		},
		{
			MethodName: "GetRecommend",
			Handler:    _ClubServer_GetRecommend_Handler,
		},
		{
			MethodName: "GetRoleList",
			Handler:    _ClubServer_GetRoleList_Handler,
		},
		{
			MethodName: "GetRoleInfo",
			Handler:    _ClubServer_GetRoleInfo_Handler,
		},
		{
			MethodName: "SaveRoleInfo",
			Handler:    _ClubServer_SaveRoleInfo_Handler,
		},
		{
			MethodName: "DeleteRoleInfo",
			Handler:    _ClubServer_DeleteRoleInfo_Handler,
		},
		{
			MethodName: "OptRoleUser",
			Handler:    _ClubServer_OptRoleUser_Handler,
		},
		{
			MethodName: "SetRoleSort",
			Handler:    _ClubServer_SetRoleSort_Handler,
		},
		{
			MethodName: "GetDynamicUnReadStatic",
			Handler:    _ClubServer_GetDynamicUnReadStatic_Handler,
		},
		{
			MethodName: "GetUsersNickName",
			Handler:    _ClubServer_GetUsersNickName_Handler,
		},
		{
			MethodName: "CreateNotice",
			Handler:    _ClubServer_CreateNotice_Handler,
		},
		{
			MethodName: "UpdateNotice",
			Handler:    _ClubServer_UpdateNotice_Handler,
		},
		{
			MethodName: "DeleteNotice",
			Handler:    _ClubServer_DeleteNotice_Handler,
		},
		{
			MethodName: "GetBanList",
			Handler:    _ClubServer_GetBanList_Handler,
		},
		{
			MethodName: "OptBan",
			Handler:    _ClubServer_OptBan_Handler,
		},
		{
			MethodName: "SetChannelVisited",
			Handler:    _ClubServer_SetChannelVisited_Handler,
		},
		{
			MethodName: "GetChannelVisited",
			Handler:    _ClubServer_GetChannelVisited_Handler,
		},
		{
			MethodName: "GetShareCode",
			Handler:    _ClubServer_GetShareCode_Handler,
		},
		{
			MethodName: "GetShareCodeInfo",
			Handler:    _ClubServer_GetShareCodeInfo_Handler,
		},
		{
			MethodName: "ClubSearch",
			Handler:    _ClubServer_ClubSearch_Handler,
		},
		{
			MethodName: "StatLog",
			Handler:    _ClubServer_StatLog_Handler,
		},
		{
			MethodName: "HasAuth",
			Handler:    _ClubServer_HasAuth_Handler,
		},
		{
			MethodName: "GetInfoByShareCode",
			Handler:    _ClubServer_GetInfoByShareCode_Handler,
		},
		{
			MethodName: "GetClubTags",
			Handler:    _ClubServer_GetClubTags_Handler,
		},
		{
			MethodName: "ChannelBan",
			Handler:    _ClubServer_ChannelBan_Handler,
		},
		{
			MethodName: "UpdateRecommend",
			Handler:    _ClubServer_UpdateRecommend_Handler,
		},
		{
			MethodName: "GetClubsByIp",
			Handler:    _ClubServer_GetClubsByIp_Handler,
		},
		{
			MethodName: "GetOnlineUsers",
			Handler:    _ClubServer_GetOnlineUsers_Handler,
		},
		{
			MethodName: "SetUsersOnline",
			Handler:    _ClubServer_SetUsersOnline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/club.v1.proto",
}
