// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: define/userinfo.proto

package userinfo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 只支持info查询
	GetUsersInfo(ctx context.Context, in *GetUsersInfoReq, opts ...grpc.CallOption) (*GetUsersInfoResp, error)
	// 支持info，conf, relation组合查询
	GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersResp, error)
	// 用户信息或设置修改
	UpdateUserInfo(ctx context.Context, in *SetUserInfoReq, opts ...grpc.CallOption) (*SetUserInfoResp, error)
	// 修改账号密码
	ResetUserPwd(ctx context.Context, in *RestUsersPwdReq, opts ...grpc.CallOption) (*RestUsersPwdResp, error)
	// 获取用户的消息配置
	GetUsersNotificationConf(ctx context.Context, in *UsersNotificationConfReq, opts ...grpc.CallOption) (*UsersNotificationConfResp, error)
	// 设置用户的消息配置
	SetUsersNotificationConf(ctx context.Context, in *SetUsersNotificationConfReq, opts ...grpc.CallOption) (*SetUsersNotificationConfResp, error)
	// 申请注销账号
	SetCancellation(ctx context.Context, in *SetCancellationReq, opts ...grpc.CallOption) (*SetCancellationResp, error)
	// 登陆
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	// 发送邮箱验证码
	SendVerificationCode(ctx context.Context, in *SendVerificationCodeReq, opts ...grpc.CallOption) (*SendVerificationCodeResp, error)
	// 自动登陆
	LoginAuto(ctx context.Context, in *LoginAutoReq, opts ...grpc.CallOption) (*LoginAutoResp, error)
	// 退出登陆
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	// 忘记密码
	Forget(ctx context.Context, in *ForgetReq, opts ...grpc.CallOption) (*ForgetResp, error)
	// 检查用户是否已经存在
	CheckUserExists(ctx context.Context, in *CheckUserExistsReq, opts ...grpc.CallOption) (*CheckUserExistsResp, error)
	// 绑定邮箱、或者第三方账号
	Bind(ctx context.Context, in *BindReq, opts ...grpc.CallOption) (*BindResp, error)
	// 解绑账号
	Unbind(ctx context.Context, in *UnbindReq, opts ...grpc.CallOption) (*UserResult, error)
	// 绑定列表
	BindList(ctx context.Context, in *BindListReq, opts ...grpc.CallOption) (*BindListRes, error)
	// 获取第三方认证信息
	GetAuthInfo(ctx context.Context, in *GetAuthInfoReq, opts ...grpc.CallOption) (*GetAuthInfoResp, error)
	// 验证用户密码
	VerifyPwd(ctx context.Context, in *VerifyPwdReq, opts ...grpc.CallOption) (*VerifyPwdResp, error)
	// 获取自动登陆信息
	GetLoginAutoInfo(ctx context.Context, in *GetLoginAutoInfoReq, opts ...grpc.CallOption) (*GetLoginAutoInfoResp, error)
	// 管理后台 - 数据上报
	StatLog(ctx context.Context, in *StatLogReq, opts ...grpc.CallOption) (*GetLoginAutoInfoResp, error)
	// banner列表
	BannerList(ctx context.Context, in *BannerListReq, opts ...grpc.CallOption) (*BannerListResp, error)
	BannerSave(ctx context.Context, in *BannerSaveReq, opts ...grpc.CallOption) (*BannerSaveResp, error)
	BannerInfo(ctx context.Context, in *BannerInfoReq, opts ...grpc.CallOption) (*BannerInfoResp, error)
	BannerDel(ctx context.Context, in *BannerDelReq, opts ...grpc.CallOption) (*BannerDelResp, error)
	// 搜索用户
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
	// 通过分享码获取用户信息
	GetInfoByShareCode(ctx context.Context, in *GetInfoByShareCodeReq, opts ...grpc.CallOption) (*GetInfoByShareCodeResp, error)
	// 创建/绑定钱包
	GenerateWallet(ctx context.Context, in *GenerateWalletReq, opts ...grpc.CallOption) (*GenerateWalletResp, error)
	// 解绑钱包
	UnbindWallet(ctx context.Context, in *UnbindWalletReq, opts ...grpc.CallOption) (*UnbindWalletResp, error)
	// 创建二维码信息
	CreateLoginQrCode(ctx context.Context, in *CreateLoginQrCodeReq, opts ...grpc.CallOption) (*CreateLoginQrCodeResp, error)
	// 更新二维码信息
	UpdateLoginQrCode(ctx context.Context, in *UpdateLoginQrCodeReq, opts ...grpc.CallOption) (*UpdateLoginQrCodeResp, error)
	// 获取二维码信息
	GetLoginQrCode(ctx context.Context, in *GetLoginQrCodeReq, opts ...grpc.CallOption) (*GetLoginQrCodeResp, error)
	// 更新用户在线状态
	SaveUserOnLineStatus(ctx context.Context, in *SaveUserOnLineStatusReq, opts ...grpc.CallOption) (*SaveUserOnLineStatusResp, error)
	// 获取用户在线状态
	GetUserOnLineStatus(ctx context.Context, in *GetUserOnLineStatusReq, opts ...grpc.CallOption) (*GetUserOnLineStatusResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUsersInfo(ctx context.Context, in *GetUsersInfoReq, opts ...grpc.CallOption) (*GetUsersInfoResp, error) {
	out := new(GetUsersInfoResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/getUsersInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersResp, error) {
	out := new(GetUsersResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/getUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserInfo(ctx context.Context, in *SetUserInfoReq, opts ...grpc.CallOption) (*SetUserInfoResp, error) {
	out := new(SetUserInfoResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/updateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ResetUserPwd(ctx context.Context, in *RestUsersPwdReq, opts ...grpc.CallOption) (*RestUsersPwdResp, error) {
	out := new(RestUsersPwdResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/ResetUserPwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUsersNotificationConf(ctx context.Context, in *UsersNotificationConfReq, opts ...grpc.CallOption) (*UsersNotificationConfResp, error) {
	out := new(UsersNotificationConfResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/GetUsersNotificationConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetUsersNotificationConf(ctx context.Context, in *SetUsersNotificationConfReq, opts ...grpc.CallOption) (*SetUsersNotificationConfResp, error) {
	out := new(SetUsersNotificationConfResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/SetUsersNotificationConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetCancellation(ctx context.Context, in *SetCancellationReq, opts ...grpc.CallOption) (*SetCancellationResp, error) {
	out := new(SetCancellationResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/SetCancellation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SendVerificationCode(ctx context.Context, in *SendVerificationCodeReq, opts ...grpc.CallOption) (*SendVerificationCodeResp, error) {
	out := new(SendVerificationCodeResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/SendVerificationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginAuto(ctx context.Context, in *LoginAutoReq, opts ...grpc.CallOption) (*LoginAutoResp, error) {
	out := new(LoginAutoResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/LoginAuto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Forget(ctx context.Context, in *ForgetReq, opts ...grpc.CallOption) (*ForgetResp, error) {
	out := new(ForgetResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/Forget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckUserExists(ctx context.Context, in *CheckUserExistsReq, opts ...grpc.CallOption) (*CheckUserExistsResp, error) {
	out := new(CheckUserExistsResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/CheckUserExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Bind(ctx context.Context, in *BindReq, opts ...grpc.CallOption) (*BindResp, error) {
	out := new(BindResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/Bind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Unbind(ctx context.Context, in *UnbindReq, opts ...grpc.CallOption) (*UserResult, error) {
	out := new(UserResult)
	err := c.cc.Invoke(ctx, "/userinfo.User/Unbind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BindList(ctx context.Context, in *BindListReq, opts ...grpc.CallOption) (*BindListRes, error) {
	out := new(BindListRes)
	err := c.cc.Invoke(ctx, "/userinfo.User/BindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAuthInfo(ctx context.Context, in *GetAuthInfoReq, opts ...grpc.CallOption) (*GetAuthInfoResp, error) {
	out := new(GetAuthInfoResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/GetAuthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VerifyPwd(ctx context.Context, in *VerifyPwdReq, opts ...grpc.CallOption) (*VerifyPwdResp, error) {
	out := new(VerifyPwdResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/VerifyPwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetLoginAutoInfo(ctx context.Context, in *GetLoginAutoInfoReq, opts ...grpc.CallOption) (*GetLoginAutoInfoResp, error) {
	out := new(GetLoginAutoInfoResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/GetLoginAutoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) StatLog(ctx context.Context, in *StatLogReq, opts ...grpc.CallOption) (*GetLoginAutoInfoResp, error) {
	out := new(GetLoginAutoInfoResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/StatLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BannerList(ctx context.Context, in *BannerListReq, opts ...grpc.CallOption) (*BannerListResp, error) {
	out := new(BannerListResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/BannerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BannerSave(ctx context.Context, in *BannerSaveReq, opts ...grpc.CallOption) (*BannerSaveResp, error) {
	out := new(BannerSaveResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/BannerSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BannerInfo(ctx context.Context, in *BannerInfoReq, opts ...grpc.CallOption) (*BannerInfoResp, error) {
	out := new(BannerInfoResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/BannerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BannerDel(ctx context.Context, in *BannerDelReq, opts ...grpc.CallOption) (*BannerDelResp, error) {
	out := new(BannerDelResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/BannerDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetInfoByShareCode(ctx context.Context, in *GetInfoByShareCodeReq, opts ...grpc.CallOption) (*GetInfoByShareCodeResp, error) {
	out := new(GetInfoByShareCodeResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/GetInfoByShareCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GenerateWallet(ctx context.Context, in *GenerateWalletReq, opts ...grpc.CallOption) (*GenerateWalletResp, error) {
	out := new(GenerateWalletResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/GenerateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UnbindWallet(ctx context.Context, in *UnbindWalletReq, opts ...grpc.CallOption) (*UnbindWalletResp, error) {
	out := new(UnbindWalletResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/UnbindWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateLoginQrCode(ctx context.Context, in *CreateLoginQrCodeReq, opts ...grpc.CallOption) (*CreateLoginQrCodeResp, error) {
	out := new(CreateLoginQrCodeResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/CreateLoginQrCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateLoginQrCode(ctx context.Context, in *UpdateLoginQrCodeReq, opts ...grpc.CallOption) (*UpdateLoginQrCodeResp, error) {
	out := new(UpdateLoginQrCodeResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/UpdateLoginQrCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetLoginQrCode(ctx context.Context, in *GetLoginQrCodeReq, opts ...grpc.CallOption) (*GetLoginQrCodeResp, error) {
	out := new(GetLoginQrCodeResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/GetLoginQrCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveUserOnLineStatus(ctx context.Context, in *SaveUserOnLineStatusReq, opts ...grpc.CallOption) (*SaveUserOnLineStatusResp, error) {
	out := new(SaveUserOnLineStatusResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/SaveUserOnLineStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserOnLineStatus(ctx context.Context, in *GetUserOnLineStatusReq, opts ...grpc.CallOption) (*GetUserOnLineStatusResp, error) {
	out := new(GetUserOnLineStatusResp)
	err := c.cc.Invoke(ctx, "/userinfo.User/GetUserOnLineStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 只支持info查询
	GetUsersInfo(context.Context, *GetUsersInfoReq) (*GetUsersInfoResp, error)
	// 支持info，conf, relation组合查询
	GetUsers(context.Context, *GetUsersReq) (*GetUsersResp, error)
	// 用户信息或设置修改
	UpdateUserInfo(context.Context, *SetUserInfoReq) (*SetUserInfoResp, error)
	// 修改账号密码
	ResetUserPwd(context.Context, *RestUsersPwdReq) (*RestUsersPwdResp, error)
	// 获取用户的消息配置
	GetUsersNotificationConf(context.Context, *UsersNotificationConfReq) (*UsersNotificationConfResp, error)
	// 设置用户的消息配置
	SetUsersNotificationConf(context.Context, *SetUsersNotificationConfReq) (*SetUsersNotificationConfResp, error)
	// 申请注销账号
	SetCancellation(context.Context, *SetCancellationReq) (*SetCancellationResp, error)
	// 登陆
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 注册
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	// 发送邮箱验证码
	SendVerificationCode(context.Context, *SendVerificationCodeReq) (*SendVerificationCodeResp, error)
	// 自动登陆
	LoginAuto(context.Context, *LoginAutoReq) (*LoginAutoResp, error)
	// 退出登陆
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	// 忘记密码
	Forget(context.Context, *ForgetReq) (*ForgetResp, error)
	// 检查用户是否已经存在
	CheckUserExists(context.Context, *CheckUserExistsReq) (*CheckUserExistsResp, error)
	// 绑定邮箱、或者第三方账号
	Bind(context.Context, *BindReq) (*BindResp, error)
	// 解绑账号
	Unbind(context.Context, *UnbindReq) (*UserResult, error)
	// 绑定列表
	BindList(context.Context, *BindListReq) (*BindListRes, error)
	// 获取第三方认证信息
	GetAuthInfo(context.Context, *GetAuthInfoReq) (*GetAuthInfoResp, error)
	// 验证用户密码
	VerifyPwd(context.Context, *VerifyPwdReq) (*VerifyPwdResp, error)
	// 获取自动登陆信息
	GetLoginAutoInfo(context.Context, *GetLoginAutoInfoReq) (*GetLoginAutoInfoResp, error)
	// 管理后台 - 数据上报
	StatLog(context.Context, *StatLogReq) (*GetLoginAutoInfoResp, error)
	// banner列表
	BannerList(context.Context, *BannerListReq) (*BannerListResp, error)
	BannerSave(context.Context, *BannerSaveReq) (*BannerSaveResp, error)
	BannerInfo(context.Context, *BannerInfoReq) (*BannerInfoResp, error)
	BannerDel(context.Context, *BannerDelReq) (*BannerDelResp, error)
	// 搜索用户
	Search(context.Context, *SearchReq) (*SearchResp, error)
	// 通过分享码获取用户信息
	GetInfoByShareCode(context.Context, *GetInfoByShareCodeReq) (*GetInfoByShareCodeResp, error)
	// 创建/绑定钱包
	GenerateWallet(context.Context, *GenerateWalletReq) (*GenerateWalletResp, error)
	// 解绑钱包
	UnbindWallet(context.Context, *UnbindWalletReq) (*UnbindWalletResp, error)
	// 创建二维码信息
	CreateLoginQrCode(context.Context, *CreateLoginQrCodeReq) (*CreateLoginQrCodeResp, error)
	// 更新二维码信息
	UpdateLoginQrCode(context.Context, *UpdateLoginQrCodeReq) (*UpdateLoginQrCodeResp, error)
	// 获取二维码信息
	GetLoginQrCode(context.Context, *GetLoginQrCodeReq) (*GetLoginQrCodeResp, error)
	// 更新用户在线状态
	SaveUserOnLineStatus(context.Context, *SaveUserOnLineStatusReq) (*SaveUserOnLineStatusResp, error)
	// 获取用户在线状态
	GetUserOnLineStatus(context.Context, *GetUserOnLineStatusReq) (*GetUserOnLineStatusResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) GetUsersInfo(context.Context, *GetUsersInfoReq) (*GetUsersInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersInfo not implemented")
}
func (UnimplementedUserServer) GetUsers(context.Context, *GetUsersReq) (*GetUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserServer) UpdateUserInfo(context.Context, *SetUserInfoReq) (*SetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserServer) ResetUserPwd(context.Context, *RestUsersPwdReq) (*RestUsersPwdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserPwd not implemented")
}
func (UnimplementedUserServer) GetUsersNotificationConf(context.Context, *UsersNotificationConfReq) (*UsersNotificationConfResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersNotificationConf not implemented")
}
func (UnimplementedUserServer) SetUsersNotificationConf(context.Context, *SetUsersNotificationConfReq) (*SetUsersNotificationConfResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUsersNotificationConf not implemented")
}
func (UnimplementedUserServer) SetCancellation(context.Context, *SetCancellationReq) (*SetCancellationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCancellation not implemented")
}
func (UnimplementedUserServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServer) SendVerificationCode(context.Context, *SendVerificationCodeReq) (*SendVerificationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationCode not implemented")
}
func (UnimplementedUserServer) LoginAuto(context.Context, *LoginAutoReq) (*LoginAutoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAuto not implemented")
}
func (UnimplementedUserServer) Logout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserServer) Forget(context.Context, *ForgetReq) (*ForgetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forget not implemented")
}
func (UnimplementedUserServer) CheckUserExists(context.Context, *CheckUserExistsReq) (*CheckUserExistsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserExists not implemented")
}
func (UnimplementedUserServer) Bind(context.Context, *BindReq) (*BindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}
func (UnimplementedUserServer) Unbind(context.Context, *UnbindReq) (*UserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unbind not implemented")
}
func (UnimplementedUserServer) BindList(context.Context, *BindListReq) (*BindListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindList not implemented")
}
func (UnimplementedUserServer) GetAuthInfo(context.Context, *GetAuthInfoReq) (*GetAuthInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthInfo not implemented")
}
func (UnimplementedUserServer) VerifyPwd(context.Context, *VerifyPwdReq) (*VerifyPwdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPwd not implemented")
}
func (UnimplementedUserServer) GetLoginAutoInfo(context.Context, *GetLoginAutoInfoReq) (*GetLoginAutoInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginAutoInfo not implemented")
}
func (UnimplementedUserServer) StatLog(context.Context, *StatLogReq) (*GetLoginAutoInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatLog not implemented")
}
func (UnimplementedUserServer) BannerList(context.Context, *BannerListReq) (*BannerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BannerList not implemented")
}
func (UnimplementedUserServer) BannerSave(context.Context, *BannerSaveReq) (*BannerSaveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BannerSave not implemented")
}
func (UnimplementedUserServer) BannerInfo(context.Context, *BannerInfoReq) (*BannerInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BannerInfo not implemented")
}
func (UnimplementedUserServer) BannerDel(context.Context, *BannerDelReq) (*BannerDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BannerDel not implemented")
}
func (UnimplementedUserServer) Search(context.Context, *SearchReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedUserServer) GetInfoByShareCode(context.Context, *GetInfoByShareCodeReq) (*GetInfoByShareCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoByShareCode not implemented")
}
func (UnimplementedUserServer) GenerateWallet(context.Context, *GenerateWalletReq) (*GenerateWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWallet not implemented")
}
func (UnimplementedUserServer) UnbindWallet(context.Context, *UnbindWalletReq) (*UnbindWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindWallet not implemented")
}
func (UnimplementedUserServer) CreateLoginQrCode(context.Context, *CreateLoginQrCodeReq) (*CreateLoginQrCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoginQrCode not implemented")
}
func (UnimplementedUserServer) UpdateLoginQrCode(context.Context, *UpdateLoginQrCodeReq) (*UpdateLoginQrCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoginQrCode not implemented")
}
func (UnimplementedUserServer) GetLoginQrCode(context.Context, *GetLoginQrCodeReq) (*GetLoginQrCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginQrCode not implemented")
}
func (UnimplementedUserServer) SaveUserOnLineStatus(context.Context, *SaveUserOnLineStatusReq) (*SaveUserOnLineStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserOnLineStatus not implemented")
}
func (UnimplementedUserServer) GetUserOnLineStatus(context.Context, *GetUserOnLineStatusReq) (*GetUserOnLineStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOnLineStatus not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetUsersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUsersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/getUsersInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUsersInfo(ctx, req.(*GetUsersInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/getUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUsers(ctx, req.(*GetUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/updateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserInfo(ctx, req.(*SetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ResetUserPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestUsersPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ResetUserPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/ResetUserPwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ResetUserPwd(ctx, req.(*RestUsersPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUsersNotificationConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersNotificationConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUsersNotificationConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/GetUsersNotificationConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUsersNotificationConf(ctx, req.(*UsersNotificationConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetUsersNotificationConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUsersNotificationConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetUsersNotificationConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/SetUsersNotificationConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetUsersNotificationConf(ctx, req.(*SetUsersNotificationConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetCancellation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCancellationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetCancellation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/SetCancellation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetCancellation(ctx, req.(*SetCancellationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SendVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerificationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SendVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/SendVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SendVerificationCode(ctx, req.(*SendVerificationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginAuto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAutoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginAuto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/LoginAuto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginAuto(ctx, req.(*LoginAutoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Forget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Forget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/Forget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Forget(ctx, req.(*ForgetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckUserExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckUserExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/CheckUserExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckUserExists(ctx, req.(*CheckUserExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/Bind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Bind(ctx, req.(*BindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Unbind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Unbind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/Unbind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Unbind(ctx, req.(*UnbindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/BindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BindList(ctx, req.(*BindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/GetAuthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAuthInfo(ctx, req.(*GetAuthInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VerifyPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VerifyPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/VerifyPwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VerifyPwd(ctx, req.(*VerifyPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetLoginAutoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginAutoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetLoginAutoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/GetLoginAutoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetLoginAutoInfo(ctx, req.(*GetLoginAutoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_StatLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).StatLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/StatLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).StatLog(ctx, req.(*StatLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BannerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BannerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/BannerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BannerList(ctx, req.(*BannerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BannerSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BannerSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/BannerSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BannerSave(ctx, req.(*BannerSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BannerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BannerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/BannerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BannerInfo(ctx, req.(*BannerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BannerDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BannerDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/BannerDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BannerDel(ctx, req.(*BannerDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetInfoByShareCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoByShareCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetInfoByShareCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/GetInfoByShareCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetInfoByShareCode(ctx, req.(*GetInfoByShareCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GenerateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GenerateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/GenerateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GenerateWallet(ctx, req.(*GenerateWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UnbindWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UnbindWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/UnbindWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UnbindWallet(ctx, req.(*UnbindWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateLoginQrCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoginQrCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateLoginQrCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/CreateLoginQrCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateLoginQrCode(ctx, req.(*CreateLoginQrCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateLoginQrCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoginQrCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateLoginQrCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/UpdateLoginQrCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateLoginQrCode(ctx, req.(*UpdateLoginQrCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetLoginQrCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginQrCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetLoginQrCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/GetLoginQrCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetLoginQrCode(ctx, req.(*GetLoginQrCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveUserOnLineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserOnLineStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveUserOnLineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/SaveUserOnLineStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveUserOnLineStatus(ctx, req.(*SaveUserOnLineStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserOnLineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOnLineStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserOnLineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfo.User/GetUserOnLineStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserOnLineStatus(ctx, req.(*GetUserOnLineStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userinfo.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUsersInfo",
			Handler:    _User_GetUsersInfo_Handler,
		},
		{
			MethodName: "getUsers",
			Handler:    _User_GetUsers_Handler,
		},
		{
			MethodName: "updateUserInfo",
			Handler:    _User_UpdateUserInfo_Handler,
		},
		{
			MethodName: "ResetUserPwd",
			Handler:    _User_ResetUserPwd_Handler,
		},
		{
			MethodName: "GetUsersNotificationConf",
			Handler:    _User_GetUsersNotificationConf_Handler,
		},
		{
			MethodName: "SetUsersNotificationConf",
			Handler:    _User_SetUsersNotificationConf_Handler,
		},
		{
			MethodName: "SetCancellation",
			Handler:    _User_SetCancellation_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "SendVerificationCode",
			Handler:    _User_SendVerificationCode_Handler,
		},
		{
			MethodName: "LoginAuto",
			Handler:    _User_LoginAuto_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _User_Logout_Handler,
		},
		{
			MethodName: "Forget",
			Handler:    _User_Forget_Handler,
		},
		{
			MethodName: "CheckUserExists",
			Handler:    _User_CheckUserExists_Handler,
		},
		{
			MethodName: "Bind",
			Handler:    _User_Bind_Handler,
		},
		{
			MethodName: "Unbind",
			Handler:    _User_Unbind_Handler,
		},
		{
			MethodName: "BindList",
			Handler:    _User_BindList_Handler,
		},
		{
			MethodName: "GetAuthInfo",
			Handler:    _User_GetAuthInfo_Handler,
		},
		{
			MethodName: "VerifyPwd",
			Handler:    _User_VerifyPwd_Handler,
		},
		{
			MethodName: "GetLoginAutoInfo",
			Handler:    _User_GetLoginAutoInfo_Handler,
		},
		{
			MethodName: "StatLog",
			Handler:    _User_StatLog_Handler,
		},
		{
			MethodName: "BannerList",
			Handler:    _User_BannerList_Handler,
		},
		{
			MethodName: "BannerSave",
			Handler:    _User_BannerSave_Handler,
		},
		{
			MethodName: "BannerInfo",
			Handler:    _User_BannerInfo_Handler,
		},
		{
			MethodName: "BannerDel",
			Handler:    _User_BannerDel_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _User_Search_Handler,
		},
		{
			MethodName: "GetInfoByShareCode",
			Handler:    _User_GetInfoByShareCode_Handler,
		},
		{
			MethodName: "GenerateWallet",
			Handler:    _User_GenerateWallet_Handler,
		},
		{
			MethodName: "UnbindWallet",
			Handler:    _User_UnbindWallet_Handler,
		},
		{
			MethodName: "CreateLoginQrCode",
			Handler:    _User_CreateLoginQrCode_Handler,
		},
		{
			MethodName: "UpdateLoginQrCode",
			Handler:    _User_UpdateLoginQrCode_Handler,
		},
		{
			MethodName: "GetLoginQrCode",
			Handler:    _User_GetLoginQrCode_Handler,
		},
		{
			MethodName: "SaveUserOnLineStatus",
			Handler:    _User_SaveUserOnLineStatus_Handler,
		},
		{
			MethodName: "GetUserOnLineStatus",
			Handler:    _User_GetUserOnLineStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/userinfo.proto",
}
