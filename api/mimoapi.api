syntax = "v1"

info (
	title:   "mimo http api services"
	desc:    "统一api服务"
	author:  "x@cyberflow.cc"
	email:   "x@cyberflow.cc"
	version: "v1.0"
)

//统一请求鉴权信息
type CommonParams {
	UserId      int64  `form:"user_id"` //用户唯一标识
	SessId      string `form:"sessid"` //用户登录标识
	Api         string `form:"api"` //App公钥
	Version     string `form:"version"` //版本号
	VersionCode string `form:"version_code"` //构建号
	Uuid        string `form:"uuid"` //设备唯一标识
	Lan         string `form:"lan"` //语言，如zh_TW
	Sign        string `form:"sign"` //签名
	SignTime    int64  `form:"sign_time"` //当前时间
}

//统一返回格式
type CommonJsonResp {
	Code int32       `json:"iRet"`
	Msg  string      `json:"sMsg"`
	Data interface{} `json:"data"`
}

//--------用户信息和登录---------
type UserConfig {
	Asset        int32  `json:"asset"` //"asset":1,
	NftSet       int32  `json:"nft_set"` //"nft_set":1,
	NoticeType   int32  `json:"notice_type"` //"notice_type":0,
	DynamicShow  int32  `json:"dynamic_show"` //"dynamic_show":1,
	StrangeMsg   int32  `json:"strange_msg"` //"strange_msg":0,
	Cover        string `json:"cover"` //"cover":0,
	NetWork      string `json:"network"` //"network":"",
	Lan          string `json:"lan"` //"lan":"",
	IsSearch     int32  `json:"is_search"` //"is_search":"0",
	RelationShow int32  `json:"relation_show"` //"relation_show":"1"
	FriendVerify int32  `json:"friend_verify"`
}

type UserNotificationConfig {
	UserId            string `json:"user_id"`
	NewNotification   int64  `json:"new_notification"` // 新消息通知：0 关闭 1开启（默认）
	ShowSenderContent int64  `json:"show_sender_content"` // 通知显示发送人及消息内容： 0 关闭 1开启（默认）
	Sounds            int64  `json:"sounds"` // 声音：0 关闭 1开启（默认）
	Vibrate           int64  `json:"vibrate"` // 振动：0 关闭 1开启（默认）
	Badges            int64  `json:"badges"` // 消息通知横幅：0 关闭 1开启（默认）
}

type UserInfo {
	UserID       int64      `json:"user_id"` //"user_id":548226,
	MidUnique    string     `json:"mid_unique"` //"mid_unique":"mid_vqudi3gia7",
	Sex          string     `json:"sex"` //"sex":"0",
	Desc         string     `json:"desc"` //"desc":"",
	Avatar       string     `json:"avatar"` //"avatar":"https://rd-center.mimelabs.xyz/RD-mime/Upload/nft/Meemo/1/100/1/Meemo1108824.png",
	OriginAvatar string     `json:"origin_avatar"` // 原图
	Nick         string     `json:"nick"` //"nick":"rrr",
	Address      string     `json:"address"` //"address":"0xb4c4504B429FE076dcf31C8361e1a5Dde19D2CF2",
	UserType     string     `json:"user_type"` //"user_type":"10",
	UserConf     UserConfig `json:"u_conf"` //u_conf
	Phrase       string     `json:"phrase"` //"phrase":"",
	NetWork      string     `json:"network"` //"network":"1000000",
	Remark       string     `json:"remarks"` //"remarks":"",
	Fans         int32      `json:"fans"` //"fans":0,
	Focus        int32      `json:"focus"` //"focus":0,
	IsFocus      int32      `json:"is_focus"` //"is_focus":0,
	RegTime      string     `json:"reg_time"` //"reg_time":"2023-03-10 17:28:44",
	IsBlock      int32      `json:"is_block"` //"is_block":0,
	IsPwd        int32      `json:"is_pwd,optional"`
	IsGeneral    int32      `json:"is_general"` //"is_general":0,
	IsFriend     int32      `json:"is_friend"` //"is_friend":0
	InBook       int32      `json:"in_book"`
}

type GetUsersRequest {
	CommonParams
	Ouids string `form:"ouids"` //55942,55941 逗号分隔
	Field string `form:"fields,default='info'"` //指定要查的信息info,conf,dynamic,relation 逗号分隔, 默认只查info
}

//暂无使用
type GetUsersResponse {
	Code int32      `json:"iRet"`
	Msg  string     `json:"sMsg"`
	Data []UserInfo `json:"data"`
}

type SetUserRequest {
	CommonParams
	CmdCode string `form:"cmd_code"` //1000001修改用户；1000003修改配置；1000004修改密码；1000006修改网络；1000008修改好友备注
	SubCode string `form:"code,optional"` //用户配置操作子项1000003
	Value   string `form:"value,optional"` //子操作等值，单项修改
	Nick    string `form:"nick,optional"`
	Desc    string `form:"desc,optional"`
	Age     string `form:"age,optional"`
	Custom  string `form:"custom,optional"` //是否自定义头像
	Url     string `form:"url,optional"` //自定义头像url
	Pwd     string `form:"pwd,optional"` //加密存储的密码
	Opwd    string `form:"opwd,optional"` //确认新密码
	Npwd    string `form:"npwd,optional"` //新密码
	NSort   string `form:"sort,optional"` //排序
	Ouid    string `form:"ouid,optional"`
	Remarks string `form:"remarks,optional"` //好友备注
}

type GetUsersNotificationConfRequest {
	CommonParams
	UserIds string `form:"userIds"` //多个用户用，号分割
}

type GetUsersNotificationConfResponse {
	Code int32                    `json:"iRet"`
	Msg  string                   `json:"sMsg"`
	Data []UserNotificationConfig `json:"data"`
}

type SetUsersNotificationConfRequest {
	CommonParams
	NewNotification   *int64 `form:"new_notification,optional"` // 新消息通知：0 关闭 1开启
	ShowSenderContent *int64 `form:"show_sender_content,optional"` // 通知显示发送人消息：0 关闭 1开启
	Sounds            *int64 `form:"sounds,optional"` // 声音：0 关闭 1开启
	Vibrate           *int64 `form:"vibrate,optional"` // 振动：0 关闭 1开启
	Badges            *int64 `form:"badges,optional"` // 消息通知横幅：0 关闭 1开启
}

// 登录、注册、忘记密码
type LoginRegisterForm {
	Openudid   string `form:"openudid"` // 账号（邮箱或自定义账号，或者是第三方登录的code，或钱包地址）
	UserType   int64  `form:"user_type"` // 账号类型10=>邮箱，20=>钱包(没有在用)，30=>google，40=>facebook（(没有在用)），50=>apple，60=>手机号（(没有在用)），70=>自定义账号，80=>一键注册
	OnlyCheck  int64  `form:"only_check,optional"` // 检测账号占用 0否 1是（邮箱，自定义账号登录时需要）
	InviteCode string `form:"invite_code,optional"` // 邀请码
	Pwd        string `form:"pwd,optional"` // 密码（登录，注册时必要）
	OPwd       string `form:"opwd,optional"` // 确认密码（注册时必要）
	EmailCode  string `form:"email_code,optional"` // 邮箱验证码
	Uuid       string `form:"uuid,optional"` // 设备ID
	Api        string `form:"api,optional"` // api
	Version    string `form:"version,optional"` // APP版本
	Lan        string `form:"lan"` //  语言
}

type LoginRegisterResponseTimeStruct {
	Unix int64  `json:"unix"`
	Zone string `json:"zone"`
}

type LoginRegisterResponseStruct {
	UserId       string                          `json:"user_id"` // 用户ID
	Nick         string                          `json:"nick"` // 用户昵称
	Status       string                          `json:"status"` // 状态
	Age          string                          `json:"age"` // （弃用）年龄
	Avatar       string                          `json:"avatar"` // 头像
	ActiveTime   int64                           `json:"active_time"` // 最后活跃时间
	Sex          string                          `json:"sex"` // （弃用）性别
	Level        string                          `json:"level"` // （弃用）等级
	Desc         string                          `json:"desc"` // 个签
	Sessid       string                          `json:"sessid"` // sessid
	IsRegister   int64                           `json:"isRegister"` // 是否是注册0否 1是
	IsTodayFirst string                          `json:"isTodayFirst"` // 是否当天首次登录0否1是
	UserType     string                          `json:"user_type"` // 用户账号类型
	HasWallet    string                          `json:"hasWallet"` // 是否有钱包地址 0否1是
	HasSign      string                          `json:"hasSign"` //
	Time         LoginRegisterResponseTimeStruct `json:"time"` // 服务端时间
	RegTime      string                          `json:"reg_time"` //注册时间
	OpenFun      bool                            `json:"open_fun"` // （弃用）
	OpenApplet   bool                            `json:"open_applet"` // （弃用）
	Openudid     string                          `json:"openudid"` // （弃用）
	Uuid         string                          `json:"uuid"` // （弃用）
}

type LoginIndexRequest {
	LoginRegisterForm
}

type LoginIndexResp {
	Code int32       `json:"iRet"`
	Msg  string      `json:"sMsg"`
	Data interface{} `json:"data"`
}

type LoginRequest {
	LoginRegisterForm
}

type LoginResp {
	Code int32                       `json:"iRet"`
	Msg  string                      `json:"sMsg"`
	Data LoginRegisterResponseStruct `json:"data"`
}

type LoginAutoRequest {
	CommonParams
	ResetSession int64 `form:"reset_sess,optional"` // 是否刷新session 0否 1是
}

type LoginAutoResp {
	Code int32                       `json:"iRet"`
	Msg  string                      `json:"sMsg"`
	Data LoginRegisterResponseStruct `json:"data"`
}

type LogoutRequest {
	CommonParams
}

type LogoutResp {
	Code int32    `json:"iRet"`
	Msg  string   `json:"sMsg"`
	Data []string `json:"data"`
}

type RegisterRequest {
	LoginRegisterForm
	AuthEmail string `form:"auth_email,optional"` // 第三方登录邮箱
}

type RegisterResp {
	Code int32                       `json:"iRet"`
	Msg  string                      `json:"sMsg"`
	Data LoginRegisterResponseStruct `json:"data"`
}

type ForgetRequest {
	LoginRegisterForm
}

type ForgetResp {
	Code int32    `json:"iRet"`
	Msg  string   `json:"sMsg"`
	Data []string `json:"data"`
}

type SendVerificationCodeRequest {
	Openudid string `form:"openudid"` //  邮箱
	Scene    int64  `form:"scene"` //  场景：1注册；2绑定；3忘記密碼，4pin
	Lan      string `form:"lan"` //  语言
	Uuid     string `form:"uuid"` //  设备id
}

type SendVerificationCodeResp {
	Code int32    `json:"iRet"`
	Msg  string   `json:"sMsg"`
	Data []string `json:"data"`
}

type CancellationRequest {
	CommonParams
}

type CancellationResp {
	Code int32    `json:"iRet"`
	Msg  string   `json:"sMsg"`
	Data []string `json:"data"`
}

type BindRequest {
	CommonParams
	Openudid  string `form:"openudid"` // 第三方账号
	EmailCode string `form:"email_code,optional"` // 邮箱验证码
	UserType  int64  `form:"user_type"` // 账号类型 10 邮箱 30 google 50 apple
	Pwd       string `form:"pwd,optional"` // 密码
	OPwd      string `form:"opwd,optional"` // 确认密码
}

type BindResp {
	Code int32    `json:"iRet"`
	Msg  string   `json:"sMsg"`
	Data []string `json:"data"`
}

type UnbindReq {
	CommonParams
	UserType int64 `form:"user_type"`
}

type BindStatus {
	Account int64 `json:"account"`
	Google  int64 `json:"google"`
	Apple   int64 `json:"apple"`
	Diy     int64 `json:"diy"`
	Quick   int64 `json:"quick"`
}

type BindListRes {
	Bind    BindStatus `json:"bind"`
	Account string     `json:"account"`
	Pwd     int64      `json:"pwd"`
	PhoneNo string     `json:"phoneNo"`
	DiyNo   string     `json:"diyNo"`
	GEmail  string     `json:"gEmail"`
	AEmail  string     `json:"aEmail"`
}

type VerifyPwdReq {
	CommonParams
	Pwd string `form:"pwd"`
}

type VerifyPwdRes {
	IsPass bool `json:"is_pass"`
}

type SearchReq {
	CommonParams
	Keywords string `form:"keywords,optional"`
}

type SearchInfo {
	Id         string `json:"id"` // 弃用
	UserId     string `json:"user_id"` // 用户ID
	Nick       string `json:"nick"` // 昵称
	Status     string `json:"status"` // (弃用)状态
	Age        string `json:"age"` // （弃用）年龄
	Avatar     string `json:"avatar"` // 小头像
	ActiveTime string `json:"active_time"` // 最后登录时间
	Sex        string `json:"sex"` // （弃用）性别
	Level      string `json:"level"` // 弃用
	Desc       string `json:"desc"` // 简介
	MidUnique  string `json:"mid_unique"` // 弃用
	BigAvatar  string `json:"big_avatar"` // 大头像
	Address    string `json:"address"` // 钱包地址
}

type SearchResp {
	Users []SearchInfo `json:"user"`
}

type GetInfoByShareCodeReq {
	Code string `form:"code"`
}

type ShareCodeUInfo {
	Id     string `json:"id"` // 用户ID
	UserId string `json:"user_id"` // 用户ID
	Nick   string `json:"nick"` // 用户昵称
	Avatar string `json:"avatar"` // 用户头像
	Num    string `json:"num"` // 弃用
	Desc   string `json:"desc"` // 用户简介
}

type GetInfoByShareCodeResp {
	ShareCodeUInfo
}

type GenerateWalletReq {
	CommonParams
	MneAddress string        `form:"mne_address"` // 钱包地址 0x6a75b116797cbadc47b8e5a918a87d5e7bebbfbb
	MneSign    string        `form:"mne_sign,optional"` // （弃用）明文签名信息 548235|0x6a75b116797cbadc47b8e5a918a87d5e7bebbfbb|1679469260997
	MneMsg     string        `form:"mne_msg,optional"` // （弃用）消息明文（钱包地址|时间戳） 0xca1f68142af0d417a8cdfa17b662c25fdbd5cffd1a7028184fd09d06b8e89dd36abdfe7d475872587ac922ebd07a4fca54887c12e19f2ef5258ecd32917644bb1c
	Anew       string        `form:"anew,optional"` // （弃用）重新创建钱包 0否 1是
	Pri        string        `form:"pri,optional"` // （弃用）加密后的私钥
	Pin        string        `form:"pin,optional"` // （弃用）加密后的pin
	OldPin     string        `form:"old_pin,optional"` // （弃用）原始pin md5
	Code       string        `form:"code,optional"` // （弃用）验证码
	Extend     []interface{} `form:"extend,optional"` // 多链钱包信息 json字符串 [{"chain":2000000,"wallet":"xxxxxx"},{"chain":3000000,"wallet":"aaaaa"}]
}

type ExtendInfo {
	Wallet string `json:"wallet"` // 钱包
	Chain  string `json:"chain"` // 链
}

type GenerateWalletResp {}

type UnbindWalletReq {
	CommonParams
}

type UnbindWalletResp {}

type CreateLoginQrCodeReq {
	WUuid string `form:"w_uuid"` // web终端的uuid
}

type CreateLoginQrCodeResp {
	QrcodeId string `json:"qrcode_id"` // 二维码Id
}

type GetQrLoginInfoReq {
	CommonParams
	QrcodeId string `form:"qrcode_id"` // 二维码Id
}

type GetQrLoginInfoResp {
	Token    string `json:"token"` // 临时token
	HasLogin int64  `json:"hasLogin"` // 是否已经登录其它设备
}

type AuthorizationLoginReq {
	CommonParams
	Token    string `form:"token"` // 授权token
	QrcodeId string `form:"qrcode_id"` // 二维码ID
	Status   int64  `form:"status,range=[2:3]"` // 2:同意授权 3:拒绝授权
}

type AuthorizationLoginResp {}

type GetLoginQrCodeStatusReq {
	Id string `form:"qrcode_id"` // 二维码ID
}

type GetLoginQrCodeStatusResp {
	QrcodeStatus int64 `json:"qrcode_status"` // 二维码状态 0:未扫描 1:已扫描，等待用户确认 2:已扫描，用户同意授权 3:已扫描，用户取消授权 4:已过期
	LoginRegisterResponseStruct
}

@server (
	middleware: UniUserAuth
	group:      user
	prefix:     user
)
service mimoapi {
	@doc "获取用户信息、配置"
	@handler getUsers
	post /usersinfo (GetUsersRequest) returns (CommonJsonResp)

	@doc "设置用户信息、配置"
	@handler setUser
	post /setUser (SetUserRequest) returns (CommonJsonResp)

	@doc "根据分享码获取用户信息"
	@handler GetInfoByShareCodeReq
	post /getInfoByShareCode (GetInfoByShareCodeReq) returns (GetInfoByShareCodeResp)

	@doc "获取消息通知配置"
	@handler getUsersNotificationConf
	post /usersNotification (GetUsersNotificationConfRequest) returns (CommonJsonResp)

	@doc "设置消息通知配置"
	@handler setUsersNotificationConf
	post /setUsersNotification (SetUsersNotificationConfRequest) returns (CommonJsonResp)

	@doc "检查用户是否存在&注册&登录（兼容老系统接口）"
	@handler LoginIndex
	post /loginIndex (LoginIndexRequest) returns (LoginIndexResp)

	@doc "登录"
	@handler Login
	post /login (LoginRequest) returns (LoginResp)

	@doc "自动登录"
	@handler LoginAuto
	post /loginAuto (LoginAutoRequest) returns (LoginAutoResp)

	@doc "退出登录"
	@handler Logout
	post /logout (LogoutRequest) returns (LogoutResp)

	@doc "注册"
	@handler Register
	post /register (RegisterRequest) returns (RegisterResp)

	@doc "忘记密码"
	@handler Forget
	post /forget (ForgetRequest) returns (ForgetResp)

	@doc "发送验证码"
	@handler SendVerificationCode
	post /sendVerificationCode (SendVerificationCodeRequest) returns (SendVerificationCodeResp)

	@doc "用户申请注销"
	@handler Cancellation
	post /cancellation (CancellationRequest) returns (CancellationResp)

	@doc "绑定账号"
	@handler Bind
	post /bind (BindRequest) returns (BindResp)

	@doc "解除绑定账号"
	@handler Unbind
	post /Unbind (UnbindReq) returns (CommonJsonResp)

	@doc "绑定列表"
	@handler BindList
	post /BindList (CommonParams) returns (CommonJsonResp)

	@doc "验证账号密码"
	@handler VerifyPwd
	post /VerifyPwd (VerifyPwdReq) returns (VerifyPwdRes)

	@doc "用户搜索"
	@handler Search
	post /search (SearchReq) returns (SearchResp)

	@doc "创建钱包"
	@handler GenerateWallet
	post /generateWallet (GenerateWalletReq) returns (GenerateWalletResp)

	@doc "解绑钱包"
	@handler UnbindWallet
	post /unbindWallet (UnbindWalletReq) returns (UnbindWalletResp)

	@doc "[扫码登录]PC创建二维码"
	@handler CreateLoginQrCode
	post /createLoginQrCode (CreateLoginQrCodeReq) returns (CreateLoginQrCodeResp)

	@doc "[扫码登录]PC获取二维码状态"
	@handler GetLoginQrCode
	post /getLoginQrcodeStatus (GetLoginQrCodeStatusReq) returns (GetLoginQrCodeStatusResp)

	@doc "[扫码登录]移动端扫码获取二维码信息"
	@handler GetQrLoginInfo
	post /GetQrLoginInfo (GetQrLoginInfoReq) returns (GetQrLoginInfoResp)

	@doc "[扫码登录]移动端授权登录"
	@handler AuthorizationLogin
	post /AuthorizationLogin (AuthorizationLoginReq) returns (AuthorizationLoginResp)
}

//--------通讯录--------
//--------好友---------
type FriendInfo {
	OuID       string `json:"ouid"`
	Nick       string `json:"nick"`
	Avatar     string `json:"avatar"`
	Wallet     string `json:"wallet"`
	IsBlock    int32  `json:"is_block"` //是否拉黑
	IsGeneral  int32  `json:"is_general"`
	StrangeMsg int32  `json:"strange_msg"`
	Remark     string `json:"remark"`
}

type FormFriendInfo {
	OuID     string `form:"ouid"`
	Nick     string `form:"nick,optional"` //备注昵称
	IsNotice int32  `form:"is_notice,default=0"` //是否屏蔽
}

type GetContactsRequest {
	CommonParams
}

type GetContactsResponse {
	List []FriendInfo `json:"y"`
}

type SetContactRequest {
	CommonParams
	FormFriendInfo
	SetType int32 `form:"type"` //1 add 2del
}

type SetContactNoticeRequest {
	CommonParams
	OuID    string `form:"ouid"`
	SetType int32  `form:"type"` //notice 0 正常 1屏蔽
	Context string `form:"context,optional"` // 申请内容
	Remark  string `form:"remark,optional"` // 备注
}

//---------我的群聊
type MyGroup {
	GID      string `json:"uniqid"`
	Name     string `json:"name"`
	Avatar   string `json:"avatar"`
	MapID    string `json:"map_id"`
	IsNotice string `json:"notice"`
}

type GetMyGroupsRequest {
	CommonParams
}

type GetMyGroupsResponse {
	List []MyGroup `json:"#"`
}

type SetMyGroupRequest {
	CommonParams
}

//----------好友申请----
type FRequestInfo {
	OuID    string `json:"ouid"`
	Avatar  string `json:"avatar"`
	Nick    string `json:"nick"`
	Mutual  string `json:"mutual"`
	CTime   string `json:"ctime"`
	Remarks string `json:"remarks"`
	Status  string `json:"status"` // 0 待处理，1 已通过，2已拒绝，3超时
	Context string `json:"context"`
}

type GetFRequestsRequest {
	CommonParams
	Pages int32 `form:"pages,default=1"`
	Scene int32 `form:"scene,default=0"` //0 通讯录 1 交友申请
}

type GetFRequestsResponse {
	FRList []FRequestInfo `json:"list"`
	Pages  int32          `json:"pages"`
	Count  int32          `json:"count"`
	Mark   int32          `json:"mark"`
}

type DelFRequestRequest {
	CommonParams
	Ouid int64 `form:"ouid"`
}

type SetFRequestRequest {
	CommonParams
	Ouid int64 `form:"ouid"`
	Type int64 `form:"type,range=[1:2]"` // 1同意，2拒绝
}

//--------黑名单-------------
type BlackInfo {
	UserId int64  `json:"user_id"` //用户唯一标识
	Nick   string `json:"nick"` //昵称
	Avatar string `json:"avatar"` //头像
}

type GetBlacksRequest {
	CommonParams
	Page int32 `form:"page,default=1"`
}

type GetBlacksResponse {
	BList []BlackInfo `json:"list"`
	Pages int32       `json:"pages"`
}

type SetBlackRequest {
	CommonParams
	Ouid string `form:"ouid"`
	Opt  string `form:"opt"` //add del
}

type RUnTaskReq {
	CommonParams
	TaskName string `form:"task_name"`
}

@server (
	middleware: UniUserAuth
	group:      contacts
	prefix:     contacts
)
service mimoapi {
	@doc "好友列表"
	@handler getContacts
	post /getContacts (GetContactsRequest) returns (CommonJsonResp)

	@handler setContact
	post /setContact (SetContactRequest) returns (CommonJsonResp)

	@doc "开启关闭免打扰"
	@handler setContactNotice
	post /setContactNotice (SetContactNoticeRequest) returns (CommonJsonResp)

	@doc "添加/删除好友"
	@handler setContactFan
	post /setContactFan (SetContactNoticeRequest) returns (CommonJsonResp)

	@doc "我的群列表"
	@handler getMyGroups
	post /getGroups (GetMyGroupsRequest) returns (CommonJsonResp)

	@handler setGroup
	post /setGroup (SetMyGroupRequest) returns (CommonJsonResp)

	@doc "加我好友列表"
	@handler getFRequests
	post /getFRequests (GetFRequestsRequest) returns (CommonJsonResp)

	@doc "好友申请删除"
	@handler delFRequest
	post /delFRequest (DelFRequestRequest) returns (CommonJsonResp)

	@doc "黑名单列表"
	@handler getBlacks
	post /getBlacks (GetBlacksRequest) returns (CommonJsonResp)

	@doc "加入黑名单"
	@handler setBlack
	post /setBlack (SetBlackRequest) returns (CommonJsonResp)

	@doc "处理好友申请"
	@handler setFRequest
	post /setFRequest (SetFRequestRequest) returns (CommonJsonResp)

	@doc "单次脚本"
	@handler runTask
	post /runTask (RUnTaskReq) returns (CommonJsonResp)
}

type GetBannerRequest {
	CommonParams
	Scene    int32  `form:"scene"` // banner 场景
	Page     int32  `form:"page,default=1"`
	PageSize int32  `form:"pageSize,default=20"`
	Search   string `form:"search,optional,default="`
}

type BannerInfo {
	ID           int64     `json:"id"` // 公告唯一标识
	Title        string    `json:"title"` // 标题
	Content      string    `json:"content"` // 内容
	Btn          []Button  `json:"btn"` // 按钮列表
	DailyDisplay int32     `json:"dailyDisplay"` // 展示次数 0 每次打开 > 0 每日展示次数
	ExtInfo      []ExtInfo `json:"extInfo"` // 附加信息
	Closable     int32     `json:"closable"` // 是否可以被用户关闭 0 不可关闭 1 可关闭
	Template     int32     `json:"template"` // 公告模板 后续增加
	StartTime    int64     `json:"startTime"` // 开启时间
	EndTime      int64     `json:"endTime"` // 结束时间
	BannerNo     string    `json:"bannerNo"` // banner唯一id
	Lan          string    `json:"lan"`
	Scene        int32     `json:"scene"` // 场景
	Plat         string    `json:"plat"` // 平台
	Version      string    `json:"version"`
	Sort         int32     `json:"sort"` // 排序
	Status       int32     `json:"status"` // 状态 1 上架 0 下架
}

type ExtInfo {
	Key string `json:"key"` // 附加信息 键值对
	Val string `json:"val"`
}

type Button {
	Title  string `json:"title"` // btn 标题
	Action string `json:"action"` // btn 动作
	Type   string `json:"type"` // 按钮类型
}

type SaveBannerRequest {
	CommonParams
	ID      int64  `form:"id,optional"`
	Content string `form:"content"`
}

type LanguageData {
	Title   string    `json:"title"`
	Content string    `json:"content"`
	Button  []Button  `json:"buttons"`
	ExtInfo []ExtInfo `json:"extInfos"`
	Lan     string    `json:"lan"`
}

type BannerInfoRequest {
	CommonParams
	ID int64 `form:"id"`
}

type BannerDelRequest {
	CommonParams
	ID int64 `form:"id"`
}

type Content {
	Buttons  []Button  `json:"buttons"`
	ExtInfos []ExtInfo `json:"extInfos"`
	Title    string    `json:"title"`
	Content  string    `json:"content"`
	Lan      string    `json:"lan"`
}

type BannerList {
	ID           int64     `json:"id"` // 公告唯一标识
	ContentOri   string    `json:"contentOri"` // 原始内容
	DailyDisplay int32     `json:"dailyDisplay"` // 展示次数 0 每次打开 > 0 每日展示次数
	Closable     int32     `json:"closable"` // 是否可以被用户关闭 0 不可关闭 1 可关闭
	Template     int32     `json:"template"` // 公告模板 后续增加
	StartTime    string    `json:"startTime"` // 开启时间
	EndTime      string    `json:"endTime"` // 结束时间
	Scene        int32     `json:"scene"` // 场景
	Plat         string    `json:"plat"` // 平台
	Version      string    `json:"version"`
	Content      []Content `json:"content"` // 数据列表
	DefaultLang  string    `json:"defaultLang"`
	Sort         int32     `json:"sort"` // 排序
	Status       int32     `json:"status"` // 状态 1 上架 0 下架
	Ctime        int64     `json:"ctime"`
	Search       string    `json:"search"` // 过滤字段
}

type GetDiscoverRequest {
	CommonParams
}

type DappInfo {
	ID                   int64  `json:"id"`
	DappLogo             string `json:"dapp_logo"` // logo
	DappName             string `json:"dapp_name"` // name
	DappSite             string `json:"dapp_site"` // site
	DappUrl              string `json:"dapp_url"` // 页面
	DappBigPicture       string `json:"dapp_big_picture"` // 缩略图
	DappRank             int64  `json:"dapp_rank"` // 排序
	DappDesc             string `json:"dapp_desc"` // 描述
	IsSearchRecommend    int64  `json:"is_search_recommend"` // 是否推荐
	IsDiscoveryRecommend int64  `json:"is_discovery_recommend"` // 是否发现页推荐
	Created              string `json:"created"` // 创建时间
	UserID               int64  `json:"user_id"` // 创建者 官方的为0
	DappId               string `json:"dapp_id"`
}

type ClubInfo {
	Id        string   `json:"id"` // 部落ID
	Name      string   `json:"name"` // 部落头像
	Avatar    string   `json:"avatar"` // 部落头像
	Bg        string   `json:"bg"` // 部落背景
	Desc      string   `json:"desc"` // 频道简介、部落介绍
	UserCount int64    `json:"user_count"` // 部落总人数
	InClub    int64    `json:"if_join"` // 1 已加入部落 0 未加入部落
	IsPub     int64    `json:"is_pub"` // 部落社区是否公开
	IsMaster  int64    `json:"is_master"` //1 是部落主 0 不是部落主
	Users     []string `json:"new_user"` //部落成员头像链接地址
	TagId     string   `json:"tag_id"` //部落标签ID
}

@server (
	middleware: UniUserAuth
	group:      banner
	prefix:     banner
)
service mimoapi {
	@doc "获取banner列表"
	@handler getBanner
	post /list (GetBannerRequest) returns (CommonJsonResp)

	@doc "保存banner"
	@handler saveBanner
	post /save (SaveBannerRequest) returns (CommonJsonResp)

	@doc "banner 详情"
	@handler bannerInfo
	post /info (BannerInfoRequest) returns (CommonJsonResp)

	@doc "删除banner"
	@handler bannerDel
	post /del (BannerDelRequest) returns (CommonJsonResp)

	@doc "管理后台banner列表"
	@handler getBannerAdmin
	post /list/admin (GetBannerRequest) returns (CommonJsonResp)

	@doc "广场"
	@handler getDiscover
	post /discover (GetDiscoverRequest) returns (CommonJsonResp)
}

