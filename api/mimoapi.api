syntax = "v1"

info (
	title:   "mimo http api services"
	desc:    "统一api服务"
	author:  "x@cyberflow.cc"
	email:   "x@cyberflow.cc"
	version: "v1.0"
)

//统一请求鉴权信息
type CommonParams {
	UserId      int64  `form:"user_id"` //用户唯一标识
	SessId      string `form:"sessid"` //用户登录标识
	Api         string `form:"api"` //App公钥
	Version     string `form:"version"` //版本号
	VersionCode string `form:"version_code"` //构建号
	Uuid        string `form:"uuid"` //设备唯一标识
	Lan         string `form:"lan"` //语言，如zh_TW
	Sign        string `form:"sign"` //签名
	SignTime    int64  `form:"sign_time"` //当前时间
}

//统一返回格式
type CommonJsonResp {
	Code int32       `json:"iRet"`
	Msg  string      `json:"sMsg"`
	Data interface{} `json:"data"`
}

//--------用户信息和登录---------
type UserConfig {
	Asset        int32  `json:"asset"` //"asset":1,
	NftSet       int32  `json:"nft_set"` //"nft_set":1,
	NoticeType   int32  `json:"notice_type"` //"notice_type":0,
	DynamicShow  int32  `json:"dynamic_show"` //"dynamic_show":1,
	StrangeMsg   int32  `json:"strange_msg"` //"strange_msg":0,
	Cover        string `json:"cover"` //"cover":0,
	NetWork      string `json:"network"` //"network":"",
	Lan          string `json:"lan"` //"lan":"",
	IsSearch     int32  `json:"is_search"` //"is_search":"0",
	RelationShow int32  `json:"relation_show"` //"relation_show":"1"
	FriendVerify int32  `json:"friend_verify"`
	OnlineShow   int32  `json:"online_show"` // 在线状态是否展示 0 不展示 1展示
}

type UserNotificationConfig {
	UserId            string `json:"user_id"`
	NewNotification   int64  `json:"new_notification"` // 新消息通知：0 关闭 1开启（默认）
	ShowSenderContent int64  `json:"show_sender_content"` // 通知显示发送人及消息内容： 0 关闭 1开启（默认）
	Sounds            int64  `json:"sounds"` // 声音：0 关闭 1开启（默认）
	Vibrate           int64  `json:"vibrate"` // 振动：0 关闭 1开启（默认）
	Badges            int64  `json:"badges"` // 消息通知横幅：0 关闭 1开启（默认）
}

type UserInfo {
	UserID       int64      `json:"user_id"` //"user_id":548226,
	MidUnique    string     `json:"mid_unique"` //"mid_unique":"mid_vqudi3gia7",
	Sex          string     `json:"sex"` //"sex":"0",
	Desc         string     `json:"desc"` //"desc":"",
	Avatar       string     `json:"avatar"` //"avatar":"https://rd-center.mimelabs.xyz/RD-mime/Upload/nft/Meemo/1/100/1/Meemo1108824.png",
	OriginAvatar string     `json:"origin_avatar"` // 原图
	Nick         string     `json:"nick"` //"nick":"rrr",
	GroupNick    string     `json:"group_nick"` // 群聊昵称
	ClubNick     string     `json:"club_nick"` //  部落昵称
	Address      string     `json:"address"` //"address":"0xb4c4504B429FE076dcf31C8361e1a5Dde19D2CF2",
	UserType     string     `json:"user_type"` //"user_type":"10",
	UserConf     UserConfig `json:"u_conf"` //u_conf
	Phrase       string     `json:"phrase"` //"phrase":"",
	NetWork      string     `json:"network"` //"network":"1000000",
	Remark       string     `json:"remarks"` //"remarks":"",
	Fans         int32      `json:"fans"` //"fans":0,
	Focus        int32      `json:"focus"` //"focus":0,
	IsFocus      int32      `json:"is_focus"` //"is_focus":0,
	RegTime      string     `json:"reg_time"` //"reg_time":"2023-03-10 17:28:44",
	IsBlock      int32      `json:"is_block"` //"is_block":0,
	IsPwd        int32      `json:"is_pwd,optional"`
	IsGeneral    int32      `json:"is_general"` //"is_general":0,
	IsFriend     int32      `json:"is_friend"` //"is_friend":0
	InBook       int32      `json:"in_book"`
}

type GetUsersRequest {
	CommonParams
	Ouids string `form:"ouids"` //55942,55941 逗号分隔
	Field string `form:"fields,default='info'"` //指定要查的信息info,conf,dynamic,relation,club,group 逗号分隔, 默认只查info
	TbMid string `form:"tb_mid,optional"` // 获取部落信息,fields传递club时需传递该值
	MapId string `form:"map_id,optional"` // 获取群聊信息,fileds传递group时需传递该值
}

//暂无使用
type GetUsersResponse {
	Code int32      `json:"iRet"`
	Msg  string     `json:"sMsg"`
	Data []UserInfo `json:"data"`
}

type SetUserRequest {
	CommonParams
	CmdCode string `form:"cmd_code"` //1000001修改用户；1000003修改配置；1000004修改密码；1000006修改网络；1000008修改好友备注
	SubCode string `form:"code,optional"` //用户配置操作子项1000003.10009 展示在线状态 0 不展示 1 展示
	Value   string `form:"value,optional"` //子操作等值，单项修改
	Nick    string `form:"nick,optional"`
	Desc    string `form:"desc,optional"`
	Age     string `form:"age,optional"`
	Custom  string `form:"custom,optional"` //是否自定义头像
	Url     string `form:"url,optional"` //自定义头像url
	Pwd     string `form:"pwd,optional"` //加密存储的密码
	Opwd    string `form:"opwd,optional"` //确认新密码
	Npwd    string `form:"npwd,optional"` //新密码
	NSort   string `form:"sort,optional"` //排序
	Ouid    string `form:"ouid,optional"`
	Remarks string `form:"remarks,optional"` //好友备注
}

type GetUsersNotificationConfRequest {
	CommonParams
	UserIds string `form:"userIds"` //多个用户用，号分割
}

type GetUsersNotificationConfResponse {
	Code int32                    `json:"iRet"`
	Msg  string                   `json:"sMsg"`
	Data []UserNotificationConfig `json:"data"`
}

type SetUsersNotificationConfRequest {
	CommonParams
	NewNotification   *int64 `form:"new_notification,optional"` // 新消息通知：0 关闭 1开启
	ShowSenderContent *int64 `form:"show_sender_content,optional"` // 通知显示发送人消息：0 关闭 1开启
	Sounds            *int64 `form:"sounds,optional"` // 声音：0 关闭 1开启
	Vibrate           *int64 `form:"vibrate,optional"` // 振动：0 关闭 1开启
	Badges            *int64 `form:"badges,optional"` // 消息通知横幅：0 关闭 1开启
}

type BindStatus {
	Account int64 `json:"account"`
	Google  int64 `json:"google"`
	Apple   int64 `json:"apple"`
	Diy     int64 `json:"diy"`
	Quick   int64 `json:"quick"`
}

type BindListRes {
	Bind    BindStatus `json:"bind"`
	Account string     `json:"account"`
	Pwd     int64      `json:"pwd"`
	PhoneNo string     `json:"phoneNo"`
	DiyNo   string     `json:"diyNo"`
	GEmail  string     `json:"gEmail"`
	AEmail  string     `json:"aEmail"`
}

type SearchReq {
	CommonParams
	Keywords string `form:"keywords,optional"`
}

type SearchInfo {
	Id         string `json:"id"` // 弃用
	UserId     string `json:"user_id"` // 用户ID
	Nick       string `json:"nick"` // 昵称
	Status     string `json:"status"` // (弃用)状态
	Age        string `json:"age"` // （弃用）年龄
	Avatar     string `json:"avatar"` // 小头像
	ActiveTime string `json:"active_time"` // 最后登录时间
	Sex        string `json:"sex"` // （弃用）性别
	Level      string `json:"level"` // 弃用
	Desc       string `json:"desc"` // 简介
	MidUnique  string `json:"mid_unique"` // 弃用
	BigAvatar  string `json:"big_avatar"` // 大头像
	Address    string `json:"address"` // 钱包地址
}

type SearchResp {
	Users []SearchInfo `json:"user"`
}

type GetInfoByShareCodeReq {
	Code string `form:"code"`
}

type ShareCodeUInfo {
	Id     string `json:"id"` // 用户ID
	UserId string `json:"user_id"` // 用户ID
	Nick   string `json:"nick"` // 用户昵称
	Avatar string `json:"avatar"` // 用户头像
	Num    string `json:"num"` // 弃用
	Desc   string `json:"desc"` // 用户简介
}

type GetInfoByShareCodeResp {
	ShareCodeUInfo
}

type GetUsersOnlineInfoReq {
	CommonParams
	OUserIds string `form:"ouser_ids"` // 要查询的用户ids。548218,548218,548218
}

type OnlineInfo {
	Status         string `json:"status"` // online/offline/unshow
	OnLineLastTime string `json:"last_time"` // 最后在线秒级时间戳 0表示未知
	UserId         string `json:"user_id"` // 用户ID
}

type GetUsersOnlineInfoResp {
	OnlineInfos []OnlineInfo `json:"list"`
}

type GenerateWalletReq {
	CommonParams
	MneAddress string        `form:"mne_address"` // 钱包地址 0x6a75b116797cbadc47b8e5a918a87d5e7bebbfbb
	MneSign    string        `form:"mne_sign,optional"` // （弃用）明文签名信息 548235|0x6a75b116797cbadc47b8e5a918a87d5e7bebbfbb|1679469260997
	MneMsg     string        `form:"mne_msg,optional"` // （弃用）消息明文（钱包地址|时间戳） 0xca1f68142af0d417a8cdfa17b662c25fdbd5cffd1a7028184fd09d06b8e89dd36abdfe7d475872587ac922ebd07a4fca54887c12e19f2ef5258ecd32917644bb1c
	Anew       string        `form:"anew,optional"` // （弃用）重新创建钱包 0否 1是
	Pri        string        `form:"pri,optional"` // （弃用）加密后的私钥
	Pin        string        `form:"pin,optional"` // （弃用）加密后的pin
	OldPin     string        `form:"old_pin,optional"` // （弃用）原始pin md5
	Code       string        `form:"code,optional"` // （弃用）验证码
	Extend     []interface{} `form:"extend,optional"` // 多链钱包信息 json字符串 [{"chain":2000000,"wallet":"xxxxxx"},{"chain":3000000,"wallet":"aaaaa"}]
}

type ExtendInfo {
	Wallet string `json:"wallet"` // 钱包
	Chain  string `json:"chain"` // 链
}

type GenerateWalletResp {}

type UnbindWalletReq {
	CommonParams
}

type UnbindWalletResp {}

type FeedbackReq {
	CommonParams
	Module       string `form:"module":"module,options=user|club|dapp|dynamic|im|feedback"` // 举报与反馈, user:用户 club:部落 dapp:应用 dynamic:动态 im:聊天imid feedback:反馈（我的-投诉反馈）
	Desc         string `form:"desc,optional"` // 反馈描述
	RelationId   string `form:"relation_id"` // 与module相关ID,user:用户ID、club:部落ID、dapp:应用ID、dynamic:动态ID（did,duid）、im:聊天的Imid，feedback:0
	FeedBackType int64  `form:"feedback_type"` // 类型,1:注册与登录 2:消息聊天 3:钱包账户 4:部落与房间 5:红包与转账 6:社区动态 7:助记词备份 8:其他
	Email        string `form:"email,optional"` // 联系邮箱
	images       string `form:"images,optional"` // 图片,多个图片用逗号隔开
}

@server (
	middleware: UniUserAuth
	group:      user
	prefix:     user
)
service mimoapi {
	@doc "获取用户信息、配置"
	@handler getUsers
	post /usersinfo (GetUsersRequest) returns (CommonJsonResp)

	@doc "设置用户信息、配置"
	@handler setUser
	post /setUser (SetUserRequest) returns (CommonJsonResp)

	@doc "根据分享码获取用户信息"
	@handler GetInfoByShareCode
	post /getInfoByShareCode (GetInfoByShareCodeReq) returns (GetInfoByShareCodeResp)

	@doc "获取用户在线状态信息"
	@handler GetUsersOnlineInfo
	post /getUsersOnlineInfo (GetUsersOnlineInfoReq) returns (GetUsersOnlineInfoResp)

	@doc "获取消息通知配置"
	@handler getUsersNotificationConf
	post /usersNotification (GetUsersNotificationConfRequest) returns (CommonJsonResp)

	@doc "设置消息通知配置"
	@handler setUsersNotificationConf
	post /setUsersNotification (SetUsersNotificationConfRequest) returns (CommonJsonResp)

	@doc "用户搜索"
	@handler Search
	post /search (SearchReq) returns (SearchResp)

	@doc "创建钱包"
	@handler GenerateWallet
	post /generateWallet (GenerateWalletReq) returns (GenerateWalletResp)

	@doc "解绑钱包"
	@handler UnbindWallet
	post /unbindWallet (UnbindWalletReq) returns (UnbindWalletResp)

	@doc "用户反馈"
	@handler Feedback
	post /feedback (FeedbackReq) returns (CommonJsonResp)
}

type GetFeedbackListReq {
	CommonParams
	Page int64 `form:"page,default=1"`
	Size int64 `form:"size,default=50"`
}

type Feedback {
	Id                 string   `json:"id"` // 反馈id
	User               UserInfo `json:"user_info"` // 反馈者uid
	OUser              UserInfo `json:"ouser_info"` // 被反馈者信息
	Type               string   `json:"type"` // 反馈类型
	Desc               string   `json:"desc"` // 用户描述
	Images             string   `json:"images"` // 用户上传的图片，多张逗号分隔
	Ctime              string   `json:"ctime"` // 举报时间
	Status             string   `json:"status"` // 0未处理 1冻结中 2已解冻
	OUserFeedbackTotal string   `json:"ouser_feedback_total"` // 用户总被反馈次数
	OUserFeedbackToday string   `json:"ouser_feedback_today"` // 用户当天反馈次数
}

type GetFeedbackListResp {
	List []Feedback `json:"list"`
}

type GetViolationListReq {
	CommonParams
	Page int64 `form:"page":"page,default=1"`
	Size int64 `form:"size,default=50"`
	Type int64 `form:"type,default=4"` // 1:部落 2:房间 3:群组 4:用户 5:动态
}

type Violation {
	Id           string   `json:"id"` // 违规id
	User         UserInfo `json:"user_info"` // 违规者uid
	Reason       string   `json:"reason"` // 违规原因
	BanStartTime string   `json:"ban_start_time"` // 冻结开始时间
	BanEndTime   string   `json:"ban_end_time"` // 冻结结束时间
	Status       string   `json:"status"` // 0正常 1冻结中
	OptUser      UserInfo `json:"opt_user"` // 操作的管理员
	OptAt        string   `json:"opt_at"` // 管理员操作的时间
}

type GetViolationListResp {
	List []Violation `json:"list"`
}

type BanReq {
	CommonParams
	RelationId string `form:"relation_id"` // type对应的id
	Reason     string `form:"reason,optional"` // 封禁原因
	OptType    int64  `form:"opt_type"` // 操作类型,1:冻结 2:解冻
	BanType    int64  `form:"ban_type,default=4"` // // 1:部落tb_mid 2:房间imid 3:群组imid 4:用户user_id 5:动态 did,duid
	OptUid     int64  `form:"opt_uid"` //  管理后台操作员
	BanEndTime string `form:"ban_end_time"` // 冻结结束时间
}

type BanUserResp {}

// 管理后台
@server (
	middleware: AdminAuth
	group:      admin
	prefix:     /adminuser
)
service mimoapi {
	@doc "获取反馈列表"
	@handler getFeedbackList
	post /getFeedbackList (GetFeedbackListReq) returns (GetFeedbackListResp)

	@doc "获取违规用户列表"
	@handler getViolationList
	post /getViolationList (GetViolationListReq) returns (GetViolationListResp)

	@doc "冻结用户"
	@handler banUser
	post /banUser (BanReq) returns (BanUserResp)
}

