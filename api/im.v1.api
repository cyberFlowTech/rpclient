//api 语法版本
syntax = "v1"

//介绍
info (
	title:   "infras imservice公共服务"
	desc:    "imservice用户管理，群组管理，消息推送"
	author:  "ron"
	email:   "huangrongpeng@infras.tech"
	version: "v0.1"
	date:    "2023-06-12"
)

//http抽象的rpc封装
type (
	UserAuthBase {
		Clientid     string `form:"clientid"`
		Clientsecret string `form:"clientsecret"`
	}
	GrpcProxyReq {
		UserBase UserAuthBase `form:"userbase"`
		MsgName  string       `form:"msgname"`
		Data     []byte       `form:"data"`
	}
	GrpcProxyRes {
		Ret     int    `form:"ret"`
		MsgName string `form:"msgname"`
		Data    []byte `form:"data"`
	}
	// callback
	CallbackPayload {
		Bodies []map[string]interface{} `json:"bodies"`
		Ext    map[string]interface{}   `json:"ext,optional"`
		From   string                   `json:"from,optional"`
		To     string                   `json:"to,optional"`
	}
	CallbackReq {
		CallId          string           `json:"callId"`
		EventType       string           `json:"eventType,optional,default="`
		Timestamp       uint64           `json:"timestamp"`
		ChatType        string           `json:"chat_type"`
		GroupId         string           `json:"group_id,optional"`
		From            string           `json:"from"`
		To              string           `json:"to"`
		MsgId           string           `json:"msg_id"`
		Payload         *CallbackPayload `json:"payload"`
		SecurityVersion string           `json:"securityVersion,optional"`
		Security        string           `json:"security"`
	}
	CallbackRes {
		Valid   bool             `json:"valid"`
		Code    string           `json:"code"`
		Payload *CallbackPayload `json:"payload"`
	}
	// getKeyByVersion
	GetKeyByVersionReq {
		CommonReq
		KeyVersion int `form:"key_version,optional"`
		// SenderId   string `form:"sender_id"`
		MapId string `form:"map_id"`
	}
	// md5(key+senderid+mapId+version)
	GetKeyByVersionRes {
		KeyVersion int    `form:"key_version"`
		Key        string `form:"key"`
	}
	// 公共请求参数 所有接口都有的
	CommonReq {
		UserId      int64  `form:"user_id"`
		SessId      string `form:"sessid"`
		Api         string `form:"api"`
		Version     string `form:"version"`
		VersionCode string `form:"version_code"`
		Uuid        string `form:"uuid"`
		Lan         string `form:"lan"`
		Sign        string `form:"sign"`
		SignTime    int64  `form:"sign_time"`
	}
	// 无data响应
	NoDataRes   {}
	GetImTokenRes {
		AccessToken string `json:"access_token"`
		ExpiresIn   int64  `json:"expires_in"`
	}
	GetGroupInfoReq {
		CommonReq
		GroupUniqid    string `form:"group_uniqid,optional,default="`
		MapId          string `form:"map_id,optional,default="`
		GetMembers     int32  `form:"get_members,optional,default=1"`
		GetUserSetting int32  `form:"get_user_setting,optional,default=1"`
	}
	GetGroupInfoRes {
		GroupInfo map[string]*GetGroupInfo `json:"group_info"`
	}
	GetGroupInfo {
		Uniqid      string              `json:"uniqid"`       // 服务端唯一id
		MapId       string              `json:"map_id"`       // 群聊Id（第三方IM生成的）
		UserId      string              `json:"user_id"`      // 群主Id
		Name        string              `json:"name"`         // 群名称
		Desc        string              `json:"desc"`         // 群介绍
		Avatar      string              `json:"avatar"`       // 群头像
		Ctime       int64               `json:"ctime"`        // 创建时间
		IsBan       string              `json:"is_ban"`       // 是否禁言 0否 1是
		IsDel       string              `json:"is_del"`       // 是否删除 0否 1是
		IsBlock     string              `json:"is_block"`     // 管理员封禁 0否 1是
		IsClean     string              `json:"is_clean"`     // 是否清理消息 0否 1是
		CleanTime   string              `json:"clean_time"`   // 清理时间 单位：分钟
		GroupNotice string              `json:"group_notice"` // 群公告
		Type        int64               `json:"type"`         // 群类型：频道： 0文字 1语音（废弃） 2应用，普通群聊 固定为 1
		IsChannel   bool                `json:"is_channel"`   // 是否频道
		Property    int64               `json:"property"`     // 0:持有数字货币，1:持有数字藏品,2:无限制
		Chain       int64               `json:"chain"`        // 所属链
		Coins       float64             `json:"coins"`        // 限制额度
		Sort        int64               `json:"sort"`         // 排序
		Frozen      int64               `json:"frozen"`       // 用户状态 0正常 1锁定 2冻结
		Id          string              `json:"id"`           // 频道id，数据库自增
		TbMid       string              `json:"tb_mid"`       // 关联部落id
		TbZid       string              `json:"tb_zid"`       // 关联分钟id
		InMember    int64               `json:"in_member"`    // 是否在群 0 否 1 是
		Notice      int64               `json:"notice"`       // 消息免打扰 0否 1是
		Bookmark    int64               `json:"bookmark"`     // 是否保存通讯录 0否 1是
		IsTop       int64               `json:"is_top"`       // 是否置顶 0否 1是
		Gnick       string              `json:"gnick"`        // 群组中昵称
		Dapp        *GroupInfoDapp      `json:"dapp"`         // 应用信息
		UserInfo    *GroupInfoUserInfo  `json:"userInfo"`     // 群主信息
		Members     []*GroupInfoMembers `json:"members"`      // 成员信息
		Manages     []*GroupInfoManages `json:"managers"`     // 管理员信息
		GroupType   int64               `json:"group_type"`
		//             Icon        string              `json:"icon"`         // 兼容频道头像
	}
	GroupInfoDapp {
		DappId     int64  `json:"dapp_id"`
		DappIcon   string `json:"dapp_icon"`
		DappName   string `json:"dapp_name"`
		DappUrl    string `json:"dapp_url"`
		IsDel      int64  `json:"is_del"`
		DappDesc   string `json:"dapp_desc"`
		UserId     int64  `json:"user_id"`
		IsOfficial int64  `json:"is_official"`
	}
	GroupInfoUserInfo {
		UserId    string `json:"user_id"`
		Nick      string `json:"nick"`
		Status    int32  `json:"status"` // 用户状态 0正常 1冻结 2平台禁用
		Avatar    string `json:"avatar"`
		Desc      string `json:"desc"`
		BigAvatar string `json:"big_avatar"`
	}
	GroupInfoMembers {
		UserId  string `json:"user_id"`
		Nick    string `json:"nick"`
		Avatar  string `json:"avatar"`
		Status  int32  `json:"status"`  // 群状态 0：正常，1：冻结；2:删除
		Gnick   string `json:"gnick"`   // 群组中昵称
		Remarks string `json:"remarks"` // 备注
	}
	GroupInfoManages {
		UserId int64  `json:"user_id"`
		Nick   string `json:"nick"`
		Avatar string `json:"avatar"`
	}
	CreateGroupReq {
		CommonReq
		FriendId string `form:"friend_id"`
	}
	SetGroupManageReq {
		CommonReq
		MapId       string `form:"map_id,optional,default="`
		Type        int    `form:"type,range=[1:2]"`                 // 1添加， 2删除
		GroupUniqid string `form:"group_uniqid,optional,default="` // 兼容uniapp
		ManageId    int64  `form:"manage_id"`                        // 管理员id
	}
	InGroupReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
		Ouid        int64  `form:"ouid,optional,default=0"`
	}
	InGroupRes {
		Status int           `json:"status"` // 0 加入成功 1 用户已存在
		Group  *GetGroupInfo `json:"group"`
	}
	OutGroupReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
	}
	MoveGroupReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
		Ouid        string `form:"ouid"`
	}
	// 设置名称，介绍
	SetGroupInfoReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
		Type        int    `form:"type,optional"`
		Name        string `form:"name,optional,default="`
		Desc        string `form:"desc,optional,default="`
	}
	BanGroupReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
		Type        int    `form:"type,range=[1:2]"` // 1开启2关闭
	}
	// 群消息清理
	SetGroupCleanReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
		Type        int    `form:"type,range=[1:2]"`  // 1开启2关闭
		MinTime     int64  `form:"min_time,optional"` // 自动清理聊天记录的时间，分钟为单位
	}
	SetGroupNoticeReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
		Content     string `form:"content,optional,default="`
	}
	SetGroupOwnerReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
		Ouid        int64  `form:"ouid"`
	}
	GetGroupSettingsReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
	}
	GetGroupSettingsRes {
		Setting []*GroupSettingInfo `json:"setting"`
	}
	GroupSettingInfo {
		GroupUniqid string `json:"group_uniqid"`
		Gag         int64  `json:"gag"`
		CanSend     int64  `json:"can_send"`
		IsClean     int64  `json:"is_clean"`
		MsgTime     int64  `json:"msg_time"` // 此时间之前的聊天记录不显示
		CleanTime   int64  `json:"clean_time"`
	}
	GetGroupMembersReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
	}
	GetGroupMembersRes {
		List map[string][]*GroupInfoMembers `json:"data"`
	}
	SetBookReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
		Type        int    `form:"type,range=[1:2]"` // 1添加2删除
	}
	SetNoticeReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
		Type        int    `form:"type,range=[1:2]"` // 1开启2关闭
	}
	GetNoticeReq {
		CommonReq
		MapId string `form:"map_id,optional"` // "多个会话ID，用，分割"
	}
	GetNoticeRes {
		List []string `json:"data"`
	}
	SetUserNickReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
		Gnick       string `form:"gnick,optional,default="`
	}
	SaveGroupDappReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
		DappId      int64  `form:"dapp_id,optional,default=0"`
		Icon        string `form:"icon,optional,default="`
		Name        string `form:"name,optional,default="`
		Desc        string `form:"desc,optional,default="`
		Url         string `form:"url,optional,default="`
	}
	GetGroupDappListReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
		Page        int64  `form:"page,optional,default=1"`
	}
	DappListItem {
		DappId   int64  `json:"id"`
		DappIcon string `json:"icon"`
		DappName string `json:"name"`
		DappUrl  string `json:"url"`
		IsDel    int64  `json:"is_del"`
	}
	GetGroupDappListRes {
		List  []*DappListItem `json:"list"`
		Page  int64           `json:"page"`
		Count int64           `json:"count"`
	}
	DelGroupDappReq {
		CommonReq
		GroupUniqid string `form:"group_uniqid,optional,default="`
		MapId       string `form:"map_id,optional,default="`
		DappId      int64  `form:"id,optional,default=0"`
	}
	GetUserOldGroupRes {
		List []*OldGroupItme `json:"list"`
	}
	OldGroupItme {
		MapId string `json:"map_id"`
		TbMid int64  `json:"tb_mid"`
	}
	UploadEmojiReq {
		CommonReq
		Url    string `form:"url"` // 表情地址
		Width  string `form:"width"`
		Height string `form:"height"`
		Size   string `form:"size"`
		Cover  string `form:"cover,optional,default="` // 展示图，一般是gif的首帧
	}
	UploadEmojiRes {
		EmojiId int64 `json:"emoji_id"`
	}
	CollectEmojiReq {
		CommonReq
		EmojiId int64  `form:"emoji_id,optional,default=0"`
		TbMid   string `form:"tb_mid,optional,default="`
		Url     string `form:"url,optional,default="`
	}
	DelEmojiReq {
		CommonReq
		EmojiId string `form:"emoji_id"` // 多个使用,隔开
		TbMid   string `form:"tb_mid,optional,default="`
	}
	SortEmojiReq {
		CommonReq
		MoveId   string `form:"move_id"`   // 要移动的列表 , 分隔多个
		TargetId int64  `form:"target_id"` // 目标位置Id
	}
	GetEmojiListReq {
		CommonReq
		TbMid string `form:"tb_mid,optional,default="` // 部落加密id，空和不传代表查询用户的
		Page  int64  `form:"page,optional,range=[1:20]"`
	}
	GetEmojiListRes {
		List  []*EmojiListItem `json:"list"`
		Pages int64            `json:"pages"`
		Count int64            `json:"count"`
	}
	EmojiListItem {
		EmojiId int64  `json:"emoji_id"`
		Url     string `json:"url"`
		Width   string `json:"width"`
		Height  string `json:"height"`
		Size    string `json:"size"`
		Cover   string `json:"cover"`
	}
	UserImTokenRes {
		AccessToken string `json:"access_token"`
		ExpiresIn   int64  `json:"expires_in"`
	}
	OpenImCallbackReq {
		AtUserList       []string `json:"atUserList,optional"`
		CallbackCommand  string   `json:"callbackCommand"`
		ClientMsgID      string   `json:"clientMsgID,optional"`
		Content          string   `json:"content,optional"`
		ContentType      int64    `json:"contentType,optional"`
		CreateTime       int64    `json:"createTime,optional"`
		Ex               string   `json:"ex,optional"`
		FaceURL          string   `json:"faceURL,optional"`
		MsgFrom          int64    `json:"msgFrom,optional"`
		RecvID           string   `json:"recvID,optional"`
		SendID           string   `json:"sendID,optional"`
		SenderNickname   string   `json:"senderNickname,optional"`
		SenderPlatformID int64    `json:"senderPlatformID,optional"`
		Seq              int64    `json:"seq,optional"`
		ServerMsgID      string   `json:"serverMsgID,optional"`
		SessionType      int64    `json:"sessionType,optional"`
		Status           int64    `json:"status,optional"`
		GroupID          string   `json:"groupId,optional"`
	}
	OpenImCallbackRes {
		ActionCode int64  `json:"actionCode"`
		ErrCode    int64  `json:"errCode"`
		ErrDlt     string `json:"errDlt"`
		ErrMsg     string `json:"errMsg"`
		NextCode   int64  `json:"nextCode"`
	}

	AgoraCallbackReq {
		NoticeId  string                 `json:"noticeId"`
		ProductId int64                  `json:"productId"`
		EventType int                    `json:"eventType"`
		NotifyMs  int64                  `json:"notifyMs"`
		Sid       string                 `json:"sid,optional"`
		Payload   map[string]interface{} `json:"payload"`
	}
	//CloudFront sign
	GetCloudFrontSignReq {
		CommonReq
		SignType int64  `form:"signType"` //0 cookieSign,1 urlSign
		SignUrl  string `form:"signUrl"`  //url & path to sign
		Expire   int64  `form:"expire"`   //expire in seconds
	}
	GetCloudFrontSignRes {
		SignType  int64             `json:"signType"`
		SignedUrl string            `json:"signUrl,optional"`
		Cookies   map[string]string `json:"cookies,optional"`
	}
	MuteGroupUserReq {
		CommonReq
		MapId  string `form:"map_id,optional"`
		Type   int64  `form:"type,range=[1:2]"` //1 禁言 2 解除禁言
		Ouid   int64  `form:"ouid"`
		Uniqid string `form:"uniqid,optional"`
	}
	VoiceCallReq {
		CommonReq
		ImId  string `form:"im_id,optional"`   // 会话Id
		Type  int    `form:"type,range=[1:3]"` //  1单聊 2群组 3频道
		Ouid  string `form:"ouid,optional"`    // 群聊可不传
		TbMid string `form:"tb_mid,optional"`
		TbZid string `form:"tb_zid,optional"`
		TbCid string `form:"tb_cid,optional"`
	}
	VoiceCallRes {
		Cid   string `json:"c_id"` // 房间id
		Token string `json:"token"`
	}
	VoiceAcceptReq {
		CommonReq
		Cid string `form:"c_id"`
	}
	VoiceAcceptRes {
		Token string `json:"token"`
	}
	VoiceCancelReq {
		CommonReq
		Cid string `form:"c_id"`
	}
	VoiceRejectReq {
		CommonReq
		Cid string `form:"c_id"`
	}
	VoiceLeaveReq {
		CommonReq
		Cid  string `form:"c_id"`
		Ouid int64  `form:"ouid,optional"`
	}
	MsgRecallReq {
		CommonReq
		TbMid      string `form:"tb_mid,optional"`
		Ouid       int64  `form:"ouid"`       // 消息发送者
		Type       string `form:"type"`       // 会话类型 chat ：单聊 ，groupchat：群聊
		TargetId   string `form:"targetId"`   // 会话id
		MessageUID string `form:"messageUID"` // 消息id
	}
	MsgRecallRes {
		User  *MsgRecallResItem `json:"user"`
		OUser *MsgRecallResItem `json:"o_user"`
	}
	MsgRecallResItem {
		UserId string `json:"user_id"`
		Nick   string `json:"nick"`
	}
)

@server (
	//jwt: Auth                 //开启jwt鉴权
	middleware: MessageStatisticHandle //路由中间件声明
	group:      imservice //接口所属组
	prefix:     imservice/v1 //路由公共前缀
)
service imservice {
	@doc "imservice回调"
	@handler callback
	post /callback (CallbackReq) returns (CallbackRes)
}

@server (
	//jwt: Auth                 //开启jwt鉴权
	//      middleware: MessageStatisticHandle    //路由中间件声明
	group:  imservice //接口所属组
	prefix: imservice/v1 //路由公共前缀
)
service imservice {
	@doc "imservice回调"
	@handler openimCallback
	post /openimCallback (OpenImCallbackReq) returns (OpenImCallbackRes)
}

@server(
	//jwt: Auth                 //开启jwt鉴权
	middleware: AgoraBeforeHandle    //路由中间件声明
	group: imservice                   //接口所属组
	prefix: imservice/v1              //路由公共前缀
)
service imservice {
	@doc "声网回调"
	@handler agoraCallback
	post /agoraCallback (AgoraCallbackReq) returns (NoDataRes)
}

@server(
	//jwt: Auth                 //开启jwt鉴权
	middleware: BeforeHandle    //路由中间件声明
	group: imservice                   //接口所属组
	prefix : imservice/v1              //路由公共前缀
)
service imservice {
	@doc "imservice获取会话密钥"
	@handler getKeyByVersion
	post /getKeyByVersion (GetKeyByVersionReq) returns (GetKeyByVersionRes)

	@doc "获取环信token"
	@handler getImToken
	post /getImToken (CommonReq) returns (GetImTokenRes)

	@doc "获取群信息"
	@handler GetGroupInfo
	post /GetGroupInfo (GetGroupInfoReq) returns (GetGroupInfoRes)

	@doc "获取群信息V1"
	@handler GetGroupInfoV1
	post /GetGroupInfoV1 (GetGroupInfoReq) returns (GetGroupInfoRes)

	@doc "创建群"
	@handler CreateGroup
	post /CreateGroup (CreateGroupReq) returns (GetGroupInfo)

	@doc "设置群管理员"
	@handler SetGroupManage
	post /SetGroupManage (SetGroupManageReq) returns (NoDataRes)

	@doc "加入群聊"
	@handler InGroup
	post /InGroup (InGroupReq) returns (InGroupRes)

	@doc "退出群聊"
	@handler OutGroup
	post /OutGroup (OutGroupReq) returns (NoDataRes)

	@doc "移除群聊"
	@handler MoveGroup
	post /MoveGroup (MoveGroupReq) returns (NoDataRes)

	@doc "设置群资料"
	@handler SetGroupInfo
	post /SetGroupInfo (SetGroupInfoReq) returns (NoDataRes)

	@doc "群禁言"
	@handler BanGroup
	post /BanGroup (BanGroupReq) returns (NoDataRes)

	@doc "设置群消息清理"
	@handler SetGroupClean
	post /SetGroupClean (SetGroupCleanReq) returns (NoDataRes)

	@doc "设置群公告"
	@handler SetGroupNotice
	post /SetGroupNotice (SetGroupNoticeReq) returns (NoDataRes)

	@doc "转让群主"
	@handler SetGroupOwner
	post /SetGroupOwner (SetGroupOwnerReq) returns (NoDataRes)

	@doc "群设置"
	@handler GetGroupSettings
	post /GetGroupSettings (GetGroupSettingsReq) returns (GetGroupSettingsRes)

	@doc "群成员-按昵称首字母排序"
	@handler GetGroupMembers
	post /GetGroupMembers (GetGroupMembersReq) returns (GetGroupMembersRes)

	@doc "群聊-记录邀请好友加群链接"
	@handler CreateLink
	post /CreateLink (CommonReq) returns (NoDataRes)

	@doc "群聊-检验链接有效性"
	@handler CheckLink
	post /CheckLink (CommonReq) returns (NoDataRes)

	@doc "保存群到通讯录"
	@handler SetBook
	post /SetBook (SetBookReq) returns (NoDataRes)

	@doc "设置免打扰"
	@handler SetNotice
	post /SetNotice (SetNoticeReq) returns (NoDataRes)

	@doc "获取免打扰单聊/群聊"
	@handler GetNotice
	post /GetNotice (GetNoticeReq) returns (GetNoticeRes)

	@doc "设置我在群中的昵称"
	@handler SetUserNick
	post /SetUserNick (SetUserNickReq) returns (NoDataRes)

	@doc "保存群应用"
	@handler SaveGroupDapp
	post /SaveGroupDapp (SaveGroupDappReq) returns (NoDataRes)

	@doc "获取群应用列表"
	@handler GetGroupDappList
	post /GetGroupDappList (GetGroupDappListReq) returns (GetGroupDappListRes)

	@doc "删除群应用"
	@handler DelGroupDapp
	post /DelGroupDapp (DelGroupDappReq) returns (NoDataRes)

	@doc "获取用户旧id规则群聊"
	@handler GetUserOldGroup
	post /GetUserOldGroup (CommonReq) returns (GetUserOldGroupRes)

	@doc "上传表情包"
	@handler UploadEmoji
	post /UploadEmoji (UploadEmojiReq) returns (UploadEmojiRes)

	@doc "收藏表情包"
	@handler CollectEmoji
	post /CollectEmoji (CollectEmojiReq) returns (NoDataRes)

	@doc "删除表情包"
	@handler DelEmoji
	post /DelEmoji (DelEmojiReq) returns (NoDataRes)

	@doc "表情包排序"
	@handler SortEmoji
	post /SortEmoji (SortEmojiReq) returns (NoDataRes)

	@doc "获取表情包列表"
	@handler GetEmojiList
	post /GetEmojiList (GetEmojiListReq) returns (GetEmojiListRes)

	@doc "获取表情包列表"
	@handler GetUserImToken
	post /GetUserImToken (CommonReq) returns (UserImTokenRes)

	@doc "获取CloudFront Cookies签名"
	@handler GetCloudFrontSign
	post /GetCloudFrontSign (GetCloudFrontSignReq) returns (GetCloudFrontSignRes)

	@doc "群用户禁言"
	@handler MuteGroupUser
	post /MuteGroupUser (MuteGroupUserReq) returns (NoDataRes)

	@doc "语音呼叫"
	@handler VoiceCall
	post /VoiceCall (VoiceCallReq) returns (VoiceCallRes)

	@doc "语音接听"
	@handler VoiceAccept
	post /VoiceAccept (VoiceAcceptReq) returns (VoiceAcceptRes)

	@doc "取消呼叫"
	@handler VoiceCancel
	post /VoiceCancel (VoiceCancelReq) returns (NoDataRes)

	@doc "拒绝接听"
	@handler VoiceReject
	post /VoiceReject (VoiceRejectReq) returns (NoDataRes)

	@doc "退出语音"
	@handler VoiceLeave
	post /VoiceLeave (VoiceLeaveReq) returns (NoDataRes)

	@doc "消息撤回"
	@handler MsgRecall
	post /MsgRrecall (MsgRecallReq) returns (MsgRecallRes)
}