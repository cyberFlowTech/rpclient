// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: define/web3proxy.proto

package webTProxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebTProxy_GetBalance_FullMethodName        = "/webTProxy.webTProxy/getBalance"
	WebTProxy_GetTransactions_FullMethodName   = "/webTProxy.webTProxy/getTransactions"
	WebTProxy_SaveTransactions_FullMethodName  = "/webTProxy.webTProxy/saveTransactions"
	WebTProxy_GetContacts_FullMethodName       = "/webTProxy.webTProxy/getContacts"
	WebTProxy_GetWalletList_FullMethodName     = "/webTProxy.webTProxy/getWalletList"
	WebTProxy_InitWalletList_FullMethodName    = "/webTProxy.webTProxy/initWalletList"
	WebTProxy_GetWalletCount_FullMethodName    = "/webTProxy.webTProxy/getWalletCount"
	WebTProxy_WalletSearch_FullMethodName      = "/webTProxy.webTProxy/walletSearch"
	WebTProxy_GetTransLogByTxid_FullMethodName = "/webTProxy.webTProxy/getTransLogByTxid"
	WebTProxy_TokensAdd_FullMethodName         = "/webTProxy.webTProxy/tokensAdd"
	WebTProxy_TokensDel_FullMethodName         = "/webTProxy.webTProxy/tokensDel"
	WebTProxy_TokensSort_FullMethodName        = "/webTProxy.webTProxy/tokensSort"
	WebTProxy_UserTokensList_FullMethodName    = "/webTProxy.webTProxy/userTokensList"
	WebTProxy_SyncTokenInfo_FullMethodName     = "/webTProxy.webTProxy/syncTokenInfo"
	WebTProxy_SymbolList_FullMethodName        = "/webTProxy.webTProxy/symbolList"
	WebTProxy_TransLog_FullMethodName          = "/webTProxy.webTProxy/transLog"
	WebTProxy_TransactionDetail_FullMethodName = "/webTProxy.webTProxy/transactionDetail"
	WebTProxy_SendTransaction_FullMethodName   = "/webTProxy.webTProxy/sendTransaction"
	WebTProxy_TokensModify_FullMethodName      = "/webTProxy.webTProxy/tokensModify"
	WebTProxy_MainTokenList_FullMethodName     = "/webTProxy.webTProxy/mainTokenList"
)

// WebTProxyClient is the client API for WebTProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebTProxyClient interface {
	GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error)
	GetTransactions(ctx context.Context, in *GetTransactionListReq, opts ...grpc.CallOption) (*GetTransactionListResp, error)
	SaveTransactions(ctx context.Context, in *SaveTransactionsReq, opts ...grpc.CallOption) (*SaveTransactionsResp, error)
	GetContacts(ctx context.Context, in *GetContactsReq, opts ...grpc.CallOption) (*GetContactsResp, error)
	GetWalletList(ctx context.Context, in *GetWalletListReq, opts ...grpc.CallOption) (*GetWalletListResp, error)
	InitWalletList(ctx context.Context, in *InitWalletListReq, opts ...grpc.CallOption) (*InitWalletListResp, error)
	GetWalletCount(ctx context.Context, in *GetWalletCountReq, opts ...grpc.CallOption) (*GetWalletCountResp, error)
	WalletSearch(ctx context.Context, in *WalletSearchReq, opts ...grpc.CallOption) (*WalletSearchResp, error)
	GetTransLogByTxid(ctx context.Context, in *GetTransLogByTxidReq, opts ...grpc.CallOption) (*TransactionInfo, error)
	TokensAdd(ctx context.Context, in *TokensAddReq, opts ...grpc.CallOption) (*TokensAddResp, error)
	TokensDel(ctx context.Context, in *TokensDelReq, opts ...grpc.CallOption) (*TokensDelResp, error)
	TokensSort(ctx context.Context, in *TokensSortReq, opts ...grpc.CallOption) (*TokensSortResp, error)
	UserTokensList(ctx context.Context, in *UserTokensListReq, opts ...grpc.CallOption) (*UserTokensListResp, error)
	SyncTokenInfo(ctx context.Context, in *SyncTokenInfoReq, opts ...grpc.CallOption) (*SyncTokenInfoResp, error)
	SymbolList(ctx context.Context, in *SymbolListReq, opts ...grpc.CallOption) (*SymbolListResp, error)
	TransLog(ctx context.Context, in *GetTransactionListReq, opts ...grpc.CallOption) (*GetTransactionListResp, error)
	TransactionDetail(ctx context.Context, in *GetTransactionDetailReq, opts ...grpc.CallOption) (*GetTransactionDetailResp, error)
	SendTransaction(ctx context.Context, in *SendTransactionReq, opts ...grpc.CallOption) (*SendTransactionResp, error)
	TokensModify(ctx context.Context, in *TokenModifyReq, opts ...grpc.CallOption) (*TokenModifyResp, error)
	MainTokenList(ctx context.Context, in *GetMainTokenReq, opts ...grpc.CallOption) (*GetMainTokenResp, error)
}

type webTProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewWebTProxyClient(cc grpc.ClientConnInterface) WebTProxyClient {
	return &webTProxyClient{cc}
}

func (c *webTProxyClient) GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error) {
	out := new(GetBalanceResp)
	err := c.cc.Invoke(ctx, WebTProxy_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) GetTransactions(ctx context.Context, in *GetTransactionListReq, opts ...grpc.CallOption) (*GetTransactionListResp, error) {
	out := new(GetTransactionListResp)
	err := c.cc.Invoke(ctx, WebTProxy_GetTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) SaveTransactions(ctx context.Context, in *SaveTransactionsReq, opts ...grpc.CallOption) (*SaveTransactionsResp, error) {
	out := new(SaveTransactionsResp)
	err := c.cc.Invoke(ctx, WebTProxy_SaveTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) GetContacts(ctx context.Context, in *GetContactsReq, opts ...grpc.CallOption) (*GetContactsResp, error) {
	out := new(GetContactsResp)
	err := c.cc.Invoke(ctx, WebTProxy_GetContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) GetWalletList(ctx context.Context, in *GetWalletListReq, opts ...grpc.CallOption) (*GetWalletListResp, error) {
	out := new(GetWalletListResp)
	err := c.cc.Invoke(ctx, WebTProxy_GetWalletList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) InitWalletList(ctx context.Context, in *InitWalletListReq, opts ...grpc.CallOption) (*InitWalletListResp, error) {
	out := new(InitWalletListResp)
	err := c.cc.Invoke(ctx, WebTProxy_InitWalletList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) GetWalletCount(ctx context.Context, in *GetWalletCountReq, opts ...grpc.CallOption) (*GetWalletCountResp, error) {
	out := new(GetWalletCountResp)
	err := c.cc.Invoke(ctx, WebTProxy_GetWalletCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) WalletSearch(ctx context.Context, in *WalletSearchReq, opts ...grpc.CallOption) (*WalletSearchResp, error) {
	out := new(WalletSearchResp)
	err := c.cc.Invoke(ctx, WebTProxy_WalletSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) GetTransLogByTxid(ctx context.Context, in *GetTransLogByTxidReq, opts ...grpc.CallOption) (*TransactionInfo, error) {
	out := new(TransactionInfo)
	err := c.cc.Invoke(ctx, WebTProxy_GetTransLogByTxid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) TokensAdd(ctx context.Context, in *TokensAddReq, opts ...grpc.CallOption) (*TokensAddResp, error) {
	out := new(TokensAddResp)
	err := c.cc.Invoke(ctx, WebTProxy_TokensAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) TokensDel(ctx context.Context, in *TokensDelReq, opts ...grpc.CallOption) (*TokensDelResp, error) {
	out := new(TokensDelResp)
	err := c.cc.Invoke(ctx, WebTProxy_TokensDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) TokensSort(ctx context.Context, in *TokensSortReq, opts ...grpc.CallOption) (*TokensSortResp, error) {
	out := new(TokensSortResp)
	err := c.cc.Invoke(ctx, WebTProxy_TokensSort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) UserTokensList(ctx context.Context, in *UserTokensListReq, opts ...grpc.CallOption) (*UserTokensListResp, error) {
	out := new(UserTokensListResp)
	err := c.cc.Invoke(ctx, WebTProxy_UserTokensList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) SyncTokenInfo(ctx context.Context, in *SyncTokenInfoReq, opts ...grpc.CallOption) (*SyncTokenInfoResp, error) {
	out := new(SyncTokenInfoResp)
	err := c.cc.Invoke(ctx, WebTProxy_SyncTokenInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) SymbolList(ctx context.Context, in *SymbolListReq, opts ...grpc.CallOption) (*SymbolListResp, error) {
	out := new(SymbolListResp)
	err := c.cc.Invoke(ctx, WebTProxy_SymbolList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) TransLog(ctx context.Context, in *GetTransactionListReq, opts ...grpc.CallOption) (*GetTransactionListResp, error) {
	out := new(GetTransactionListResp)
	err := c.cc.Invoke(ctx, WebTProxy_TransLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) TransactionDetail(ctx context.Context, in *GetTransactionDetailReq, opts ...grpc.CallOption) (*GetTransactionDetailResp, error) {
	out := new(GetTransactionDetailResp)
	err := c.cc.Invoke(ctx, WebTProxy_TransactionDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) SendTransaction(ctx context.Context, in *SendTransactionReq, opts ...grpc.CallOption) (*SendTransactionResp, error) {
	out := new(SendTransactionResp)
	err := c.cc.Invoke(ctx, WebTProxy_SendTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) TokensModify(ctx context.Context, in *TokenModifyReq, opts ...grpc.CallOption) (*TokenModifyResp, error) {
	out := new(TokenModifyResp)
	err := c.cc.Invoke(ctx, WebTProxy_TokensModify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) MainTokenList(ctx context.Context, in *GetMainTokenReq, opts ...grpc.CallOption) (*GetMainTokenResp, error) {
	out := new(GetMainTokenResp)
	err := c.cc.Invoke(ctx, WebTProxy_MainTokenList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebTProxyServer is the server API for WebTProxy service.
// All implementations must embed UnimplementedWebTProxyServer
// for forward compatibility
type WebTProxyServer interface {
	GetBalance(context.Context, *GetBalanceReq) (*GetBalanceResp, error)
	GetTransactions(context.Context, *GetTransactionListReq) (*GetTransactionListResp, error)
	SaveTransactions(context.Context, *SaveTransactionsReq) (*SaveTransactionsResp, error)
	GetContacts(context.Context, *GetContactsReq) (*GetContactsResp, error)
	GetWalletList(context.Context, *GetWalletListReq) (*GetWalletListResp, error)
	InitWalletList(context.Context, *InitWalletListReq) (*InitWalletListResp, error)
	GetWalletCount(context.Context, *GetWalletCountReq) (*GetWalletCountResp, error)
	WalletSearch(context.Context, *WalletSearchReq) (*WalletSearchResp, error)
	GetTransLogByTxid(context.Context, *GetTransLogByTxidReq) (*TransactionInfo, error)
	TokensAdd(context.Context, *TokensAddReq) (*TokensAddResp, error)
	TokensDel(context.Context, *TokensDelReq) (*TokensDelResp, error)
	TokensSort(context.Context, *TokensSortReq) (*TokensSortResp, error)
	UserTokensList(context.Context, *UserTokensListReq) (*UserTokensListResp, error)
	SyncTokenInfo(context.Context, *SyncTokenInfoReq) (*SyncTokenInfoResp, error)
	SymbolList(context.Context, *SymbolListReq) (*SymbolListResp, error)
	TransLog(context.Context, *GetTransactionListReq) (*GetTransactionListResp, error)
	TransactionDetail(context.Context, *GetTransactionDetailReq) (*GetTransactionDetailResp, error)
	SendTransaction(context.Context, *SendTransactionReq) (*SendTransactionResp, error)
	TokensModify(context.Context, *TokenModifyReq) (*TokenModifyResp, error)
	MainTokenList(context.Context, *GetMainTokenReq) (*GetMainTokenResp, error)
	mustEmbedUnimplementedWebTProxyServer()
}

// UnimplementedWebTProxyServer must be embedded to have forward compatible implementations.
type UnimplementedWebTProxyServer struct {
}

func (UnimplementedWebTProxyServer) GetBalance(context.Context, *GetBalanceReq) (*GetBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedWebTProxyServer) GetTransactions(context.Context, *GetTransactionListReq) (*GetTransactionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedWebTProxyServer) SaveTransactions(context.Context, *SaveTransactionsReq) (*SaveTransactionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTransactions not implemented")
}
func (UnimplementedWebTProxyServer) GetContacts(context.Context, *GetContactsReq) (*GetContactsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (UnimplementedWebTProxyServer) GetWalletList(context.Context, *GetWalletListReq) (*GetWalletListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletList not implemented")
}
func (UnimplementedWebTProxyServer) InitWalletList(context.Context, *InitWalletListReq) (*InitWalletListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitWalletList not implemented")
}
func (UnimplementedWebTProxyServer) GetWalletCount(context.Context, *GetWalletCountReq) (*GetWalletCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletCount not implemented")
}
func (UnimplementedWebTProxyServer) WalletSearch(context.Context, *WalletSearchReq) (*WalletSearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletSearch not implemented")
}
func (UnimplementedWebTProxyServer) GetTransLogByTxid(context.Context, *GetTransLogByTxidReq) (*TransactionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransLogByTxid not implemented")
}
func (UnimplementedWebTProxyServer) TokensAdd(context.Context, *TokensAddReq) (*TokensAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokensAdd not implemented")
}
func (UnimplementedWebTProxyServer) TokensDel(context.Context, *TokensDelReq) (*TokensDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokensDel not implemented")
}
func (UnimplementedWebTProxyServer) TokensSort(context.Context, *TokensSortReq) (*TokensSortResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokensSort not implemented")
}
func (UnimplementedWebTProxyServer) UserTokensList(context.Context, *UserTokensListReq) (*UserTokensListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserTokensList not implemented")
}
func (UnimplementedWebTProxyServer) SyncTokenInfo(context.Context, *SyncTokenInfoReq) (*SyncTokenInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncTokenInfo not implemented")
}
func (UnimplementedWebTProxyServer) SymbolList(context.Context, *SymbolListReq) (*SymbolListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SymbolList not implemented")
}
func (UnimplementedWebTProxyServer) TransLog(context.Context, *GetTransactionListReq) (*GetTransactionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransLog not implemented")
}
func (UnimplementedWebTProxyServer) TransactionDetail(context.Context, *GetTransactionDetailReq) (*GetTransactionDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionDetail not implemented")
}
func (UnimplementedWebTProxyServer) SendTransaction(context.Context, *SendTransactionReq) (*SendTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedWebTProxyServer) TokensModify(context.Context, *TokenModifyReq) (*TokenModifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokensModify not implemented")
}
func (UnimplementedWebTProxyServer) MainTokenList(context.Context, *GetMainTokenReq) (*GetMainTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MainTokenList not implemented")
}
func (UnimplementedWebTProxyServer) mustEmbedUnimplementedWebTProxyServer() {}

// UnsafeWebTProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebTProxyServer will
// result in compilation errors.
type UnsafeWebTProxyServer interface {
	mustEmbedUnimplementedWebTProxyServer()
}

func RegisterWebTProxyServer(s grpc.ServiceRegistrar, srv WebTProxyServer) {
	s.RegisterService(&WebTProxy_ServiceDesc, srv)
}

func _WebTProxy_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).GetBalance(ctx, req.(*GetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).GetTransactions(ctx, req.(*GetTransactionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_SaveTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTransactionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).SaveTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_SaveTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).SaveTransactions(ctx, req.(*SaveTransactionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_GetContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).GetContacts(ctx, req.(*GetContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_GetWalletList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).GetWalletList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_GetWalletList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).GetWalletList(ctx, req.(*GetWalletListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_InitWalletList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitWalletListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).InitWalletList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_InitWalletList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).InitWalletList(ctx, req.(*InitWalletListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_GetWalletCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).GetWalletCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_GetWalletCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).GetWalletCount(ctx, req.(*GetWalletCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_WalletSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).WalletSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_WalletSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).WalletSearch(ctx, req.(*WalletSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_GetTransLogByTxid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransLogByTxidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).GetTransLogByTxid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_GetTransLogByTxid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).GetTransLogByTxid(ctx, req.(*GetTransLogByTxidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_TokensAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokensAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).TokensAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_TokensAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).TokensAdd(ctx, req.(*TokensAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_TokensDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokensDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).TokensDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_TokensDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).TokensDel(ctx, req.(*TokensDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_TokensSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokensSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).TokensSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_TokensSort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).TokensSort(ctx, req.(*TokensSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_UserTokensList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTokensListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).UserTokensList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_UserTokensList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).UserTokensList(ctx, req.(*UserTokensListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_SyncTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncTokenInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).SyncTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_SyncTokenInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).SyncTokenInfo(ctx, req.(*SyncTokenInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_SymbolList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymbolListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).SymbolList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_SymbolList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).SymbolList(ctx, req.(*SymbolListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_TransLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).TransLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_TransLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).TransLog(ctx, req.(*GetTransactionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_TransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).TransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_TransactionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).TransactionDetail(ctx, req.(*GetTransactionDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_SendTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).SendTransaction(ctx, req.(*SendTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_TokensModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenModifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).TokensModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_TokensModify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).TokensModify(ctx, req.(*TokenModifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_MainTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMainTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).MainTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_MainTokenList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).MainTokenList(ctx, req.(*GetMainTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WebTProxy_ServiceDesc is the grpc.ServiceDesc for WebTProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebTProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webTProxy.webTProxy",
	HandlerType: (*WebTProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBalance",
			Handler:    _WebTProxy_GetBalance_Handler,
		},
		{
			MethodName: "getTransactions",
			Handler:    _WebTProxy_GetTransactions_Handler,
		},
		{
			MethodName: "saveTransactions",
			Handler:    _WebTProxy_SaveTransactions_Handler,
		},
		{
			MethodName: "getContacts",
			Handler:    _WebTProxy_GetContacts_Handler,
		},
		{
			MethodName: "getWalletList",
			Handler:    _WebTProxy_GetWalletList_Handler,
		},
		{
			MethodName: "initWalletList",
			Handler:    _WebTProxy_InitWalletList_Handler,
		},
		{
			MethodName: "getWalletCount",
			Handler:    _WebTProxy_GetWalletCount_Handler,
		},
		{
			MethodName: "walletSearch",
			Handler:    _WebTProxy_WalletSearch_Handler,
		},
		{
			MethodName: "getTransLogByTxid",
			Handler:    _WebTProxy_GetTransLogByTxid_Handler,
		},
		{
			MethodName: "tokensAdd",
			Handler:    _WebTProxy_TokensAdd_Handler,
		},
		{
			MethodName: "tokensDel",
			Handler:    _WebTProxy_TokensDel_Handler,
		},
		{
			MethodName: "tokensSort",
			Handler:    _WebTProxy_TokensSort_Handler,
		},
		{
			MethodName: "userTokensList",
			Handler:    _WebTProxy_UserTokensList_Handler,
		},
		{
			MethodName: "syncTokenInfo",
			Handler:    _WebTProxy_SyncTokenInfo_Handler,
		},
		{
			MethodName: "symbolList",
			Handler:    _WebTProxy_SymbolList_Handler,
		},
		{
			MethodName: "transLog",
			Handler:    _WebTProxy_TransLog_Handler,
		},
		{
			MethodName: "transactionDetail",
			Handler:    _WebTProxy_TransactionDetail_Handler,
		},
		{
			MethodName: "sendTransaction",
			Handler:    _WebTProxy_SendTransaction_Handler,
		},
		{
			MethodName: "tokensModify",
			Handler:    _WebTProxy_TokensModify_Handler,
		},
		{
			MethodName: "mainTokenList",
			Handler:    _WebTProxy_MainTokenList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/web3proxy.proto",
}
