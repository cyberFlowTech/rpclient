// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: define/web3proxy.proto

package webTProxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebTProxy_GetBalance_FullMethodName     = "/webTProxy.webTProxy/getBalance"
	WebTProxy_GetTransactins_FullMethodName = "/webTProxy.webTProxy/getTransactins"
)

// WebTProxyClient is the client API for WebTProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebTProxyClient interface {
	GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error)
	GetTransactins(ctx context.Context, in *GetTransactionListReq, opts ...grpc.CallOption) (*GetTransactionListResp, error)
}

type webTProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewWebTProxyClient(cc grpc.ClientConnInterface) WebTProxyClient {
	return &webTProxyClient{cc}
}

func (c *webTProxyClient) GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error) {
	out := new(GetBalanceResp)
	err := c.cc.Invoke(ctx, WebTProxy_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTProxyClient) GetTransactins(ctx context.Context, in *GetTransactionListReq, opts ...grpc.CallOption) (*GetTransactionListResp, error) {
	out := new(GetTransactionListResp)
	err := c.cc.Invoke(ctx, WebTProxy_GetTransactins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebTProxyServer is the server API for WebTProxy service.
// All implementations must embed UnimplementedWebTProxyServer
// for forward compatibility
type WebTProxyServer interface {
	GetBalance(context.Context, *GetBalanceReq) (*GetBalanceResp, error)
	GetTransactins(context.Context, *GetTransactionListReq) (*GetTransactionListResp, error)
	mustEmbedUnimplementedWebTProxyServer()
}

// UnimplementedWebTProxyServer must be embedded to have forward compatible implementations.
type UnimplementedWebTProxyServer struct {
}

func (UnimplementedWebTProxyServer) GetBalance(context.Context, *GetBalanceReq) (*GetBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedWebTProxyServer) GetTransactins(context.Context, *GetTransactionListReq) (*GetTransactionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactins not implemented")
}
func (UnimplementedWebTProxyServer) mustEmbedUnimplementedWebTProxyServer() {}

// UnsafeWebTProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebTProxyServer will
// result in compilation errors.
type UnsafeWebTProxyServer interface {
	mustEmbedUnimplementedWebTProxyServer()
}

func RegisterWebTProxyServer(s grpc.ServiceRegistrar, srv WebTProxyServer) {
	s.RegisterService(&WebTProxy_ServiceDesc, srv)
}

func _WebTProxy_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).GetBalance(ctx, req.(*GetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTProxy_GetTransactins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTProxyServer).GetTransactins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTProxy_GetTransactins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTProxyServer).GetTransactins(ctx, req.(*GetTransactionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WebTProxy_ServiceDesc is the grpc.ServiceDesc for WebTProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebTProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webTProxy.webTProxy",
	HandlerType: (*WebTProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBalance",
			Handler:    _WebTProxy_GetBalance_Handler,
		},
		{
			MethodName: "getTransactins",
			Handler:    _WebTProxy_GetTransactins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/web3proxy.proto",
}
