// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: define/image.proto

package image

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MimoImage_UploadByUrl_FullMethodName  = "/image.MimoImage/UploadByUrl"
	MimoImage_UploadByFile_FullMethodName = "/image.MimoImage/UploadByFile"
)

// MimoImageClient is the client API for MimoImage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MimoImageClient interface {
	UploadByUrl(ctx context.Context, in *UploadByUrlReq, opts ...grpc.CallOption) (*UploadRes, error)
	UploadByFile(ctx context.Context, in *UploadByFileReq, opts ...grpc.CallOption) (*UploadRes, error)
}

type mimoImageClient struct {
	cc grpc.ClientConnInterface
}

func NewMimoImageClient(cc grpc.ClientConnInterface) MimoImageClient {
	return &mimoImageClient{cc}
}

func (c *mimoImageClient) UploadByUrl(ctx context.Context, in *UploadByUrlReq, opts ...grpc.CallOption) (*UploadRes, error) {
	out := new(UploadRes)
	err := c.cc.Invoke(ctx, MimoImage_UploadByUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mimoImageClient) UploadByFile(ctx context.Context, in *UploadByFileReq, opts ...grpc.CallOption) (*UploadRes, error) {
	out := new(UploadRes)
	err := c.cc.Invoke(ctx, MimoImage_UploadByFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MimoImageServer is the server API for MimoImage service.
// All implementations must embed UnimplementedMimoImageServer
// for forward compatibility
type MimoImageServer interface {
	UploadByUrl(context.Context, *UploadByUrlReq) (*UploadRes, error)
	UploadByFile(context.Context, *UploadByFileReq) (*UploadRes, error)
	mustEmbedUnimplementedMimoImageServer()
}

// UnimplementedMimoImageServer must be embedded to have forward compatible implementations.
type UnimplementedMimoImageServer struct {
}

func (UnimplementedMimoImageServer) UploadByUrl(context.Context, *UploadByUrlReq) (*UploadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadByUrl not implemented")
}
func (UnimplementedMimoImageServer) UploadByFile(context.Context, *UploadByFileReq) (*UploadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadByFile not implemented")
}
func (UnimplementedMimoImageServer) mustEmbedUnimplementedMimoImageServer() {}

// UnsafeMimoImageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MimoImageServer will
// result in compilation errors.
type UnsafeMimoImageServer interface {
	mustEmbedUnimplementedMimoImageServer()
}

func RegisterMimoImageServer(s grpc.ServiceRegistrar, srv MimoImageServer) {
	s.RegisterService(&MimoImage_ServiceDesc, srv)
}

func _MimoImage_UploadByUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadByUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MimoImageServer).UploadByUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MimoImage_UploadByUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MimoImageServer).UploadByUrl(ctx, req.(*UploadByUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MimoImage_UploadByFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadByFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MimoImageServer).UploadByFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MimoImage_UploadByFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MimoImageServer).UploadByFile(ctx, req.(*UploadByFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MimoImage_ServiceDesc is the grpc.ServiceDesc for MimoImage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MimoImage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image.MimoImage",
	HandlerType: (*MimoImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadByUrl",
			Handler:    _MimoImage_UploadByUrl_Handler,
		},
		{
			MethodName: "UploadByFile",
			Handler:    _MimoImage_UploadByFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/image.proto",
}
