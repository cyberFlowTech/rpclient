// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: define/im.v1.proto

package im

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImServer_GetToken_FullMethodName           = "/im.ImServer/getToken"
	ImServer_SendPackMsg_FullMethodName        = "/im.ImServer/SendPackMsg"
	ImServer_SendSystemCmdMsg_FullMethodName   = "/im.ImServer/SendSystemCmdMsg"
	ImServer_SendMsg_FullMethodName            = "/im.ImServer/SendMsg"
	ImServer_GetGroupInfo_FullMethodName       = "/im.ImServer/GetGroupInfo"
	ImServer_UpdateGroup_FullMethodName        = "/im.ImServer/UpdateGroup"
	ImServer_UpdateGroupUser_FullMethodName    = "/im.ImServer/UpdateGroupUser"
	ImServer_UpdateGroupManages_FullMethodName = "/im.ImServer/UpdateGroupManages"
	ImServer_UpdateGroupNotice_FullMethodName  = "/im.ImServer/UpdateGroupNotice"
	ImServer_SetBlocks_FullMethodName          = "/im.ImServer/SetBlocks"
)

// ImServerClient is the client API for ImServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImServerClient interface {
	GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*GetTokenRes, error)
	SendPackMsg(ctx context.Context, in *SendPackMsgReq, opts ...grpc.CallOption) (*MsgRes, error)
	SendSystemCmdMsg(ctx context.Context, in *SystemCmdMsgReq, opts ...grpc.CallOption) (*MsgRes, error)
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*MsgRes, error)
	GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoRes, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupRes, error)
	UpdateGroupUser(ctx context.Context, in *UpdateGroupUserReq, opts ...grpc.CallOption) (*UpdateGroupUserRes, error)
	UpdateGroupManages(ctx context.Context, in *UpdateGroupManagesReq, opts ...grpc.CallOption) (*UpdateGroupManagesRes, error)
	UpdateGroupNotice(ctx context.Context, in *UpdateGroupNoticeReq, opts ...grpc.CallOption) (*UpdateGroupNoticeRes, error)
	SetBlocks(ctx context.Context, in *SetBlocksReq, opts ...grpc.CallOption) (*CommonRes, error)
}

type imServerClient struct {
	cc grpc.ClientConnInterface
}

func NewImServerClient(cc grpc.ClientConnInterface) ImServerClient {
	return &imServerClient{cc}
}

func (c *imServerClient) GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*GetTokenRes, error) {
	out := new(GetTokenRes)
	err := c.cc.Invoke(ctx, ImServer_GetToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SendPackMsg(ctx context.Context, in *SendPackMsgReq, opts ...grpc.CallOption) (*MsgRes, error) {
	out := new(MsgRes)
	err := c.cc.Invoke(ctx, ImServer_SendPackMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SendSystemCmdMsg(ctx context.Context, in *SystemCmdMsgReq, opts ...grpc.CallOption) (*MsgRes, error) {
	out := new(MsgRes)
	err := c.cc.Invoke(ctx, ImServer_SendSystemCmdMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*MsgRes, error) {
	out := new(MsgRes)
	err := c.cc.Invoke(ctx, ImServer_SendMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoRes, error) {
	out := new(GetGroupInfoRes)
	err := c.cc.Invoke(ctx, ImServer_GetGroupInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupRes, error) {
	out := new(UpdateGroupRes)
	err := c.cc.Invoke(ctx, ImServer_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) UpdateGroupUser(ctx context.Context, in *UpdateGroupUserReq, opts ...grpc.CallOption) (*UpdateGroupUserRes, error) {
	out := new(UpdateGroupUserRes)
	err := c.cc.Invoke(ctx, ImServer_UpdateGroupUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) UpdateGroupManages(ctx context.Context, in *UpdateGroupManagesReq, opts ...grpc.CallOption) (*UpdateGroupManagesRes, error) {
	out := new(UpdateGroupManagesRes)
	err := c.cc.Invoke(ctx, ImServer_UpdateGroupManages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) UpdateGroupNotice(ctx context.Context, in *UpdateGroupNoticeReq, opts ...grpc.CallOption) (*UpdateGroupNoticeRes, error) {
	out := new(UpdateGroupNoticeRes)
	err := c.cc.Invoke(ctx, ImServer_UpdateGroupNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SetBlocks(ctx context.Context, in *SetBlocksReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_SetBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImServerServer is the server API for ImServer service.
// All implementations must embed UnimplementedImServerServer
// for forward compatibility
type ImServerServer interface {
	GetToken(context.Context, *GetTokenReq) (*GetTokenRes, error)
	SendPackMsg(context.Context, *SendPackMsgReq) (*MsgRes, error)
	SendSystemCmdMsg(context.Context, *SystemCmdMsgReq) (*MsgRes, error)
	SendMsg(context.Context, *SendMsgReq) (*MsgRes, error)
	GetGroupInfo(context.Context, *GetGroupInfoReq) (*GetGroupInfoRes, error)
	UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupRes, error)
	UpdateGroupUser(context.Context, *UpdateGroupUserReq) (*UpdateGroupUserRes, error)
	UpdateGroupManages(context.Context, *UpdateGroupManagesReq) (*UpdateGroupManagesRes, error)
	UpdateGroupNotice(context.Context, *UpdateGroupNoticeReq) (*UpdateGroupNoticeRes, error)
	SetBlocks(context.Context, *SetBlocksReq) (*CommonRes, error)
	mustEmbedUnimplementedImServerServer()
}

// UnimplementedImServerServer must be embedded to have forward compatible implementations.
type UnimplementedImServerServer struct {
}

func (UnimplementedImServerServer) GetToken(context.Context, *GetTokenReq) (*GetTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedImServerServer) SendPackMsg(context.Context, *SendPackMsgReq) (*MsgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPackMsg not implemented")
}
func (UnimplementedImServerServer) SendSystemCmdMsg(context.Context, *SystemCmdMsgReq) (*MsgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSystemCmdMsg not implemented")
}
func (UnimplementedImServerServer) SendMsg(context.Context, *SendMsgReq) (*MsgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedImServerServer) GetGroupInfo(context.Context, *GetGroupInfoReq) (*GetGroupInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfo not implemented")
}
func (UnimplementedImServerServer) UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedImServerServer) UpdateGroupUser(context.Context, *UpdateGroupUserReq) (*UpdateGroupUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupUser not implemented")
}
func (UnimplementedImServerServer) UpdateGroupManages(context.Context, *UpdateGroupManagesReq) (*UpdateGroupManagesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupManages not implemented")
}
func (UnimplementedImServerServer) UpdateGroupNotice(context.Context, *UpdateGroupNoticeReq) (*UpdateGroupNoticeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupNotice not implemented")
}
func (UnimplementedImServerServer) SetBlocks(context.Context, *SetBlocksReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBlocks not implemented")
}
func (UnimplementedImServerServer) mustEmbedUnimplementedImServerServer() {}

// UnsafeImServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImServerServer will
// result in compilation errors.
type UnsafeImServerServer interface {
	mustEmbedUnimplementedImServerServer()
}

func RegisterImServerServer(s grpc.ServiceRegistrar, srv ImServerServer) {
	s.RegisterService(&ImServer_ServiceDesc, srv)
}

func _ImServer_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).GetToken(ctx, req.(*GetTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SendPackMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPackMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SendPackMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SendPackMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SendPackMsg(ctx, req.(*SendPackMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SendSystemCmdMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemCmdMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SendSystemCmdMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SendSystemCmdMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SendSystemCmdMsg(ctx, req.(*SystemCmdMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SendMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_GetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).GetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_GetGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).GetGroupInfo(ctx, req.(*GetGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_UpdateGroupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).UpdateGroupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_UpdateGroupUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).UpdateGroupUser(ctx, req.(*UpdateGroupUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_UpdateGroupManages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupManagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).UpdateGroupManages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_UpdateGroupManages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).UpdateGroupManages(ctx, req.(*UpdateGroupManagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_UpdateGroupNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).UpdateGroupNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_UpdateGroupNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).UpdateGroupNotice(ctx, req.(*UpdateGroupNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBlocksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SetBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SetBlocks(ctx, req.(*SetBlocksReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ImServer_ServiceDesc is the grpc.ServiceDesc for ImServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "im.ImServer",
	HandlerType: (*ImServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getToken",
			Handler:    _ImServer_GetToken_Handler,
		},
		{
			MethodName: "SendPackMsg",
			Handler:    _ImServer_SendPackMsg_Handler,
		},
		{
			MethodName: "SendSystemCmdMsg",
			Handler:    _ImServer_SendSystemCmdMsg_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _ImServer_SendMsg_Handler,
		},
		{
			MethodName: "GetGroupInfo",
			Handler:    _ImServer_GetGroupInfo_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _ImServer_UpdateGroup_Handler,
		},
		{
			MethodName: "UpdateGroupUser",
			Handler:    _ImServer_UpdateGroupUser_Handler,
		},
		{
			MethodName: "UpdateGroupManages",
			Handler:    _ImServer_UpdateGroupManages_Handler,
		},
		{
			MethodName: "UpdateGroupNotice",
			Handler:    _ImServer_UpdateGroupNotice_Handler,
		},
		{
			MethodName: "SetBlocks",
			Handler:    _ImServer_SetBlocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/im.v1.proto",
}
