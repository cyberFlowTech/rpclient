// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: define/im.v1.proto

package im

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImServer_GetToken_FullMethodName                    = "/im.ImServer/getToken"
	ImServer_SendPackMsg_FullMethodName                 = "/im.ImServer/SendPackMsg"
	ImServer_SendSystemCmdMsg_FullMethodName            = "/im.ImServer/SendSystemCmdMsg"
	ImServer_SendMsg_FullMethodName                     = "/im.ImServer/SendMsg"
	ImServer_GetGroupInfo_FullMethodName                = "/im.ImServer/GetGroupInfo"
	ImServer_UpdateGroup_FullMethodName                 = "/im.ImServer/UpdateGroup"
	ImServer_UpdateGroupUser_FullMethodName             = "/im.ImServer/UpdateGroupUser"
	ImServer_UpdateGroupManages_FullMethodName          = "/im.ImServer/UpdateGroupManages"
	ImServer_UpdateGroupNotice_FullMethodName           = "/im.ImServer/UpdateGroupNotice"
	ImServer_SetBlocks_FullMethodName                   = "/im.ImServer/SetBlocks"
	ImServer_SetGroupDapp_FullMethodName                = "/im.ImServer/SetGroupDapp"
	ImServer_GetGroupDapp_FullMethodName                = "/im.ImServer/GetGroupDapp"
	ImServer_GetUserOldGroup_FullMethodName             = "/im.ImServer/GetUserOldGroup"
	ImServer_GetStatClub_FullMethodName                 = "/im.ImServer/GetStatClub"
	ImServer_PushStatClub_FullMethodName                = "/im.ImServer/PushStatClub"
	ImServer_SetNotification_FullMethodName             = "/im.ImServer/SetNotification"
	ImServer_GetNotification_FullMethodName             = "/im.ImServer/GetNotification"
	ImServer_AddUserOldGroup_FullMethodName             = "/im.ImServer/AddUserOldGroup"
	ImServer_GetUserChannelNotice_FullMethodName        = "/im.ImServer/GetUserChannelNotice"
	ImServer_SetUserGroupNick_FullMethodName            = "/im.ImServer/SetUserGroupNick"
	ImServer_SetNotificationDisturbing_FullMethodName   = "/im.ImServer/SetNotificationDisturbing"
	ImServer_SetNotificationDisplayStyle_FullMethodName = "/im.ImServer/SetNotificationDisplayStyle"
	ImServer_UploadEmoji_FullMethodName                 = "/im.ImServer/UploadEmoji"
	ImServer_CollectEmoji_FullMethodName                = "/im.ImServer/CollectEmoji"
	ImServer_DelEmoji_FullMethodName                    = "/im.ImServer/DelEmoji"
	ImServer_SortEmoji_FullMethodName                   = "/im.ImServer/SortEmoji"
	ImServer_GetEmojiList_FullMethodName                = "/im.ImServer/GetEmojiList"
	ImServer_MsgRecall_FullMethodName                   = "/im.ImServer/MsgRecall"
	ImServer_UserDisconnect_FullMethodName              = "/im.ImServer/UserDisconnect"
	ImServer_UserImToken_FullMethodName                 = "/im.ImServer/UserImToken"
	ImServer_VoiceCalling_FullMethodName                = "/im.ImServer/VoiceCalling"
	ImServer_VoiceCallCancelInvite_FullMethodName       = "/im.ImServer/VoiceCallCancelInvite"
	ImServer_VoiceCallReject_FullMethodName             = "/im.ImServer/VoiceCallReject"
	ImServer_VoiceCallAccept_FullMethodName             = "/im.ImServer/VoiceCallAccept"
	ImServer_VoiceCallLeave_FullMethodName              = "/im.ImServer/VoiceCallLeave"
	ImServer_VoiceCallInfo_FullMethodName               = "/im.ImServer/VoiceCallInfo"
	ImServer_AgoraCallback_FullMethodName               = "/im.ImServer/AgoraCallback"
	ImServer_VoiceTask_FullMethodName                   = "/im.ImServer/VoiceTask"
	ImServer_SetFriend_FullMethodName                   = "/im.ImServer/SetFriend"
	ImServer_SetFriendRemark_FullMethodName             = "/im.ImServer/SetFriendRemark"
	ImServer_SyncUserClubNick_FullMethodName            = "/im.ImServer/SyncUserClubNick"
	ImServer_RunTask_FullMethodName                     = "/im.ImServer/RunTask"
	ImServer_SetChatMsgClean_FullMethodName             = "/im.ImServer/SetChatMsgClean"
	ImServer_GetChatMsgClean_FullMethodName             = "/im.ImServer/GetChatMsgClean"
	ImServer_ImCommonTask_FullMethodName                = "/im.ImServer/ImCommonTask"
	ImServer_AddCompareGroupList_FullMethodName         = "/im.ImServer/AddCompareGroupList"
	ImServer_GetS3Token_FullMethodName                  = "/im.ImServer/GetS3Token"
	ImServer_GetConversations_FullMethodName            = "/im.ImServer/GetConversations"
	ImServer_SetConversations_FullMethodName            = "/im.ImServer/SetConversations"
	ImServer_CheckGroupMembers_FullMethodName           = "/im.ImServer/CheckGroupMembers"
)

// ImServerClient is the client API for ImServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImServerClient interface {
	GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*GetTokenRes, error)
	SendPackMsg(ctx context.Context, in *SendPackMsgReq, opts ...grpc.CallOption) (*MsgRes, error)
	SendSystemCmdMsg(ctx context.Context, in *SystemCmdMsgReq, opts ...grpc.CallOption) (*MsgRes, error)
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*MsgRes, error)
	GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoRes, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupRes, error)
	UpdateGroupUser(ctx context.Context, in *UpdateGroupUserReq, opts ...grpc.CallOption) (*UpdateGroupUserRes, error)
	UpdateGroupManages(ctx context.Context, in *UpdateGroupManagesReq, opts ...grpc.CallOption) (*UpdateGroupManagesRes, error)
	UpdateGroupNotice(ctx context.Context, in *UpdateGroupNoticeReq, opts ...grpc.CallOption) (*UpdateGroupNoticeRes, error)
	SetBlocks(ctx context.Context, in *SetBlocksReq, opts ...grpc.CallOption) (*CommonRes, error)
	SetGroupDapp(ctx context.Context, in *SetGroupDappReq, opts ...grpc.CallOption) (*CommonRes, error)
	GetGroupDapp(ctx context.Context, in *GetGroupDappReq, opts ...grpc.CallOption) (*GetGroupDappRes, error)
	GetUserOldGroup(ctx context.Context, in *GetUserOldGroupReq, opts ...grpc.CallOption) (*GetUserOldGroupRes, error)
	GetStatClub(ctx context.Context, in *GetStatClubReq, opts ...grpc.CallOption) (*GetStatClubRes, error)
	PushStatClub(ctx context.Context, in *PushStatClubReq, opts ...grpc.CallOption) (*EmptyData, error)
	SetNotification(ctx context.Context, in *SetNotificationReq, opts ...grpc.CallOption) (*SetNotificationRes, error)
	GetNotification(ctx context.Context, in *GetNotificationReq, opts ...grpc.CallOption) (*GetNotificationRes, error)
	AddUserOldGroup(ctx context.Context, in *AddUserOldGroupReq, opts ...grpc.CallOption) (*CommonRes, error)
	GetUserChannelNotice(ctx context.Context, in *GetUserChannelNoticeReq, opts ...grpc.CallOption) (*GetUserChannelNoticeRes, error)
	SetUserGroupNick(ctx context.Context, in *SetUserGroupNickReq, opts ...grpc.CallOption) (*CommonRes, error)
	// 设置离线消息推送免打扰
	SetNotificationDisturbing(ctx context.Context, in *SetNotificationDisturbingReq, opts ...grpc.CallOption) (*SetNotificationDisturbingRes, error)
	// 设置离线消息推送展示样式
	SetNotificationDisplayStyle(ctx context.Context, in *SetNotificationDisplayStyleReq, opts ...grpc.CallOption) (*SetNotificationDisplayStyleRes, error)
	UploadEmoji(ctx context.Context, in *UploadEmojiReq, opts ...grpc.CallOption) (*UploadEmojiRes, error)
	CollectEmoji(ctx context.Context, in *CollectEmojiReq, opts ...grpc.CallOption) (*EmptyData, error)
	DelEmoji(ctx context.Context, in *DelEmojiReq, opts ...grpc.CallOption) (*EmptyData, error)
	SortEmoji(ctx context.Context, in *SortEmojiReq, opts ...grpc.CallOption) (*EmptyData, error)
	GetEmojiList(ctx context.Context, in *GetEmojiListReq, opts ...grpc.CallOption) (*GetEmojiListRes, error)
	MsgRecall(ctx context.Context, in *MsgRecallReq, opts ...grpc.CallOption) (*EmptyData, error)
	UserDisconnect(ctx context.Context, in *UserDisconnectReq, opts ...grpc.CallOption) (*CommonRes, error)
	UserImToken(ctx context.Context, in *UserImTokenReq, opts ...grpc.CallOption) (*UserImTokenRes, error)
	// 拨打语音
	VoiceCalling(ctx context.Context, in *VoiceCallingReq, opts ...grpc.CallOption) (*VoiceCallingRes, error)
	// 主叫取消
	VoiceCallCancelInvite(ctx context.Context, in *VoiceCallCancelInviteReq, opts ...grpc.CallOption) (*CommonRes, error)
	// 拒接
	VoiceCallReject(ctx context.Context, in *VoiceCallRejectReq, opts ...grpc.CallOption) (*CommonRes, error)
	// 接听
	VoiceCallAccept(ctx context.Context, in *VoiceCallAcceptReq, opts ...grpc.CallOption) (*VoiceCallAcceptRes, error)
	// 离开
	VoiceCallLeave(ctx context.Context, in *VoiceCallLeaveReq, opts ...grpc.CallOption) (*CommonRes, error)
	// 房间信息
	VoiceCallInfo(ctx context.Context, in *VoiceCallInfoReq, opts ...grpc.CallOption) (*VoiceCallInfoRes, error)
	// 回调
	AgoraCallback(ctx context.Context, in *AgoraCallbackReq, opts ...grpc.CallOption) (*EmptyData, error)
	VoiceTask(ctx context.Context, in *EmptyData, opts ...grpc.CallOption) (*EmptyData, error)
	SetFriend(ctx context.Context, in *SetFriendReq, opts ...grpc.CallOption) (*CommonRes, error)
	SetFriendRemark(ctx context.Context, in *SetFriendRemarkReq, opts ...grpc.CallOption) (*CommonRes, error)
	SyncUserClubNick(ctx context.Context, in *SyncUserClubNickReq, opts ...grpc.CallOption) (*CommonRes, error)
	RunTask(ctx context.Context, in *RunTaskReq, opts ...grpc.CallOption) (*CommonRes, error)
	SetChatMsgClean(ctx context.Context, in *SetChatMsgCleanReq, opts ...grpc.CallOption) (*CommonRes, error)
	GetChatMsgClean(ctx context.Context, in *GetChatMsgCleanReq, opts ...grpc.CallOption) (*GetChatMsgCleanRes, error)
	ImCommonTask(ctx context.Context, in *ImCommonTaskReq, opts ...grpc.CallOption) (*EmptyData, error)
	// 添加待比较同步数据的群列表
	AddCompareGroupList(ctx context.Context, in *AddCompareGroupListReq, opts ...grpc.CallOption) (*CommonRes, error)
	// s3上传临时token
	GetS3Token(ctx context.Context, in *GetS3TokenReq, opts ...grpc.CallOption) (*GetS3TokenRes, error)
	// 获取会话列表
	GetConversations(ctx context.Context, in *GetConversationsReq, opts ...grpc.CallOption) (*GetConversationsRes, error)
	// 设置会话
	SetConversations(ctx context.Context, in *SetConversationsReq, opts ...grpc.CallOption) (*CommonRes, error)
	// 检测群成员
	CheckGroupMembers(ctx context.Context, in *CheckGroupMembersReq, opts ...grpc.CallOption) (*CommonRes, error)
}

type imServerClient struct {
	cc grpc.ClientConnInterface
}

func NewImServerClient(cc grpc.ClientConnInterface) ImServerClient {
	return &imServerClient{cc}
}

func (c *imServerClient) GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*GetTokenRes, error) {
	out := new(GetTokenRes)
	err := c.cc.Invoke(ctx, ImServer_GetToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SendPackMsg(ctx context.Context, in *SendPackMsgReq, opts ...grpc.CallOption) (*MsgRes, error) {
	out := new(MsgRes)
	err := c.cc.Invoke(ctx, ImServer_SendPackMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SendSystemCmdMsg(ctx context.Context, in *SystemCmdMsgReq, opts ...grpc.CallOption) (*MsgRes, error) {
	out := new(MsgRes)
	err := c.cc.Invoke(ctx, ImServer_SendSystemCmdMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*MsgRes, error) {
	out := new(MsgRes)
	err := c.cc.Invoke(ctx, ImServer_SendMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoRes, error) {
	out := new(GetGroupInfoRes)
	err := c.cc.Invoke(ctx, ImServer_GetGroupInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupRes, error) {
	out := new(UpdateGroupRes)
	err := c.cc.Invoke(ctx, ImServer_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) UpdateGroupUser(ctx context.Context, in *UpdateGroupUserReq, opts ...grpc.CallOption) (*UpdateGroupUserRes, error) {
	out := new(UpdateGroupUserRes)
	err := c.cc.Invoke(ctx, ImServer_UpdateGroupUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) UpdateGroupManages(ctx context.Context, in *UpdateGroupManagesReq, opts ...grpc.CallOption) (*UpdateGroupManagesRes, error) {
	out := new(UpdateGroupManagesRes)
	err := c.cc.Invoke(ctx, ImServer_UpdateGroupManages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) UpdateGroupNotice(ctx context.Context, in *UpdateGroupNoticeReq, opts ...grpc.CallOption) (*UpdateGroupNoticeRes, error) {
	out := new(UpdateGroupNoticeRes)
	err := c.cc.Invoke(ctx, ImServer_UpdateGroupNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SetBlocks(ctx context.Context, in *SetBlocksReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_SetBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SetGroupDapp(ctx context.Context, in *SetGroupDappReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_SetGroupDapp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) GetGroupDapp(ctx context.Context, in *GetGroupDappReq, opts ...grpc.CallOption) (*GetGroupDappRes, error) {
	out := new(GetGroupDappRes)
	err := c.cc.Invoke(ctx, ImServer_GetGroupDapp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) GetUserOldGroup(ctx context.Context, in *GetUserOldGroupReq, opts ...grpc.CallOption) (*GetUserOldGroupRes, error) {
	out := new(GetUserOldGroupRes)
	err := c.cc.Invoke(ctx, ImServer_GetUserOldGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) GetStatClub(ctx context.Context, in *GetStatClubReq, opts ...grpc.CallOption) (*GetStatClubRes, error) {
	out := new(GetStatClubRes)
	err := c.cc.Invoke(ctx, ImServer_GetStatClub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) PushStatClub(ctx context.Context, in *PushStatClubReq, opts ...grpc.CallOption) (*EmptyData, error) {
	out := new(EmptyData)
	err := c.cc.Invoke(ctx, ImServer_PushStatClub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SetNotification(ctx context.Context, in *SetNotificationReq, opts ...grpc.CallOption) (*SetNotificationRes, error) {
	out := new(SetNotificationRes)
	err := c.cc.Invoke(ctx, ImServer_SetNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) GetNotification(ctx context.Context, in *GetNotificationReq, opts ...grpc.CallOption) (*GetNotificationRes, error) {
	out := new(GetNotificationRes)
	err := c.cc.Invoke(ctx, ImServer_GetNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) AddUserOldGroup(ctx context.Context, in *AddUserOldGroupReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_AddUserOldGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) GetUserChannelNotice(ctx context.Context, in *GetUserChannelNoticeReq, opts ...grpc.CallOption) (*GetUserChannelNoticeRes, error) {
	out := new(GetUserChannelNoticeRes)
	err := c.cc.Invoke(ctx, ImServer_GetUserChannelNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SetUserGroupNick(ctx context.Context, in *SetUserGroupNickReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_SetUserGroupNick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SetNotificationDisturbing(ctx context.Context, in *SetNotificationDisturbingReq, opts ...grpc.CallOption) (*SetNotificationDisturbingRes, error) {
	out := new(SetNotificationDisturbingRes)
	err := c.cc.Invoke(ctx, ImServer_SetNotificationDisturbing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SetNotificationDisplayStyle(ctx context.Context, in *SetNotificationDisplayStyleReq, opts ...grpc.CallOption) (*SetNotificationDisplayStyleRes, error) {
	out := new(SetNotificationDisplayStyleRes)
	err := c.cc.Invoke(ctx, ImServer_SetNotificationDisplayStyle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) UploadEmoji(ctx context.Context, in *UploadEmojiReq, opts ...grpc.CallOption) (*UploadEmojiRes, error) {
	out := new(UploadEmojiRes)
	err := c.cc.Invoke(ctx, ImServer_UploadEmoji_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) CollectEmoji(ctx context.Context, in *CollectEmojiReq, opts ...grpc.CallOption) (*EmptyData, error) {
	out := new(EmptyData)
	err := c.cc.Invoke(ctx, ImServer_CollectEmoji_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) DelEmoji(ctx context.Context, in *DelEmojiReq, opts ...grpc.CallOption) (*EmptyData, error) {
	out := new(EmptyData)
	err := c.cc.Invoke(ctx, ImServer_DelEmoji_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SortEmoji(ctx context.Context, in *SortEmojiReq, opts ...grpc.CallOption) (*EmptyData, error) {
	out := new(EmptyData)
	err := c.cc.Invoke(ctx, ImServer_SortEmoji_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) GetEmojiList(ctx context.Context, in *GetEmojiListReq, opts ...grpc.CallOption) (*GetEmojiListRes, error) {
	out := new(GetEmojiListRes)
	err := c.cc.Invoke(ctx, ImServer_GetEmojiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) MsgRecall(ctx context.Context, in *MsgRecallReq, opts ...grpc.CallOption) (*EmptyData, error) {
	out := new(EmptyData)
	err := c.cc.Invoke(ctx, ImServer_MsgRecall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) UserDisconnect(ctx context.Context, in *UserDisconnectReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_UserDisconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) UserImToken(ctx context.Context, in *UserImTokenReq, opts ...grpc.CallOption) (*UserImTokenRes, error) {
	out := new(UserImTokenRes)
	err := c.cc.Invoke(ctx, ImServer_UserImToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) VoiceCalling(ctx context.Context, in *VoiceCallingReq, opts ...grpc.CallOption) (*VoiceCallingRes, error) {
	out := new(VoiceCallingRes)
	err := c.cc.Invoke(ctx, ImServer_VoiceCalling_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) VoiceCallCancelInvite(ctx context.Context, in *VoiceCallCancelInviteReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_VoiceCallCancelInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) VoiceCallReject(ctx context.Context, in *VoiceCallRejectReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_VoiceCallReject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) VoiceCallAccept(ctx context.Context, in *VoiceCallAcceptReq, opts ...grpc.CallOption) (*VoiceCallAcceptRes, error) {
	out := new(VoiceCallAcceptRes)
	err := c.cc.Invoke(ctx, ImServer_VoiceCallAccept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) VoiceCallLeave(ctx context.Context, in *VoiceCallLeaveReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_VoiceCallLeave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) VoiceCallInfo(ctx context.Context, in *VoiceCallInfoReq, opts ...grpc.CallOption) (*VoiceCallInfoRes, error) {
	out := new(VoiceCallInfoRes)
	err := c.cc.Invoke(ctx, ImServer_VoiceCallInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) AgoraCallback(ctx context.Context, in *AgoraCallbackReq, opts ...grpc.CallOption) (*EmptyData, error) {
	out := new(EmptyData)
	err := c.cc.Invoke(ctx, ImServer_AgoraCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) VoiceTask(ctx context.Context, in *EmptyData, opts ...grpc.CallOption) (*EmptyData, error) {
	out := new(EmptyData)
	err := c.cc.Invoke(ctx, ImServer_VoiceTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SetFriend(ctx context.Context, in *SetFriendReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_SetFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SetFriendRemark(ctx context.Context, in *SetFriendRemarkReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_SetFriendRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SyncUserClubNick(ctx context.Context, in *SyncUserClubNickReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_SyncUserClubNick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) RunTask(ctx context.Context, in *RunTaskReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_RunTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SetChatMsgClean(ctx context.Context, in *SetChatMsgCleanReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_SetChatMsgClean_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) GetChatMsgClean(ctx context.Context, in *GetChatMsgCleanReq, opts ...grpc.CallOption) (*GetChatMsgCleanRes, error) {
	out := new(GetChatMsgCleanRes)
	err := c.cc.Invoke(ctx, ImServer_GetChatMsgClean_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) ImCommonTask(ctx context.Context, in *ImCommonTaskReq, opts ...grpc.CallOption) (*EmptyData, error) {
	out := new(EmptyData)
	err := c.cc.Invoke(ctx, ImServer_ImCommonTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) AddCompareGroupList(ctx context.Context, in *AddCompareGroupListReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_AddCompareGroupList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) GetS3Token(ctx context.Context, in *GetS3TokenReq, opts ...grpc.CallOption) (*GetS3TokenRes, error) {
	out := new(GetS3TokenRes)
	err := c.cc.Invoke(ctx, ImServer_GetS3Token_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) GetConversations(ctx context.Context, in *GetConversationsReq, opts ...grpc.CallOption) (*GetConversationsRes, error) {
	out := new(GetConversationsRes)
	err := c.cc.Invoke(ctx, ImServer_GetConversations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SetConversations(ctx context.Context, in *SetConversationsReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_SetConversations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) CheckGroupMembers(ctx context.Context, in *CheckGroupMembersReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, ImServer_CheckGroupMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImServerServer is the server API for ImServer service.
// All implementations must embed UnimplementedImServerServer
// for forward compatibility
type ImServerServer interface {
	GetToken(context.Context, *GetTokenReq) (*GetTokenRes, error)
	SendPackMsg(context.Context, *SendPackMsgReq) (*MsgRes, error)
	SendSystemCmdMsg(context.Context, *SystemCmdMsgReq) (*MsgRes, error)
	SendMsg(context.Context, *SendMsgReq) (*MsgRes, error)
	GetGroupInfo(context.Context, *GetGroupInfoReq) (*GetGroupInfoRes, error)
	UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupRes, error)
	UpdateGroupUser(context.Context, *UpdateGroupUserReq) (*UpdateGroupUserRes, error)
	UpdateGroupManages(context.Context, *UpdateGroupManagesReq) (*UpdateGroupManagesRes, error)
	UpdateGroupNotice(context.Context, *UpdateGroupNoticeReq) (*UpdateGroupNoticeRes, error)
	SetBlocks(context.Context, *SetBlocksReq) (*CommonRes, error)
	SetGroupDapp(context.Context, *SetGroupDappReq) (*CommonRes, error)
	GetGroupDapp(context.Context, *GetGroupDappReq) (*GetGroupDappRes, error)
	GetUserOldGroup(context.Context, *GetUserOldGroupReq) (*GetUserOldGroupRes, error)
	GetStatClub(context.Context, *GetStatClubReq) (*GetStatClubRes, error)
	PushStatClub(context.Context, *PushStatClubReq) (*EmptyData, error)
	SetNotification(context.Context, *SetNotificationReq) (*SetNotificationRes, error)
	GetNotification(context.Context, *GetNotificationReq) (*GetNotificationRes, error)
	AddUserOldGroup(context.Context, *AddUserOldGroupReq) (*CommonRes, error)
	GetUserChannelNotice(context.Context, *GetUserChannelNoticeReq) (*GetUserChannelNoticeRes, error)
	SetUserGroupNick(context.Context, *SetUserGroupNickReq) (*CommonRes, error)
	// 设置离线消息推送免打扰
	SetNotificationDisturbing(context.Context, *SetNotificationDisturbingReq) (*SetNotificationDisturbingRes, error)
	// 设置离线消息推送展示样式
	SetNotificationDisplayStyle(context.Context, *SetNotificationDisplayStyleReq) (*SetNotificationDisplayStyleRes, error)
	UploadEmoji(context.Context, *UploadEmojiReq) (*UploadEmojiRes, error)
	CollectEmoji(context.Context, *CollectEmojiReq) (*EmptyData, error)
	DelEmoji(context.Context, *DelEmojiReq) (*EmptyData, error)
	SortEmoji(context.Context, *SortEmojiReq) (*EmptyData, error)
	GetEmojiList(context.Context, *GetEmojiListReq) (*GetEmojiListRes, error)
	MsgRecall(context.Context, *MsgRecallReq) (*EmptyData, error)
	UserDisconnect(context.Context, *UserDisconnectReq) (*CommonRes, error)
	UserImToken(context.Context, *UserImTokenReq) (*UserImTokenRes, error)
	// 拨打语音
	VoiceCalling(context.Context, *VoiceCallingReq) (*VoiceCallingRes, error)
	// 主叫取消
	VoiceCallCancelInvite(context.Context, *VoiceCallCancelInviteReq) (*CommonRes, error)
	// 拒接
	VoiceCallReject(context.Context, *VoiceCallRejectReq) (*CommonRes, error)
	// 接听
	VoiceCallAccept(context.Context, *VoiceCallAcceptReq) (*VoiceCallAcceptRes, error)
	// 离开
	VoiceCallLeave(context.Context, *VoiceCallLeaveReq) (*CommonRes, error)
	// 房间信息
	VoiceCallInfo(context.Context, *VoiceCallInfoReq) (*VoiceCallInfoRes, error)
	// 回调
	AgoraCallback(context.Context, *AgoraCallbackReq) (*EmptyData, error)
	VoiceTask(context.Context, *EmptyData) (*EmptyData, error)
	SetFriend(context.Context, *SetFriendReq) (*CommonRes, error)
	SetFriendRemark(context.Context, *SetFriendRemarkReq) (*CommonRes, error)
	SyncUserClubNick(context.Context, *SyncUserClubNickReq) (*CommonRes, error)
	RunTask(context.Context, *RunTaskReq) (*CommonRes, error)
	SetChatMsgClean(context.Context, *SetChatMsgCleanReq) (*CommonRes, error)
	GetChatMsgClean(context.Context, *GetChatMsgCleanReq) (*GetChatMsgCleanRes, error)
	ImCommonTask(context.Context, *ImCommonTaskReq) (*EmptyData, error)
	// 添加待比较同步数据的群列表
	AddCompareGroupList(context.Context, *AddCompareGroupListReq) (*CommonRes, error)
	// s3上传临时token
	GetS3Token(context.Context, *GetS3TokenReq) (*GetS3TokenRes, error)
	// 获取会话列表
	GetConversations(context.Context, *GetConversationsReq) (*GetConversationsRes, error)
	// 设置会话
	SetConversations(context.Context, *SetConversationsReq) (*CommonRes, error)
	// 检测群成员
	CheckGroupMembers(context.Context, *CheckGroupMembersReq) (*CommonRes, error)
	mustEmbedUnimplementedImServerServer()
}

// UnimplementedImServerServer must be embedded to have forward compatible implementations.
type UnimplementedImServerServer struct {
}

func (UnimplementedImServerServer) GetToken(context.Context, *GetTokenReq) (*GetTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedImServerServer) SendPackMsg(context.Context, *SendPackMsgReq) (*MsgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPackMsg not implemented")
}
func (UnimplementedImServerServer) SendSystemCmdMsg(context.Context, *SystemCmdMsgReq) (*MsgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSystemCmdMsg not implemented")
}
func (UnimplementedImServerServer) SendMsg(context.Context, *SendMsgReq) (*MsgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedImServerServer) GetGroupInfo(context.Context, *GetGroupInfoReq) (*GetGroupInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfo not implemented")
}
func (UnimplementedImServerServer) UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedImServerServer) UpdateGroupUser(context.Context, *UpdateGroupUserReq) (*UpdateGroupUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupUser not implemented")
}
func (UnimplementedImServerServer) UpdateGroupManages(context.Context, *UpdateGroupManagesReq) (*UpdateGroupManagesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupManages not implemented")
}
func (UnimplementedImServerServer) UpdateGroupNotice(context.Context, *UpdateGroupNoticeReq) (*UpdateGroupNoticeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupNotice not implemented")
}
func (UnimplementedImServerServer) SetBlocks(context.Context, *SetBlocksReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBlocks not implemented")
}
func (UnimplementedImServerServer) SetGroupDapp(context.Context, *SetGroupDappReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupDapp not implemented")
}
func (UnimplementedImServerServer) GetGroupDapp(context.Context, *GetGroupDappReq) (*GetGroupDappRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupDapp not implemented")
}
func (UnimplementedImServerServer) GetUserOldGroup(context.Context, *GetUserOldGroupReq) (*GetUserOldGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOldGroup not implemented")
}
func (UnimplementedImServerServer) GetStatClub(context.Context, *GetStatClubReq) (*GetStatClubRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatClub not implemented")
}
func (UnimplementedImServerServer) PushStatClub(context.Context, *PushStatClubReq) (*EmptyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushStatClub not implemented")
}
func (UnimplementedImServerServer) SetNotification(context.Context, *SetNotificationReq) (*SetNotificationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNotification not implemented")
}
func (UnimplementedImServerServer) GetNotification(context.Context, *GetNotificationReq) (*GetNotificationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotification not implemented")
}
func (UnimplementedImServerServer) AddUserOldGroup(context.Context, *AddUserOldGroupReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserOldGroup not implemented")
}
func (UnimplementedImServerServer) GetUserChannelNotice(context.Context, *GetUserChannelNoticeReq) (*GetUserChannelNoticeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChannelNotice not implemented")
}
func (UnimplementedImServerServer) SetUserGroupNick(context.Context, *SetUserGroupNickReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserGroupNick not implemented")
}
func (UnimplementedImServerServer) SetNotificationDisturbing(context.Context, *SetNotificationDisturbingReq) (*SetNotificationDisturbingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNotificationDisturbing not implemented")
}
func (UnimplementedImServerServer) SetNotificationDisplayStyle(context.Context, *SetNotificationDisplayStyleReq) (*SetNotificationDisplayStyleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNotificationDisplayStyle not implemented")
}
func (UnimplementedImServerServer) UploadEmoji(context.Context, *UploadEmojiReq) (*UploadEmojiRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadEmoji not implemented")
}
func (UnimplementedImServerServer) CollectEmoji(context.Context, *CollectEmojiReq) (*EmptyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectEmoji not implemented")
}
func (UnimplementedImServerServer) DelEmoji(context.Context, *DelEmojiReq) (*EmptyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelEmoji not implemented")
}
func (UnimplementedImServerServer) SortEmoji(context.Context, *SortEmojiReq) (*EmptyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortEmoji not implemented")
}
func (UnimplementedImServerServer) GetEmojiList(context.Context, *GetEmojiListReq) (*GetEmojiListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmojiList not implemented")
}
func (UnimplementedImServerServer) MsgRecall(context.Context, *MsgRecallReq) (*EmptyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgRecall not implemented")
}
func (UnimplementedImServerServer) UserDisconnect(context.Context, *UserDisconnectReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDisconnect not implemented")
}
func (UnimplementedImServerServer) UserImToken(context.Context, *UserImTokenReq) (*UserImTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserImToken not implemented")
}
func (UnimplementedImServerServer) VoiceCalling(context.Context, *VoiceCallingReq) (*VoiceCallingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoiceCalling not implemented")
}
func (UnimplementedImServerServer) VoiceCallCancelInvite(context.Context, *VoiceCallCancelInviteReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoiceCallCancelInvite not implemented")
}
func (UnimplementedImServerServer) VoiceCallReject(context.Context, *VoiceCallRejectReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoiceCallReject not implemented")
}
func (UnimplementedImServerServer) VoiceCallAccept(context.Context, *VoiceCallAcceptReq) (*VoiceCallAcceptRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoiceCallAccept not implemented")
}
func (UnimplementedImServerServer) VoiceCallLeave(context.Context, *VoiceCallLeaveReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoiceCallLeave not implemented")
}
func (UnimplementedImServerServer) VoiceCallInfo(context.Context, *VoiceCallInfoReq) (*VoiceCallInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoiceCallInfo not implemented")
}
func (UnimplementedImServerServer) AgoraCallback(context.Context, *AgoraCallbackReq) (*EmptyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgoraCallback not implemented")
}
func (UnimplementedImServerServer) VoiceTask(context.Context, *EmptyData) (*EmptyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoiceTask not implemented")
}
func (UnimplementedImServerServer) SetFriend(context.Context, *SetFriendReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFriend not implemented")
}
func (UnimplementedImServerServer) SetFriendRemark(context.Context, *SetFriendRemarkReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFriendRemark not implemented")
}
func (UnimplementedImServerServer) SyncUserClubNick(context.Context, *SyncUserClubNickReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncUserClubNick not implemented")
}
func (UnimplementedImServerServer) RunTask(context.Context, *RunTaskReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTask not implemented")
}
func (UnimplementedImServerServer) SetChatMsgClean(context.Context, *SetChatMsgCleanReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatMsgClean not implemented")
}
func (UnimplementedImServerServer) GetChatMsgClean(context.Context, *GetChatMsgCleanReq) (*GetChatMsgCleanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMsgClean not implemented")
}
func (UnimplementedImServerServer) ImCommonTask(context.Context, *ImCommonTaskReq) (*EmptyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImCommonTask not implemented")
}
func (UnimplementedImServerServer) AddCompareGroupList(context.Context, *AddCompareGroupListReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompareGroupList not implemented")
}
func (UnimplementedImServerServer) GetS3Token(context.Context, *GetS3TokenReq) (*GetS3TokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetS3Token not implemented")
}
func (UnimplementedImServerServer) GetConversations(context.Context, *GetConversationsReq) (*GetConversationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversations not implemented")
}
func (UnimplementedImServerServer) SetConversations(context.Context, *SetConversationsReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConversations not implemented")
}
func (UnimplementedImServerServer) CheckGroupMembers(context.Context, *CheckGroupMembersReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckGroupMembers not implemented")
}
func (UnimplementedImServerServer) mustEmbedUnimplementedImServerServer() {}

// UnsafeImServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImServerServer will
// result in compilation errors.
type UnsafeImServerServer interface {
	mustEmbedUnimplementedImServerServer()
}

func RegisterImServerServer(s grpc.ServiceRegistrar, srv ImServerServer) {
	s.RegisterService(&ImServer_ServiceDesc, srv)
}

func _ImServer_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).GetToken(ctx, req.(*GetTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SendPackMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPackMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SendPackMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SendPackMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SendPackMsg(ctx, req.(*SendPackMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SendSystemCmdMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemCmdMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SendSystemCmdMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SendSystemCmdMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SendSystemCmdMsg(ctx, req.(*SystemCmdMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SendMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_GetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).GetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_GetGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).GetGroupInfo(ctx, req.(*GetGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_UpdateGroupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).UpdateGroupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_UpdateGroupUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).UpdateGroupUser(ctx, req.(*UpdateGroupUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_UpdateGroupManages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupManagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).UpdateGroupManages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_UpdateGroupManages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).UpdateGroupManages(ctx, req.(*UpdateGroupManagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_UpdateGroupNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).UpdateGroupNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_UpdateGroupNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).UpdateGroupNotice(ctx, req.(*UpdateGroupNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBlocksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SetBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SetBlocks(ctx, req.(*SetBlocksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SetGroupDapp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupDappReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SetGroupDapp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SetGroupDapp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SetGroupDapp(ctx, req.(*SetGroupDappReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_GetGroupDapp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupDappReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).GetGroupDapp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_GetGroupDapp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).GetGroupDapp(ctx, req.(*GetGroupDappReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_GetUserOldGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOldGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).GetUserOldGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_GetUserOldGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).GetUserOldGroup(ctx, req.(*GetUserOldGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_GetStatClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatClubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).GetStatClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_GetStatClub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).GetStatClub(ctx, req.(*GetStatClubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_PushStatClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushStatClubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).PushStatClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_PushStatClub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).PushStatClub(ctx, req.(*PushStatClubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SetNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SetNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SetNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SetNotification(ctx, req.(*SetNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_GetNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).GetNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_GetNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).GetNotification(ctx, req.(*GetNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_AddUserOldGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserOldGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).AddUserOldGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_AddUserOldGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).AddUserOldGroup(ctx, req.(*AddUserOldGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_GetUserChannelNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChannelNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).GetUserChannelNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_GetUserChannelNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).GetUserChannelNotice(ctx, req.(*GetUserChannelNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SetUserGroupNick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserGroupNickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SetUserGroupNick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SetUserGroupNick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SetUserGroupNick(ctx, req.(*SetUserGroupNickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SetNotificationDisturbing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNotificationDisturbingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SetNotificationDisturbing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SetNotificationDisturbing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SetNotificationDisturbing(ctx, req.(*SetNotificationDisturbingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SetNotificationDisplayStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNotificationDisplayStyleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SetNotificationDisplayStyle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SetNotificationDisplayStyle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SetNotificationDisplayStyle(ctx, req.(*SetNotificationDisplayStyleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_UploadEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadEmojiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).UploadEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_UploadEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).UploadEmoji(ctx, req.(*UploadEmojiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_CollectEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectEmojiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).CollectEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_CollectEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).CollectEmoji(ctx, req.(*CollectEmojiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_DelEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelEmojiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).DelEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_DelEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).DelEmoji(ctx, req.(*DelEmojiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SortEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortEmojiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SortEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SortEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SortEmoji(ctx, req.(*SortEmojiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_GetEmojiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmojiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).GetEmojiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_GetEmojiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).GetEmojiList(ctx, req.(*GetEmojiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_MsgRecall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRecallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).MsgRecall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_MsgRecall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).MsgRecall(ctx, req.(*MsgRecallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_UserDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDisconnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).UserDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_UserDisconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).UserDisconnect(ctx, req.(*UserDisconnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_UserImToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserImTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).UserImToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_UserImToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).UserImToken(ctx, req.(*UserImTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_VoiceCalling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoiceCallingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).VoiceCalling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_VoiceCalling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).VoiceCalling(ctx, req.(*VoiceCallingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_VoiceCallCancelInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoiceCallCancelInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).VoiceCallCancelInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_VoiceCallCancelInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).VoiceCallCancelInvite(ctx, req.(*VoiceCallCancelInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_VoiceCallReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoiceCallRejectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).VoiceCallReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_VoiceCallReject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).VoiceCallReject(ctx, req.(*VoiceCallRejectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_VoiceCallAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoiceCallAcceptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).VoiceCallAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_VoiceCallAccept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).VoiceCallAccept(ctx, req.(*VoiceCallAcceptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_VoiceCallLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoiceCallLeaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).VoiceCallLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_VoiceCallLeave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).VoiceCallLeave(ctx, req.(*VoiceCallLeaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_VoiceCallInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoiceCallInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).VoiceCallInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_VoiceCallInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).VoiceCallInfo(ctx, req.(*VoiceCallInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_AgoraCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgoraCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).AgoraCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_AgoraCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).AgoraCallback(ctx, req.(*AgoraCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_VoiceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).VoiceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_VoiceTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).VoiceTask(ctx, req.(*EmptyData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SetFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SetFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SetFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SetFriend(ctx, req.(*SetFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SetFriendRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFriendRemarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SetFriendRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SetFriendRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SetFriendRemark(ctx, req.(*SetFriendRemarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SyncUserClubNick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUserClubNickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SyncUserClubNick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SyncUserClubNick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SyncUserClubNick(ctx, req.(*SyncUserClubNickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_RunTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).RunTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_RunTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).RunTask(ctx, req.(*RunTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SetChatMsgClean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChatMsgCleanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SetChatMsgClean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SetChatMsgClean_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SetChatMsgClean(ctx, req.(*SetChatMsgCleanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_GetChatMsgClean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatMsgCleanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).GetChatMsgClean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_GetChatMsgClean_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).GetChatMsgClean(ctx, req.(*GetChatMsgCleanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_ImCommonTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImCommonTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).ImCommonTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_ImCommonTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).ImCommonTask(ctx, req.(*ImCommonTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_AddCompareGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCompareGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).AddCompareGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_AddCompareGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).AddCompareGroupList(ctx, req.(*AddCompareGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_GetS3Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetS3TokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).GetS3Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_GetS3Token_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).GetS3Token(ctx, req.(*GetS3TokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_GetConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).GetConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_GetConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).GetConversations(ctx, req.(*GetConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SetConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SetConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_SetConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SetConversations(ctx, req.(*SetConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_CheckGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckGroupMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).CheckGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImServer_CheckGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).CheckGroupMembers(ctx, req.(*CheckGroupMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ImServer_ServiceDesc is the grpc.ServiceDesc for ImServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "im.ImServer",
	HandlerType: (*ImServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getToken",
			Handler:    _ImServer_GetToken_Handler,
		},
		{
			MethodName: "SendPackMsg",
			Handler:    _ImServer_SendPackMsg_Handler,
		},
		{
			MethodName: "SendSystemCmdMsg",
			Handler:    _ImServer_SendSystemCmdMsg_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _ImServer_SendMsg_Handler,
		},
		{
			MethodName: "GetGroupInfo",
			Handler:    _ImServer_GetGroupInfo_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _ImServer_UpdateGroup_Handler,
		},
		{
			MethodName: "UpdateGroupUser",
			Handler:    _ImServer_UpdateGroupUser_Handler,
		},
		{
			MethodName: "UpdateGroupManages",
			Handler:    _ImServer_UpdateGroupManages_Handler,
		},
		{
			MethodName: "UpdateGroupNotice",
			Handler:    _ImServer_UpdateGroupNotice_Handler,
		},
		{
			MethodName: "SetBlocks",
			Handler:    _ImServer_SetBlocks_Handler,
		},
		{
			MethodName: "SetGroupDapp",
			Handler:    _ImServer_SetGroupDapp_Handler,
		},
		{
			MethodName: "GetGroupDapp",
			Handler:    _ImServer_GetGroupDapp_Handler,
		},
		{
			MethodName: "GetUserOldGroup",
			Handler:    _ImServer_GetUserOldGroup_Handler,
		},
		{
			MethodName: "GetStatClub",
			Handler:    _ImServer_GetStatClub_Handler,
		},
		{
			MethodName: "PushStatClub",
			Handler:    _ImServer_PushStatClub_Handler,
		},
		{
			MethodName: "SetNotification",
			Handler:    _ImServer_SetNotification_Handler,
		},
		{
			MethodName: "GetNotification",
			Handler:    _ImServer_GetNotification_Handler,
		},
		{
			MethodName: "AddUserOldGroup",
			Handler:    _ImServer_AddUserOldGroup_Handler,
		},
		{
			MethodName: "GetUserChannelNotice",
			Handler:    _ImServer_GetUserChannelNotice_Handler,
		},
		{
			MethodName: "SetUserGroupNick",
			Handler:    _ImServer_SetUserGroupNick_Handler,
		},
		{
			MethodName: "SetNotificationDisturbing",
			Handler:    _ImServer_SetNotificationDisturbing_Handler,
		},
		{
			MethodName: "SetNotificationDisplayStyle",
			Handler:    _ImServer_SetNotificationDisplayStyle_Handler,
		},
		{
			MethodName: "UploadEmoji",
			Handler:    _ImServer_UploadEmoji_Handler,
		},
		{
			MethodName: "CollectEmoji",
			Handler:    _ImServer_CollectEmoji_Handler,
		},
		{
			MethodName: "DelEmoji",
			Handler:    _ImServer_DelEmoji_Handler,
		},
		{
			MethodName: "SortEmoji",
			Handler:    _ImServer_SortEmoji_Handler,
		},
		{
			MethodName: "GetEmojiList",
			Handler:    _ImServer_GetEmojiList_Handler,
		},
		{
			MethodName: "MsgRecall",
			Handler:    _ImServer_MsgRecall_Handler,
		},
		{
			MethodName: "UserDisconnect",
			Handler:    _ImServer_UserDisconnect_Handler,
		},
		{
			MethodName: "UserImToken",
			Handler:    _ImServer_UserImToken_Handler,
		},
		{
			MethodName: "VoiceCalling",
			Handler:    _ImServer_VoiceCalling_Handler,
		},
		{
			MethodName: "VoiceCallCancelInvite",
			Handler:    _ImServer_VoiceCallCancelInvite_Handler,
		},
		{
			MethodName: "VoiceCallReject",
			Handler:    _ImServer_VoiceCallReject_Handler,
		},
		{
			MethodName: "VoiceCallAccept",
			Handler:    _ImServer_VoiceCallAccept_Handler,
		},
		{
			MethodName: "VoiceCallLeave",
			Handler:    _ImServer_VoiceCallLeave_Handler,
		},
		{
			MethodName: "VoiceCallInfo",
			Handler:    _ImServer_VoiceCallInfo_Handler,
		},
		{
			MethodName: "AgoraCallback",
			Handler:    _ImServer_AgoraCallback_Handler,
		},
		{
			MethodName: "VoiceTask",
			Handler:    _ImServer_VoiceTask_Handler,
		},
		{
			MethodName: "SetFriend",
			Handler:    _ImServer_SetFriend_Handler,
		},
		{
			MethodName: "SetFriendRemark",
			Handler:    _ImServer_SetFriendRemark_Handler,
		},
		{
			MethodName: "SyncUserClubNick",
			Handler:    _ImServer_SyncUserClubNick_Handler,
		},
		{
			MethodName: "RunTask",
			Handler:    _ImServer_RunTask_Handler,
		},
		{
			MethodName: "SetChatMsgClean",
			Handler:    _ImServer_SetChatMsgClean_Handler,
		},
		{
			MethodName: "GetChatMsgClean",
			Handler:    _ImServer_GetChatMsgClean_Handler,
		},
		{
			MethodName: "ImCommonTask",
			Handler:    _ImServer_ImCommonTask_Handler,
		},
		{
			MethodName: "AddCompareGroupList",
			Handler:    _ImServer_AddCompareGroupList_Handler,
		},
		{
			MethodName: "GetS3Token",
			Handler:    _ImServer_GetS3Token_Handler,
		},
		{
			MethodName: "GetConversations",
			Handler:    _ImServer_GetConversations_Handler,
		},
		{
			MethodName: "SetConversations",
			Handler:    _ImServer_SetConversations_Handler,
		},
		{
			MethodName: "CheckGroupMembers",
			Handler:    _ImServer_CheckGroupMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/im.v1.proto",
}
