// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: define/datastats.proto

package dataStats

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataStats_ReportTribeMsg_FullMethodName = "/dataStats.DataStats/ReportTribeMsg"
	DataStats_GetTribeMsg_FullMethodName    = "/dataStats.DataStats/GetTribeMsg"
)

// DataStatsClient is the client API for DataStats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataStatsClient interface {
	ReportTribeMsg(ctx context.Context, in *ReportDataReq, opts ...grpc.CallOption) (*ReportDataResp, error)
	GetTribeMsg(ctx context.Context, in *GetTribeStatsReq, opts ...grpc.CallOption) (*GetTribeStatResp, error)
}

type dataStatsClient struct {
	cc grpc.ClientConnInterface
}

func NewDataStatsClient(cc grpc.ClientConnInterface) DataStatsClient {
	return &dataStatsClient{cc}
}

func (c *dataStatsClient) ReportTribeMsg(ctx context.Context, in *ReportDataReq, opts ...grpc.CallOption) (*ReportDataResp, error) {
	out := new(ReportDataResp)
	err := c.cc.Invoke(ctx, DataStats_ReportTribeMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStatsClient) GetTribeMsg(ctx context.Context, in *GetTribeStatsReq, opts ...grpc.CallOption) (*GetTribeStatResp, error) {
	out := new(GetTribeStatResp)
	err := c.cc.Invoke(ctx, DataStats_GetTribeMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataStatsServer is the server API for DataStats service.
// All implementations must embed UnimplementedDataStatsServer
// for forward compatibility
type DataStatsServer interface {
	ReportTribeMsg(context.Context, *ReportDataReq) (*ReportDataResp, error)
	GetTribeMsg(context.Context, *GetTribeStatsReq) (*GetTribeStatResp, error)
	mustEmbedUnimplementedDataStatsServer()
}

// UnimplementedDataStatsServer must be embedded to have forward compatible implementations.
type UnimplementedDataStatsServer struct {
}

func (UnimplementedDataStatsServer) ReportTribeMsg(context.Context, *ReportDataReq) (*ReportDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTribeMsg not implemented")
}
func (UnimplementedDataStatsServer) GetTribeMsg(context.Context, *GetTribeStatsReq) (*GetTribeStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTribeMsg not implemented")
}
func (UnimplementedDataStatsServer) mustEmbedUnimplementedDataStatsServer() {}

// UnsafeDataStatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataStatsServer will
// result in compilation errors.
type UnsafeDataStatsServer interface {
	mustEmbedUnimplementedDataStatsServer()
}

func RegisterDataStatsServer(s grpc.ServiceRegistrar, srv DataStatsServer) {
	s.RegisterService(&DataStats_ServiceDesc, srv)
}

func _DataStats_ReportTribeMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStatsServer).ReportTribeMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStats_ReportTribeMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStatsServer).ReportTribeMsg(ctx, req.(*ReportDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStats_GetTribeMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTribeStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStatsServer).GetTribeMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStats_GetTribeMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStatsServer).GetTribeMsg(ctx, req.(*GetTribeStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DataStats_ServiceDesc is the grpc.ServiceDesc for DataStats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataStats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dataStats.DataStats",
	HandlerType: (*DataStatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportTribeMsg",
			Handler:    _DataStats_ReportTribeMsg_Handler,
		},
		{
			MethodName: "GetTribeMsg",
			Handler:    _DataStats_GetTribeMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/datastats.proto",
}
