// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: define/web3swap.proto

package webTSwap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebTSwap_GetCoinDetail_FullMethodName     = "/webTSwap.webTSwap/getCoinDetail"
	WebTSwap_GetCoinOHLCV_FullMethodName      = "/webTSwap.webTSwap/getCoinOHLCV"
	WebTSwap_GetCoinPriceStats_FullMethodName = "/webTSwap.webTSwap/getCoinPriceStats"
	WebTSwap_GetCoinQuotes_FullMethodName     = "/webTSwap.webTSwap/getCoinQuotes"
	WebTSwap_GetCoinsList_FullMethodName      = "/webTSwap.webTSwap/getCoinsList"
	WebTSwap_GetMyFavorites_FullMethodName    = "/webTSwap.webTSwap/getMyFavorites"
	WebTSwap_SetMyFavorites_FullMethodName    = "/webTSwap.webTSwap/setMyFavorites"
)

// WebTSwapClient is the client API for WebTSwap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebTSwapClient interface {
	GetCoinDetail(ctx context.Context, in *GetCoinDetailReq, opts ...grpc.CallOption) (*GetCoinDetailResp, error)
	GetCoinOHLCV(ctx context.Context, in *GetCoinOHLCVReq, opts ...grpc.CallOption) (*GetCoinOHLCVResp, error)
	GetCoinPriceStats(ctx context.Context, in *GetPriceStatsReq, opts ...grpc.CallOption) (*GetPriceStatsResp, error)
	GetCoinQuotes(ctx context.Context, in *GetCoinQuotesReq, opts ...grpc.CallOption) (*GetCoinQuotesResp, error)
	GetCoinsList(ctx context.Context, in *GetCoinListsReq, opts ...grpc.CallOption) (*GetCoinListsResp, error)
	GetMyFavorites(ctx context.Context, in *GetFavoriteCoinsReq, opts ...grpc.CallOption) (*GetFavoriteCoinsResp, error)
	SetMyFavorites(ctx context.Context, in *SetFavoriteCoinsReq, opts ...grpc.CallOption) (*SetFavoriteCoinsResp, error)
}

type webTSwapClient struct {
	cc grpc.ClientConnInterface
}

func NewWebTSwapClient(cc grpc.ClientConnInterface) WebTSwapClient {
	return &webTSwapClient{cc}
}

func (c *webTSwapClient) GetCoinDetail(ctx context.Context, in *GetCoinDetailReq, opts ...grpc.CallOption) (*GetCoinDetailResp, error) {
	out := new(GetCoinDetailResp)
	err := c.cc.Invoke(ctx, WebTSwap_GetCoinDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTSwapClient) GetCoinOHLCV(ctx context.Context, in *GetCoinOHLCVReq, opts ...grpc.CallOption) (*GetCoinOHLCVResp, error) {
	out := new(GetCoinOHLCVResp)
	err := c.cc.Invoke(ctx, WebTSwap_GetCoinOHLCV_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTSwapClient) GetCoinPriceStats(ctx context.Context, in *GetPriceStatsReq, opts ...grpc.CallOption) (*GetPriceStatsResp, error) {
	out := new(GetPriceStatsResp)
	err := c.cc.Invoke(ctx, WebTSwap_GetCoinPriceStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTSwapClient) GetCoinQuotes(ctx context.Context, in *GetCoinQuotesReq, opts ...grpc.CallOption) (*GetCoinQuotesResp, error) {
	out := new(GetCoinQuotesResp)
	err := c.cc.Invoke(ctx, WebTSwap_GetCoinQuotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTSwapClient) GetCoinsList(ctx context.Context, in *GetCoinListsReq, opts ...grpc.CallOption) (*GetCoinListsResp, error) {
	out := new(GetCoinListsResp)
	err := c.cc.Invoke(ctx, WebTSwap_GetCoinsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTSwapClient) GetMyFavorites(ctx context.Context, in *GetFavoriteCoinsReq, opts ...grpc.CallOption) (*GetFavoriteCoinsResp, error) {
	out := new(GetFavoriteCoinsResp)
	err := c.cc.Invoke(ctx, WebTSwap_GetMyFavorites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webTSwapClient) SetMyFavorites(ctx context.Context, in *SetFavoriteCoinsReq, opts ...grpc.CallOption) (*SetFavoriteCoinsResp, error) {
	out := new(SetFavoriteCoinsResp)
	err := c.cc.Invoke(ctx, WebTSwap_SetMyFavorites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebTSwapServer is the server API for WebTSwap service.
// All implementations must embed UnimplementedWebTSwapServer
// for forward compatibility
type WebTSwapServer interface {
	GetCoinDetail(context.Context, *GetCoinDetailReq) (*GetCoinDetailResp, error)
	GetCoinOHLCV(context.Context, *GetCoinOHLCVReq) (*GetCoinOHLCVResp, error)
	GetCoinPriceStats(context.Context, *GetPriceStatsReq) (*GetPriceStatsResp, error)
	GetCoinQuotes(context.Context, *GetCoinQuotesReq) (*GetCoinQuotesResp, error)
	GetCoinsList(context.Context, *GetCoinListsReq) (*GetCoinListsResp, error)
	GetMyFavorites(context.Context, *GetFavoriteCoinsReq) (*GetFavoriteCoinsResp, error)
	SetMyFavorites(context.Context, *SetFavoriteCoinsReq) (*SetFavoriteCoinsResp, error)
	mustEmbedUnimplementedWebTSwapServer()
}

// UnimplementedWebTSwapServer must be embedded to have forward compatible implementations.
type UnimplementedWebTSwapServer struct {
}

func (UnimplementedWebTSwapServer) GetCoinDetail(context.Context, *GetCoinDetailReq) (*GetCoinDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinDetail not implemented")
}
func (UnimplementedWebTSwapServer) GetCoinOHLCV(context.Context, *GetCoinOHLCVReq) (*GetCoinOHLCVResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinOHLCV not implemented")
}
func (UnimplementedWebTSwapServer) GetCoinPriceStats(context.Context, *GetPriceStatsReq) (*GetPriceStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinPriceStats not implemented")
}
func (UnimplementedWebTSwapServer) GetCoinQuotes(context.Context, *GetCoinQuotesReq) (*GetCoinQuotesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinQuotes not implemented")
}
func (UnimplementedWebTSwapServer) GetCoinsList(context.Context, *GetCoinListsReq) (*GetCoinListsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinsList not implemented")
}
func (UnimplementedWebTSwapServer) GetMyFavorites(context.Context, *GetFavoriteCoinsReq) (*GetFavoriteCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyFavorites not implemented")
}
func (UnimplementedWebTSwapServer) SetMyFavorites(context.Context, *SetFavoriteCoinsReq) (*SetFavoriteCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyFavorites not implemented")
}
func (UnimplementedWebTSwapServer) mustEmbedUnimplementedWebTSwapServer() {}

// UnsafeWebTSwapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebTSwapServer will
// result in compilation errors.
type UnsafeWebTSwapServer interface {
	mustEmbedUnimplementedWebTSwapServer()
}

func RegisterWebTSwapServer(s grpc.ServiceRegistrar, srv WebTSwapServer) {
	s.RegisterService(&WebTSwap_ServiceDesc, srv)
}

func _WebTSwap_GetCoinDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTSwapServer).GetCoinDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTSwap_GetCoinDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTSwapServer).GetCoinDetail(ctx, req.(*GetCoinDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTSwap_GetCoinOHLCV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinOHLCVReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTSwapServer).GetCoinOHLCV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTSwap_GetCoinOHLCV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTSwapServer).GetCoinOHLCV(ctx, req.(*GetCoinOHLCVReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTSwap_GetCoinPriceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTSwapServer).GetCoinPriceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTSwap_GetCoinPriceStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTSwapServer).GetCoinPriceStats(ctx, req.(*GetPriceStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTSwap_GetCoinQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinQuotesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTSwapServer).GetCoinQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTSwap_GetCoinQuotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTSwapServer).GetCoinQuotes(ctx, req.(*GetCoinQuotesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTSwap_GetCoinsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinListsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTSwapServer).GetCoinsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTSwap_GetCoinsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTSwapServer).GetCoinsList(ctx, req.(*GetCoinListsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTSwap_GetMyFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteCoinsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTSwapServer).GetMyFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTSwap_GetMyFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTSwapServer).GetMyFavorites(ctx, req.(*GetFavoriteCoinsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebTSwap_SetMyFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFavoriteCoinsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebTSwapServer).SetMyFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebTSwap_SetMyFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebTSwapServer).SetMyFavorites(ctx, req.(*SetFavoriteCoinsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WebTSwap_ServiceDesc is the grpc.ServiceDesc for WebTSwap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebTSwap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webTSwap.webTSwap",
	HandlerType: (*WebTSwapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCoinDetail",
			Handler:    _WebTSwap_GetCoinDetail_Handler,
		},
		{
			MethodName: "getCoinOHLCV",
			Handler:    _WebTSwap_GetCoinOHLCV_Handler,
		},
		{
			MethodName: "getCoinPriceStats",
			Handler:    _WebTSwap_GetCoinPriceStats_Handler,
		},
		{
			MethodName: "getCoinQuotes",
			Handler:    _WebTSwap_GetCoinQuotes_Handler,
		},
		{
			MethodName: "getCoinsList",
			Handler:    _WebTSwap_GetCoinsList_Handler,
		},
		{
			MethodName: "getMyFavorites",
			Handler:    _WebTSwap_GetMyFavorites_Handler,
		},
		{
			MethodName: "setMyFavorites",
			Handler:    _WebTSwap_SetMyFavorites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/web3swap.proto",
}
