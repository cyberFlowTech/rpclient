// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: define/web3swap.proto

package webTSwap

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoinMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Logo         string `protobuf:"bytes,2,opt,name=Logo,proto3" json:"Logo,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Symbol       string `protobuf:"bytes,4,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Slug         string `protobuf:"bytes,5,opt,name=Slug,proto3" json:"Slug,omitempty"`               //
	Description  string `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"` //
	DateAdded    string `protobuf:"bytes,7,opt,name=DateAdded,proto3" json:"DateAdded,omitempty"`     //
	DateLaunched string `protobuf:"bytes,8,opt,name=DateLaunched,proto3" json:"DateLaunched,omitempty"`
	Platform     string `protobuf:"bytes,9,opt,name=Platform,proto3" json:"Platform,omitempty"` //官网地址
	Category     string `protobuf:"bytes,10,opt,name=Category,proto3" json:"Category,omitempty"`
}

func (x *CoinMeta) Reset() {
	*x = CoinMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinMeta) ProtoMessage() {}

func (x *CoinMeta) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinMeta.ProtoReflect.Descriptor instead.
func (*CoinMeta) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{0}
}

func (x *CoinMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoinMeta) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *CoinMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoinMeta) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CoinMeta) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *CoinMeta) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CoinMeta) GetDateAdded() string {
	if x != nil {
		return x.DateAdded
	}
	return ""
}

func (x *CoinMeta) GetDateLaunched() string {
	if x != nil {
		return x.DateLaunched
	}
	return ""
}

func (x *CoinMeta) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *CoinMeta) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Open        float64 `protobuf:"fixed64,1,opt,name=Open,proto3" json:"Open,omitempty"`
	High        float64 `protobuf:"fixed64,2,opt,name=High,proto3" json:"High,omitempty"`     //float64   `json:"high"`
	Low         float64 `protobuf:"fixed64,3,opt,name=Low,proto3" json:"Low,omitempty"`       //float64   `json:"low"`
	Close       float64 `protobuf:"fixed64,4,opt,name=Close,proto3" json:"Close,omitempty"`   //float64   `json:"close"`
	Volume      float64 `protobuf:"fixed64,5,opt,name=Volume,proto3" json:"Volume,omitempty"` //int64     `json:"volume"`
	LastUpdated string  `protobuf:"bytes,6,opt,name=LastUpdated,proto3" json:"LastUpdated,omitempty"`
}

func (x *Quote) Reset() {
	*x = Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{1}
}

func (x *Quote) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Quote) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Quote) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Quote) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Quote) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Quote) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

type CoinOHLCV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                   //        `json:"id"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`               //      `json:"name"`
	Symbol      string `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`           //      string      `json:"symbol"`
	LastUpdated string `protobuf:"bytes,4,opt,name=LastUpdated,proto3" json:"LastUpdated,omitempty"` //`json:"last_updated"`
	TimeOpen    string `protobuf:"bytes,5,opt,name=TimeOpen,proto3" json:"TimeOpen,omitempty"`       //time.Time   `json:"time_open"`
	TimeClose   string `protobuf:"bytes,6,opt,name=TimeClose,proto3" json:"TimeClose,omitempty"`     //interface{} `json:"time_close"`
	TimeHigh    string `protobuf:"bytes,7,opt,name=TimeHigh,proto3" json:"TimeHigh,omitempty"`       //time.Time   `json:"time_high"`
	TimeLow     string `protobuf:"bytes,8,opt,name=TimeLow,proto3" json:"TimeLow,omitempty"`         //time.Time   `json:"time_low"`
	QuoteUsd    *Quote `protobuf:"bytes,9,opt,name=QuoteUsd,proto3" json:"QuoteUsd,omitempty"`
}

func (x *CoinOHLCV) Reset() {
	*x = CoinOHLCV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinOHLCV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinOHLCV) ProtoMessage() {}

func (x *CoinOHLCV) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinOHLCV.ProtoReflect.Descriptor instead.
func (*CoinOHLCV) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{2}
}

func (x *CoinOHLCV) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoinOHLCV) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoinOHLCV) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CoinOHLCV) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *CoinOHLCV) GetTimeOpen() string {
	if x != nil {
		return x.TimeOpen
	}
	return ""
}

func (x *CoinOHLCV) GetTimeClose() string {
	if x != nil {
		return x.TimeClose
	}
	return ""
}

func (x *CoinOHLCV) GetTimeHigh() string {
	if x != nil {
		return x.TimeHigh
	}
	return ""
}

func (x *CoinOHLCV) GetTimeLow() string {
	if x != nil {
		return x.TimeLow
	}
	return ""
}

func (x *CoinOHLCV) GetQuoteUsd() *Quote {
	if x != nil {
		return x.QuoteUsd
	}
	return nil
}

type CoinPerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"` //        `json:"id"`
	Open           float64 `protobuf:"fixed64,2,opt,name=Open,proto3" json:"Open,omitempty"`
	OpenTimestamp  string  `protobuf:"bytes,3,opt,name=OpenTimestamp,proto3" json:"OpenTimestamp,omitempty"`    //time.Time `json:"open_timestamp"`
	High           float64 `protobuf:"fixed64,4,opt,name=High,proto3" json:"High,omitempty"`                    //           float64   `json:"high"`
	HighTimestamp  string  `protobuf:"bytes,5,opt,name=HighTimestamp,proto3" json:"HighTimestamp,omitempty"`    //  time.Time `json:"high_timestamp"`
	Low            float64 `protobuf:"fixed64,6,opt,name=Low,proto3" json:"Low,omitempty"`                      //            float64   `json:"low"`
	LowTimestamp   string  `protobuf:"bytes,7,opt,name=LowTimestamp,proto3" json:"LowTimestamp,omitempty"`      //   time.Time `json:"low_timestamp"`
	Close          float64 `protobuf:"fixed64,8,opt,name=Close,proto3" json:"Close,omitempty"`                  //          float64   `json:"close"`
	CloseTimestamp string  `protobuf:"bytes,9,opt,name=CloseTimestamp,proto3" json:"CloseTimestamp,omitempty"`  // time.Time `json:"close_timestamp"`
	PercentChange  float64 `protobuf:"fixed64,10,opt,name=PercentChange,proto3" json:"PercentChange,omitempty"` //  float64   `json:"percent_change"`
	PriceChange    float64 `protobuf:"fixed64,11,opt,name=PriceChange,proto3" json:"PriceChange,omitempty"`     //    float64   `json:"price_change"`
}

func (x *CoinPerformance) Reset() {
	*x = CoinPerformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinPerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinPerformance) ProtoMessage() {}

func (x *CoinPerformance) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinPerformance.ProtoReflect.Descriptor instead.
func (*CoinPerformance) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{3}
}

func (x *CoinPerformance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoinPerformance) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *CoinPerformance) GetOpenTimestamp() string {
	if x != nil {
		return x.OpenTimestamp
	}
	return ""
}

func (x *CoinPerformance) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *CoinPerformance) GetHighTimestamp() string {
	if x != nil {
		return x.HighTimestamp
	}
	return ""
}

func (x *CoinPerformance) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *CoinPerformance) GetLowTimestamp() string {
	if x != nil {
		return x.LowTimestamp
	}
	return ""
}

func (x *CoinPerformance) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *CoinPerformance) GetCloseTimestamp() string {
	if x != nil {
		return x.CloseTimestamp
	}
	return ""
}

func (x *CoinPerformance) GetPercentChange() float64 {
	if x != nil {
		return x.PercentChange
	}
	return 0
}

func (x *CoinPerformance) GetPriceChange() float64 {
	if x != nil {
		return x.PriceChange
	}
	return 0
}

type CoinPriceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ohlcv       *CoinOHLCV       `protobuf:"bytes,1,opt,name=Ohlcv,proto3" json:"Ohlcv,omitempty"`
	Performance *CoinPerformance `protobuf:"bytes,2,opt,name=Performance,proto3" json:"Performance,omitempty"`
}

func (x *CoinPriceStats) Reset() {
	*x = CoinPriceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinPriceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinPriceStats) ProtoMessage() {}

func (x *CoinPriceStats) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinPriceStats.ProtoReflect.Descriptor instead.
func (*CoinPriceStats) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{4}
}

func (x *CoinPriceStats) GetOhlcv() *CoinOHLCV {
	if x != nil {
		return x.Ohlcv
	}
	return nil
}

func (x *CoinPriceStats) GetPerformance() *CoinPerformance {
	if x != nil {
		return x.Performance
	}
	return nil
}

type CoinSwapStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price                 float64 `protobuf:"fixed64,1,opt,name=Price,proto3" json:"Price,omitempty"`
	Volume24H             float64 `protobuf:"fixed64,2,opt,name=Volume24H,proto3" json:"Volume24H,omitempty"`                         //float64   `json:"volume_24h"`
	VolumeChange24H       float64 `protobuf:"fixed64,3,opt,name=VolumeChange24H,proto3" json:"VolumeChange24H,omitempty"`             //float64   `json:"volume_change_24h"`
	PercentChange1H       float64 `protobuf:"fixed64,4,opt,name=PercentChange1H,proto3" json:"PercentChange1H,omitempty"`             //float64   `json:"percent_change_1h"`
	PercentChange24H      float64 `protobuf:"fixed64,5,opt,name=PercentChange24H,proto3" json:"PercentChange24H,omitempty"`           //float64   `json:"percent_change_24h"`
	PercentChange7D       float64 `protobuf:"fixed64,6,opt,name=PercentChange7D,proto3" json:"PercentChange7D,omitempty"`             //float64   `json:"percent_change_7d"`
	MarketCap             float64 `protobuf:"fixed64,7,opt,name=MarketCap,proto3" json:"MarketCap,omitempty"`                         //float64   `json:"market_cap"`
	MarketCapDominance    float64 `protobuf:"fixed64,8,opt,name=MarketCapDominance,proto3" json:"MarketCapDominance,omitempty"`       //float64   `json:"market_cap_dominance"`
	FullyDilutedMarketCap float64 `protobuf:"fixed64,9,opt,name=FullyDilutedMarketCap,proto3" json:"FullyDilutedMarketCap,omitempty"` //float64   `json:"fully_diluted_market_cap"`
	LastUpdated           string  `protobuf:"bytes,10,opt,name=LastUpdated,proto3" json:"LastUpdated,omitempty"`                      //time.Time `json:"last_updated"`
}

func (x *CoinSwapStat) Reset() {
	*x = CoinSwapStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinSwapStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinSwapStat) ProtoMessage() {}

func (x *CoinSwapStat) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinSwapStat.ProtoReflect.Descriptor instead.
func (*CoinSwapStat) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{5}
}

func (x *CoinSwapStat) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CoinSwapStat) GetVolume24H() float64 {
	if x != nil {
		return x.Volume24H
	}
	return 0
}

func (x *CoinSwapStat) GetVolumeChange24H() float64 {
	if x != nil {
		return x.VolumeChange24H
	}
	return 0
}

func (x *CoinSwapStat) GetPercentChange1H() float64 {
	if x != nil {
		return x.PercentChange1H
	}
	return 0
}

func (x *CoinSwapStat) GetPercentChange24H() float64 {
	if x != nil {
		return x.PercentChange24H
	}
	return 0
}

func (x *CoinSwapStat) GetPercentChange7D() float64 {
	if x != nil {
		return x.PercentChange7D
	}
	return 0
}

func (x *CoinSwapStat) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *CoinSwapStat) GetMarketCapDominance() float64 {
	if x != nil {
		return x.MarketCapDominance
	}
	return 0
}

func (x *CoinSwapStat) GetFullyDilutedMarketCap() float64 {
	if x != nil {
		return x.FullyDilutedMarketCap
	}
	return 0
}

func (x *CoinSwapStat) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

type CoinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumMarketPairs    int64         `protobuf:"varint,1,opt,name=NumMarketPairs,proto3" json:"NumMarketPairs,omitempty"`        //    `json:"num_market_pairs"`
	CirculatingSupply float64       `protobuf:"fixed64,2,opt,name=CirculatingSupply,proto3" json:"CirculatingSupply,omitempty"` //    `json:"circulating_supply"`
	TotalSupply       float64       `protobuf:"fixed64,3,opt,name=TotalSupply,proto3" json:"TotalSupply,omitempty"`             //         `json:"total_supply"`
	MaxSupply         float64       `protobuf:"fixed64,4,opt,name=MaxSupply,proto3" json:"MaxSupply,omitempty"`                 //         float64   `json:"max_supply"`
	InfiniteSupply    bool          `protobuf:"varint,5,opt,name=InfiniteSupply,proto3" json:"InfiniteSupply,omitempty"`        //    bool      `json:"infinite_supply"`
	LastUpdated       string        `protobuf:"bytes,6,opt,name=LastUpdated,proto3" json:"LastUpdated,omitempty"`               //       time.Time `json:"last_updated"`
	DateAdded         string        `protobuf:"bytes,7,opt,name=DateAdded,proto3" json:"DateAdded,omitempty"`                   //         time.Time `json:"date_added"`
	UsdQuote          *CoinSwapStat `protobuf:"bytes,8,opt,name=UsdQuote,proto3" json:"UsdQuote,omitempty"`
}

func (x *CoinData) Reset() {
	*x = CoinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinData) ProtoMessage() {}

func (x *CoinData) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinData.ProtoReflect.Descriptor instead.
func (*CoinData) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{6}
}

func (x *CoinData) GetNumMarketPairs() int64 {
	if x != nil {
		return x.NumMarketPairs
	}
	return 0
}

func (x *CoinData) GetCirculatingSupply() float64 {
	if x != nil {
		return x.CirculatingSupply
	}
	return 0
}

func (x *CoinData) GetTotalSupply() float64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

func (x *CoinData) GetMaxSupply() float64 {
	if x != nil {
		return x.MaxSupply
	}
	return 0
}

func (x *CoinData) GetInfiniteSupply() bool {
	if x != nil {
		return x.InfiniteSupply
	}
	return false
}

func (x *CoinData) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *CoinData) GetDateAdded() string {
	if x != nil {
		return x.DateAdded
	}
	return ""
}

func (x *CoinData) GetUsdQuote() *CoinSwapStat {
	if x != nil {
		return x.UsdQuote
	}
	return nil
}

type CoinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinMeta `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
	Data *CoinData `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *CoinInfo) Reset() {
	*x = CoinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinInfo) ProtoMessage() {}

func (x *CoinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinInfo.ProtoReflect.Descriptor instead.
func (*CoinInfo) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{7}
}

func (x *CoinInfo) GetInfo() *CoinMeta {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CoinInfo) GetData() *CoinData {
	if x != nil {
		return x.Data
	}
	return nil
}

//交易历史
type CoinQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time              string  `protobuf:"bytes,1,opt,name=Time,proto3" json:"Time,omitempty"` //"timestamp": "2018-06-22T19:34:33.000Z",
	Price             float64 `protobuf:"fixed64,2,opt,name=Price,proto3" json:"Price,omitempty"`
	Volume24H         float64 `protobuf:"fixed64,3,opt,name=Volume24H,proto3" json:"Volume24H,omitempty"`
	MarketCap         float64 `protobuf:"fixed64,4,opt,name=MarketCap,proto3" json:"MarketCap,omitempty"`
	CirculatingSupply float64 `protobuf:"fixed64,5,opt,name=CirculatingSupply,proto3" json:"CirculatingSupply,omitempty"`
	TotalSupply       float64 `protobuf:"fixed64,6,opt,name=TotalSupply,proto3" json:"TotalSupply,omitempty"`
}

func (x *CoinQuote) Reset() {
	*x = CoinQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinQuote) ProtoMessage() {}

func (x *CoinQuote) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinQuote.ProtoReflect.Descriptor instead.
func (*CoinQuote) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{8}
}

func (x *CoinQuote) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *CoinQuote) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CoinQuote) GetVolume24H() float64 {
	if x != nil {
		return x.Volume24H
	}
	return 0
}

func (x *CoinQuote) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *CoinQuote) GetCirculatingSupply() float64 {
	if x != nil {
		return x.CirculatingSupply
	}
	return 0
}

func (x *CoinQuote) GetTotalSupply() float64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

type CoinQuotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval string       `protobuf:"bytes,1,opt,name=Interval,proto3" json:"Interval,omitempty"`
	Quotes   []*CoinQuote `protobuf:"bytes,2,rep,name=Quotes,proto3" json:"Quotes,omitempty"`
}

func (x *CoinQuotes) Reset() {
	*x = CoinQuotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinQuotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinQuotes) ProtoMessage() {}

func (x *CoinQuotes) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinQuotes.ProtoReflect.Descriptor instead.
func (*CoinQuotes) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{9}
}

func (x *CoinQuotes) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *CoinQuotes) GetQuotes() []*CoinQuote {
	if x != nil {
		return x.Quotes
	}
	return nil
}

type GetCoinDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	CoinIds string `protobuf:"bytes,2,opt,name=CoinIds,proto3" json:"CoinIds,omitempty"` //,分隔的ids
	IsStats bool   `protobuf:"varint,3,opt,name=IsStats,proto3" json:"IsStats,omitempty"`
}

func (x *GetCoinDetailReq) Reset() {
	*x = GetCoinDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinDetailReq) ProtoMessage() {}

func (x *GetCoinDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinDetailReq.ProtoReflect.Descriptor instead.
func (*GetCoinDetailReq) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{10}
}

func (x *GetCoinDetailReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetCoinDetailReq) GetCoinIds() string {
	if x != nil {
		return x.CoinIds
	}
	return ""
}

func (x *GetCoinDetailReq) GetIsStats() bool {
	if x != nil {
		return x.IsStats
	}
	return false
}

type GetCoinDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*CoinInfo `protobuf:"bytes,1,rep,name=Coins,proto3" json:"Coins,omitempty"`
}

func (x *GetCoinDetailResp) Reset() {
	*x = GetCoinDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinDetailResp) ProtoMessage() {}

func (x *GetCoinDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinDetailResp.ProtoReflect.Descriptor instead.
func (*GetCoinDetailResp) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{11}
}

func (x *GetCoinDetailResp) GetCoins() []*CoinInfo {
	if x != nil {
		return x.Coins
	}
	return nil
}

type GetCoinOHLCVReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	CoinIds string `protobuf:"bytes,2,opt,name=CoinIds,proto3" json:"CoinIds,omitempty"`
}

func (x *GetCoinOHLCVReq) Reset() {
	*x = GetCoinOHLCVReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinOHLCVReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinOHLCVReq) ProtoMessage() {}

func (x *GetCoinOHLCVReq) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinOHLCVReq.ProtoReflect.Descriptor instead.
func (*GetCoinOHLCVReq) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{12}
}

func (x *GetCoinOHLCVReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetCoinOHLCVReq) GetCoinIds() string {
	if x != nil {
		return x.CoinIds
	}
	return ""
}

type GetCoinOHLCVResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinOHLCVs []*CoinOHLCV `protobuf:"bytes,1,rep,name=CoinOHLCVs,proto3" json:"CoinOHLCVs,omitempty"`
}

func (x *GetCoinOHLCVResp) Reset() {
	*x = GetCoinOHLCVResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinOHLCVResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinOHLCVResp) ProtoMessage() {}

func (x *GetCoinOHLCVResp) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinOHLCVResp.ProtoReflect.Descriptor instead.
func (*GetCoinOHLCVResp) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{13}
}

func (x *GetCoinOHLCVResp) GetCoinOHLCVs() []*CoinOHLCV {
	if x != nil {
		return x.CoinOHLCVs
	}
	return nil
}

type GetPriceStatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	CoinIds string `protobuf:"bytes,2,opt,name=CoinIds,proto3" json:"CoinIds,omitempty"`
}

func (x *GetPriceStatsReq) Reset() {
	*x = GetPriceStatsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriceStatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriceStatsReq) ProtoMessage() {}

func (x *GetPriceStatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriceStatsReq.ProtoReflect.Descriptor instead.
func (*GetPriceStatsReq) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{14}
}

func (x *GetPriceStatsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetPriceStatsReq) GetCoinIds() string {
	if x != nil {
		return x.CoinIds
	}
	return ""
}

type GetPriceStatsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceStats []*CoinPriceStats `protobuf:"bytes,1,rep,name=PriceStats,proto3" json:"PriceStats,omitempty"`
}

func (x *GetPriceStatsResp) Reset() {
	*x = GetPriceStatsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriceStatsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriceStatsResp) ProtoMessage() {}

func (x *GetPriceStatsResp) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriceStatsResp.ProtoReflect.Descriptor instead.
func (*GetPriceStatsResp) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{15}
}

func (x *GetPriceStatsResp) GetPriceStats() []*CoinPriceStats {
	if x != nil {
		return x.PriceStats
	}
	return nil
}

type GetCoinQuotesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	CoinId    string `protobuf:"bytes,2,opt,name=CoinId,proto3" json:"CoinId,omitempty"`
	Interval  string `protobuf:"bytes,3,opt,name=Interval,proto3" json:"Interval,omitempty"`
	StartTime string `protobuf:"bytes,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime   string `protobuf:"bytes,5,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
}

func (x *GetCoinQuotesReq) Reset() {
	*x = GetCoinQuotesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinQuotesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinQuotesReq) ProtoMessage() {}

func (x *GetCoinQuotesReq) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinQuotesReq.ProtoReflect.Descriptor instead.
func (*GetCoinQuotesReq) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{16}
}

func (x *GetCoinQuotesReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetCoinQuotesReq) GetCoinId() string {
	if x != nil {
		return x.CoinId
	}
	return ""
}

func (x *GetCoinQuotesReq) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *GetCoinQuotesReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetCoinQuotesReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type GetCoinQuotesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinId string      `protobuf:"bytes,1,opt,name=CoinId,proto3" json:"CoinId,omitempty"`
	Quotes *CoinQuotes `protobuf:"bytes,2,opt,name=Quotes,proto3" json:"Quotes,omitempty"`
}

func (x *GetCoinQuotesResp) Reset() {
	*x = GetCoinQuotesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinQuotesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinQuotesResp) ProtoMessage() {}

func (x *GetCoinQuotesResp) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinQuotesResp.ProtoReflect.Descriptor instead.
func (*GetCoinQuotesResp) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{17}
}

func (x *GetCoinQuotesResp) GetCoinId() string {
	if x != nil {
		return x.CoinId
	}
	return ""
}

func (x *GetCoinQuotesResp) GetQuotes() *CoinQuotes {
	if x != nil {
		return x.Quotes
	}
	return nil
}

type GetCoinListsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListId   int64  `protobuf:"varint,1,opt,name=ListId,proto3" json:"ListId,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Page     int64  `protobuf:"varint,3,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize int64  `protobuf:"varint,4,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *GetCoinListsReq) Reset() {
	*x = GetCoinListsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinListsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinListsReq) ProtoMessage() {}

func (x *GetCoinListsReq) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinListsReq.ProtoReflect.Descriptor instead.
func (*GetCoinListsReq) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{18}
}

func (x *GetCoinListsReq) GetListId() int64 {
	if x != nil {
		return x.ListId
	}
	return 0
}

func (x *GetCoinListsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetCoinListsReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetCoinListsReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetCoinListsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*CoinInfo `protobuf:"bytes,1,rep,name=Coins,proto3" json:"Coins,omitempty"`
}

func (x *GetCoinListsResp) Reset() {
	*x = GetCoinListsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinListsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinListsResp) ProtoMessage() {}

func (x *GetCoinListsResp) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinListsResp.ProtoReflect.Descriptor instead.
func (*GetCoinListsResp) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{19}
}

func (x *GetCoinListsResp) GetCoins() []*CoinInfo {
	if x != nil {
		return x.Coins
	}
	return nil
}

//收藏
type GetFavoriteCoinsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Page     int64  `protobuf:"varint,2,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize int64  `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *GetFavoriteCoinsReq) Reset() {
	*x = GetFavoriteCoinsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoriteCoinsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteCoinsReq) ProtoMessage() {}

func (x *GetFavoriteCoinsReq) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteCoinsReq.ProtoReflect.Descriptor instead.
func (*GetFavoriteCoinsReq) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{20}
}

func (x *GetFavoriteCoinsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetFavoriteCoinsReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetFavoriteCoinsReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetFavoriteCoinsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*CoinInfo `protobuf:"bytes,1,rep,name=Coins,proto3" json:"Coins,omitempty"`
}

func (x *GetFavoriteCoinsResp) Reset() {
	*x = GetFavoriteCoinsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoriteCoinsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteCoinsResp) ProtoMessage() {}

func (x *GetFavoriteCoinsResp) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteCoinsResp.ProtoReflect.Descriptor instead.
func (*GetFavoriteCoinsResp) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{21}
}

func (x *GetFavoriteCoinsResp) GetCoins() []*CoinInfo {
	if x != nil {
		return x.Coins
	}
	return nil
}

type SetFavoriteCoinsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Opt    string `protobuf:"bytes,3,opt,name=Opt,proto3" json:"Opt,omitempty"` //add，del，sort
	Pos    string `protobuf:"bytes,4,opt,name=Pos,proto3" json:"Pos,omitempty"` //id:index,和ids保持一致,多个，分隔
}

func (x *SetFavoriteCoinsReq) Reset() {
	*x = SetFavoriteCoinsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFavoriteCoinsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFavoriteCoinsReq) ProtoMessage() {}

func (x *SetFavoriteCoinsReq) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFavoriteCoinsReq.ProtoReflect.Descriptor instead.
func (*SetFavoriteCoinsReq) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{22}
}

func (x *SetFavoriteCoinsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetFavoriteCoinsReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetFavoriteCoinsReq) GetOpt() string {
	if x != nil {
		return x.Opt
	}
	return ""
}

func (x *SetFavoriteCoinsReq) GetPos() string {
	if x != nil {
		return x.Pos
	}
	return ""
}

type SetFavoriteCoinsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int64  `protobuf:"varint,1,opt,name=Ret,proto3" json:"Ret,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (x *SetFavoriteCoinsResp) Reset() {
	*x = SetFavoriteCoinsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_web3swap_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFavoriteCoinsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFavoriteCoinsResp) ProtoMessage() {}

func (x *SetFavoriteCoinsResp) ProtoReflect() protoreflect.Message {
	mi := &file_define_web3swap_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFavoriteCoinsResp.ProtoReflect.Descriptor instead.
func (*SetFavoriteCoinsResp) Descriptor() ([]byte, []int) {
	return file_define_web3swap_proto_rawDescGZIP(), []int{23}
}

func (x *SetFavoriteCoinsResp) GetRet() int64 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *SetFavoriteCoinsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_define_web3swap_proto protoreflect.FileDescriptor

var file_define_web3swap_proto_rawDesc = []byte{
	0x0a, 0x15, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2f, 0x77, 0x65, 0x62, 0x33, 0x73, 0x77, 0x61,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61,
	0x70, 0x22, 0x8a, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x6f,
	0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c,
	0x75, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x91,
	0x01, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x48, 0x69, 0x67, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x4c,
	0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x48, 0x4c, 0x43, 0x56,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x69, 0x67, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x69, 0x67, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x77, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x77, 0x12, 0x2b,
	0x0a, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x64, 0x22, 0xd1, 0x02, 0x0a, 0x0f,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x69, 0x67,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x48, 0x69, 0x67, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x48, 0x69, 0x67, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x4c, 0x6f, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x6f, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x78, 0x0a, 0x0e, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x29, 0x0a, 0x05, 0x4f, 0x68, 0x6c, 0x63, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x4f, 0x48, 0x4c, 0x43, 0x56, 0x52, 0x05, 0x4f, 0x68, 0x6c, 0x63, 0x76, 0x12, 0x3b, 0x0a, 0x0b,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x92, 0x03, 0x0a, 0x0c, 0x43, 0x6f,
	0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x48, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x48, 0x12, 0x28,
	0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x34,
	0x48, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x34, 0x48, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x31, 0x48, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x31, 0x48, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x32, 0x34, 0x48, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x34, 0x48, 0x12, 0x28,
	0x0a, 0x0f, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x37,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x37, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x61, 0x70, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x44, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x44,
	0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x44, 0x69, 0x6c, 0x75,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xbc,
	0x02, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x4e,
	0x75, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x61,
	0x69, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x6e, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x44, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x55, 0x73, 0x64,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65,
	0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x08, 0x55, 0x73, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x22, 0x5a, 0x0a,
	0x08, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77,
	0x61, 0x70, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc1, 0x01, 0x0a, 0x09, 0x43, 0x6f,
	0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x48, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x48, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x2c, 0x0a,
	0x11, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x22, 0x55, 0x0a,
	0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77,
	0x61, 0x70, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x06, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x22, 0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x05, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53,
	0x77, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x22, 0x43, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x48,
	0x4c, 0x43, 0x56, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x4f, 0x48, 0x4c, 0x43, 0x56, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a,
	0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x48, 0x4c, 0x43, 0x56, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x4f, 0x48, 0x4c, 0x43, 0x56, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x48, 0x4c, 0x43, 0x56,
	0x73, 0x22, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0a,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x59, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77,
	0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x73, 0x52, 0x06, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3c, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x28, 0x0a, 0x05, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x5d, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x40, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x28, 0x0a, 0x05, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x61, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4f,
	0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4f, 0x70, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x22,
	0x3a, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x32, 0x9c, 0x04, 0x0a, 0x08,
	0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x12, 0x48, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x54,
	0x53, 0x77, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x45, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x48, 0x4c,
	0x43, 0x56, 0x12, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x48, 0x4c, 0x43, 0x56, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x4f, 0x48, 0x4c, 0x43, 0x56, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x11, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1a,
	0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x77, 0x65, 0x62,
	0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53,
	0x77, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x45, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x77,
	0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x4d,
	0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x77, 0x65, 0x62,
	0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x54,
	0x53, 0x77, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x65, 0x74,
	0x4d, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x77, 0x65,
	0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x77, 0x65, 0x62,
	0x54, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f,
	0x77, 0x65, 0x62, 0x54, 0x53, 0x77, 0x61, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_define_web3swap_proto_rawDescOnce sync.Once
	file_define_web3swap_proto_rawDescData = file_define_web3swap_proto_rawDesc
)

func file_define_web3swap_proto_rawDescGZIP() []byte {
	file_define_web3swap_proto_rawDescOnce.Do(func() {
		file_define_web3swap_proto_rawDescData = protoimpl.X.CompressGZIP(file_define_web3swap_proto_rawDescData)
	})
	return file_define_web3swap_proto_rawDescData
}

var file_define_web3swap_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_define_web3swap_proto_goTypes = []interface{}{
	(*CoinMeta)(nil),             // 0: webTSwap.CoinMeta
	(*Quote)(nil),                // 1: webTSwap.Quote
	(*CoinOHLCV)(nil),            // 2: webTSwap.CoinOHLCV
	(*CoinPerformance)(nil),      // 3: webTSwap.CoinPerformance
	(*CoinPriceStats)(nil),       // 4: webTSwap.CoinPriceStats
	(*CoinSwapStat)(nil),         // 5: webTSwap.CoinSwapStat
	(*CoinData)(nil),             // 6: webTSwap.CoinData
	(*CoinInfo)(nil),             // 7: webTSwap.CoinInfo
	(*CoinQuote)(nil),            // 8: webTSwap.CoinQuote
	(*CoinQuotes)(nil),           // 9: webTSwap.CoinQuotes
	(*GetCoinDetailReq)(nil),     // 10: webTSwap.GetCoinDetailReq
	(*GetCoinDetailResp)(nil),    // 11: webTSwap.GetCoinDetailResp
	(*GetCoinOHLCVReq)(nil),      // 12: webTSwap.GetCoinOHLCVReq
	(*GetCoinOHLCVResp)(nil),     // 13: webTSwap.GetCoinOHLCVResp
	(*GetPriceStatsReq)(nil),     // 14: webTSwap.GetPriceStatsReq
	(*GetPriceStatsResp)(nil),    // 15: webTSwap.GetPriceStatsResp
	(*GetCoinQuotesReq)(nil),     // 16: webTSwap.GetCoinQuotesReq
	(*GetCoinQuotesResp)(nil),    // 17: webTSwap.GetCoinQuotesResp
	(*GetCoinListsReq)(nil),      // 18: webTSwap.GetCoinListsReq
	(*GetCoinListsResp)(nil),     // 19: webTSwap.GetCoinListsResp
	(*GetFavoriteCoinsReq)(nil),  // 20: webTSwap.GetFavoriteCoinsReq
	(*GetFavoriteCoinsResp)(nil), // 21: webTSwap.GetFavoriteCoinsResp
	(*SetFavoriteCoinsReq)(nil),  // 22: webTSwap.SetFavoriteCoinsReq
	(*SetFavoriteCoinsResp)(nil), // 23: webTSwap.SetFavoriteCoinsResp
}
var file_define_web3swap_proto_depIdxs = []int32{
	1,  // 0: webTSwap.CoinOHLCV.QuoteUsd:type_name -> webTSwap.Quote
	2,  // 1: webTSwap.CoinPriceStats.Ohlcv:type_name -> webTSwap.CoinOHLCV
	3,  // 2: webTSwap.CoinPriceStats.Performance:type_name -> webTSwap.CoinPerformance
	5,  // 3: webTSwap.CoinData.UsdQuote:type_name -> webTSwap.CoinSwapStat
	0,  // 4: webTSwap.CoinInfo.Info:type_name -> webTSwap.CoinMeta
	6,  // 5: webTSwap.CoinInfo.Data:type_name -> webTSwap.CoinData
	8,  // 6: webTSwap.CoinQuotes.Quotes:type_name -> webTSwap.CoinQuote
	7,  // 7: webTSwap.GetCoinDetailResp.Coins:type_name -> webTSwap.CoinInfo
	2,  // 8: webTSwap.GetCoinOHLCVResp.CoinOHLCVs:type_name -> webTSwap.CoinOHLCV
	4,  // 9: webTSwap.GetPriceStatsResp.PriceStats:type_name -> webTSwap.CoinPriceStats
	9,  // 10: webTSwap.GetCoinQuotesResp.Quotes:type_name -> webTSwap.CoinQuotes
	7,  // 11: webTSwap.GetCoinListsResp.Coins:type_name -> webTSwap.CoinInfo
	7,  // 12: webTSwap.GetFavoriteCoinsResp.Coins:type_name -> webTSwap.CoinInfo
	10, // 13: webTSwap.webTSwap.getCoinDetail:input_type -> webTSwap.GetCoinDetailReq
	12, // 14: webTSwap.webTSwap.getCoinOHLCV:input_type -> webTSwap.GetCoinOHLCVReq
	14, // 15: webTSwap.webTSwap.getCoinPriceStats:input_type -> webTSwap.GetPriceStatsReq
	16, // 16: webTSwap.webTSwap.getCoinQuotes:input_type -> webTSwap.GetCoinQuotesReq
	18, // 17: webTSwap.webTSwap.getCoinsList:input_type -> webTSwap.GetCoinListsReq
	20, // 18: webTSwap.webTSwap.getMyFavorites:input_type -> webTSwap.GetFavoriteCoinsReq
	22, // 19: webTSwap.webTSwap.setMyFavorites:input_type -> webTSwap.SetFavoriteCoinsReq
	11, // 20: webTSwap.webTSwap.getCoinDetail:output_type -> webTSwap.GetCoinDetailResp
	13, // 21: webTSwap.webTSwap.getCoinOHLCV:output_type -> webTSwap.GetCoinOHLCVResp
	15, // 22: webTSwap.webTSwap.getCoinPriceStats:output_type -> webTSwap.GetPriceStatsResp
	17, // 23: webTSwap.webTSwap.getCoinQuotes:output_type -> webTSwap.GetCoinQuotesResp
	19, // 24: webTSwap.webTSwap.getCoinsList:output_type -> webTSwap.GetCoinListsResp
	21, // 25: webTSwap.webTSwap.getMyFavorites:output_type -> webTSwap.GetFavoriteCoinsResp
	23, // 26: webTSwap.webTSwap.setMyFavorites:output_type -> webTSwap.SetFavoriteCoinsResp
	20, // [20:27] is the sub-list for method output_type
	13, // [13:20] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_define_web3swap_proto_init() }
func file_define_web3swap_proto_init() {
	if File_define_web3swap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_define_web3swap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinOHLCV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinPerformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinPriceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinSwapStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinQuotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinOHLCVReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinOHLCVResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriceStatsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriceStatsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinQuotesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinQuotesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinListsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinListsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFavoriteCoinsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFavoriteCoinsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFavoriteCoinsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_web3swap_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFavoriteCoinsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_define_web3swap_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_define_web3swap_proto_goTypes,
		DependencyIndexes: file_define_web3swap_proto_depIdxs,
		MessageInfos:      file_define_web3swap_proto_msgTypes,
	}.Build()
	File_define_web3swap_proto = out.File
	file_define_web3swap_proto_rawDesc = nil
	file_define_web3swap_proto_goTypes = nil
	file_define_web3swap_proto_depIdxs = nil
}
