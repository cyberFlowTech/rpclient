// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: define/dynamicsrv.proto

package dynamicsrv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dynamicsrv_PublishDynamic_FullMethodName                 = "/dynamicsrv.Dynamicsrv/PublishDynamic"
	Dynamicsrv_UpdateDynamic_FullMethodName                  = "/dynamicsrv.Dynamicsrv/UpdateDynamic"
	Dynamicsrv_GetDiscoverDynamicList_FullMethodName         = "/dynamicsrv.Dynamicsrv/GetDiscoverDynamicList"
	Dynamicsrv_GetClubDynamicList_FullMethodName             = "/dynamicsrv.Dynamicsrv/GetClubDynamicList"
	Dynamicsrv_GetUserDynamicList_FullMethodName             = "/dynamicsrv.Dynamicsrv/GetUserDynamicList"
	Dynamicsrv_GetMyDynamicList_FullMethodName               = "/dynamicsrv.Dynamicsrv/GetMyDynamicList"
	Dynamicsrv_DynamicInfo_FullMethodName                    = "/dynamicsrv.Dynamicsrv/DynamicInfo"
	Dynamicsrv_DeleteDynamic_FullMethodName                  = "/dynamicsrv.Dynamicsrv/DeleteDynamic"
	Dynamicsrv_Praise_FullMethodName                         = "/dynamicsrv.Dynamicsrv/Praise"
	Dynamicsrv_HasPraise_FullMethodName                      = "/dynamicsrv.Dynamicsrv/HasPraise"
	Dynamicsrv_Collect_FullMethodName                        = "/dynamicsrv.Dynamicsrv/Collect"
	Dynamicsrv_HasCollect_FullMethodName                     = "/dynamicsrv.Dynamicsrv/HasCollect"
	Dynamicsrv_CollectList_FullMethodName                    = "/dynamicsrv.Dynamicsrv/CollectList"
	Dynamicsrv_Focus_FullMethodName                          = "/dynamicsrv.Dynamicsrv/Focus"
	Dynamicsrv_HasFocus_FullMethodName                       = "/dynamicsrv.Dynamicsrv/HasFocus"
	Dynamicsrv_ShareDynamic_FullMethodName                   = "/dynamicsrv.Dynamicsrv/ShareDynamic"
	Dynamicsrv_FocusList_FullMethodName                      = "/dynamicsrv.Dynamicsrv/FocusList"
	Dynamicsrv_FansList_FullMethodName                       = "/dynamicsrv.Dynamicsrv/FansList"
	Dynamicsrv_GetCommentList_FullMethodName                 = "/dynamicsrv.Dynamicsrv/GetCommentList"
	Dynamicsrv_GetChildCommentList_FullMethodName            = "/dynamicsrv.Dynamicsrv/GetChildCommentList"
	Dynamicsrv_Comment_FullMethodName                        = "/dynamicsrv.Dynamicsrv/Comment"
	Dynamicsrv_DeleteComment_FullMethodName                  = "/dynamicsrv.Dynamicsrv/DeleteComment"
	Dynamicsrv_GetUserFansCountAndFocusCount_FullMethodName  = "/dynamicsrv.Dynamicsrv/GetUserFansCountAndFocusCount"
	Dynamicsrv_GetUsersFansCountAndFocusCount_FullMethodName = "/dynamicsrv.Dynamicsrv/GetUsersFansCountAndFocusCount"
)

// DynamicsrvClient is the client API for Dynamicsrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DynamicsrvClient interface {
	// 发布动态
	PublishDynamic(ctx context.Context, in *PublishDynamicRequest, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 修改动态
	UpdateDynamic(ctx context.Context, in *UpdateDynamicRequest, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 发现页动态列表
	GetDiscoverDynamicList(ctx context.Context, in *DiscoverDynamicListRequest, opts ...grpc.CallOption) (*DiscoverDynamicListResponse, error)
	// 部落动态列表（由部落服务去实现）
	GetClubDynamicList(ctx context.Context, in *ClubDynamicListRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	// 指定用户动态列表
	GetUserDynamicList(ctx context.Context, in *UserDynamicListRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	// 我的动态列表
	GetMyDynamicList(ctx context.Context, in *UserDynamicListRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	// 动态详情
	DynamicInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	// 删除动态
	DeleteDynamic(ctx context.Context, in *DeleteDynamicRequest, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 点赞动态/评论
	Praise(ctx context.Context, in *PraiseRequest, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 该用户是否已点赞动态或点赞动态下的评论
	HasPraise(ctx context.Context, in *HasPraiseRequest, opts ...grpc.CallOption) (*HasPraiseResponse, error)
	// 收藏动态
	Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 该用户是否已收藏该动态
	HasCollect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*HasCollectResponse, error)
	// 用户收藏列表
	CollectList(ctx context.Context, in *CollectListRequest, opts ...grpc.CallOption) (*CollectListResponse, error)
	// 关注动态作者
	Focus(ctx context.Context, in *FocusRequest, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 是否已经关注该作者
	HasFocus(ctx context.Context, in *FocusRequest, opts ...grpc.CallOption) (*HasFocusResponse, error)
	// 动态分享数,只增不减 -- 客户端上报main/data/callback
	ShareDynamic(ctx context.Context, in *ShareDynamicRequest, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 用户关注列表
	FocusList(ctx context.Context, in *FocusListRequest, opts ...grpc.CallOption) (*FocusListResponse, error)
	// 用户粉丝列表
	FansList(ctx context.Context, in *FansListRequest, opts ...grpc.CallOption) (*FansListResponse, error)
	// 评论列表
	GetCommentList(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (*CommentListResponse, error)
	// 子评论评论列表
	GetChildCommentList(ctx context.Context, in *ChildCommentListRequest, opts ...grpc.CallOption) (*ChildCommentListResponse, error)
	// 评论
	Comment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 删除评论
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*APICommonResponse, error)
	// 用户粉丝数和关注数
	GetUserFansCountAndFocusCount(ctx context.Context, in *UserFansCountAndFocusCountRequest, opts ...grpc.CallOption) (*UserFansCountAndFocusCountResponse, error)
	// 获取多个用户的粉丝数和关注数
	GetUsersFansCountAndFocusCount(ctx context.Context, in *UsersFansCountAndFocusCountRequest, opts ...grpc.CallOption) (*UsersFansCountAndFocusCountResponse, error)
}

type dynamicsrvClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicsrvClient(cc grpc.ClientConnInterface) DynamicsrvClient {
	return &dynamicsrvClient{cc}
}

func (c *dynamicsrvClient) PublishDynamic(ctx context.Context, in *PublishDynamicRequest, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_PublishDynamic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) UpdateDynamic(ctx context.Context, in *UpdateDynamicRequest, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_UpdateDynamic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) GetDiscoverDynamicList(ctx context.Context, in *DiscoverDynamicListRequest, opts ...grpc.CallOption) (*DiscoverDynamicListResponse, error) {
	out := new(DiscoverDynamicListResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_GetDiscoverDynamicList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) GetClubDynamicList(ctx context.Context, in *ClubDynamicListRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_GetClubDynamicList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) GetUserDynamicList(ctx context.Context, in *UserDynamicListRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_GetUserDynamicList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) GetMyDynamicList(ctx context.Context, in *UserDynamicListRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_GetMyDynamicList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) DynamicInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_DynamicInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) DeleteDynamic(ctx context.Context, in *DeleteDynamicRequest, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_DeleteDynamic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) Praise(ctx context.Context, in *PraiseRequest, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_Praise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) HasPraise(ctx context.Context, in *HasPraiseRequest, opts ...grpc.CallOption) (*HasPraiseResponse, error) {
	out := new(HasPraiseResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_HasPraise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_Collect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) HasCollect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*HasCollectResponse, error) {
	out := new(HasCollectResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_HasCollect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) CollectList(ctx context.Context, in *CollectListRequest, opts ...grpc.CallOption) (*CollectListResponse, error) {
	out := new(CollectListResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_CollectList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) Focus(ctx context.Context, in *FocusRequest, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_Focus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) HasFocus(ctx context.Context, in *FocusRequest, opts ...grpc.CallOption) (*HasFocusResponse, error) {
	out := new(HasFocusResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_HasFocus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) ShareDynamic(ctx context.Context, in *ShareDynamicRequest, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_ShareDynamic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) FocusList(ctx context.Context, in *FocusListRequest, opts ...grpc.CallOption) (*FocusListResponse, error) {
	out := new(FocusListResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_FocusList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) FansList(ctx context.Context, in *FansListRequest, opts ...grpc.CallOption) (*FansListResponse, error) {
	out := new(FansListResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_FansList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) GetCommentList(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (*CommentListResponse, error) {
	out := new(CommentListResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_GetCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) GetChildCommentList(ctx context.Context, in *ChildCommentListRequest, opts ...grpc.CallOption) (*ChildCommentListResponse, error) {
	out := new(ChildCommentListResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_GetChildCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) Comment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_Comment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*APICommonResponse, error) {
	out := new(APICommonResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) GetUserFansCountAndFocusCount(ctx context.Context, in *UserFansCountAndFocusCountRequest, opts ...grpc.CallOption) (*UserFansCountAndFocusCountResponse, error) {
	out := new(UserFansCountAndFocusCountResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_GetUserFansCountAndFocusCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsrvClient) GetUsersFansCountAndFocusCount(ctx context.Context, in *UsersFansCountAndFocusCountRequest, opts ...grpc.CallOption) (*UsersFansCountAndFocusCountResponse, error) {
	out := new(UsersFansCountAndFocusCountResponse)
	err := c.cc.Invoke(ctx, Dynamicsrv_GetUsersFansCountAndFocusCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicsrvServer is the server API for Dynamicsrv service.
// All implementations must embed UnimplementedDynamicsrvServer
// for forward compatibility
type DynamicsrvServer interface {
	// 发布动态
	PublishDynamic(context.Context, *PublishDynamicRequest) (*APICommonResponse, error)
	// 修改动态
	UpdateDynamic(context.Context, *UpdateDynamicRequest) (*APICommonResponse, error)
	// 发现页动态列表
	GetDiscoverDynamicList(context.Context, *DiscoverDynamicListRequest) (*DiscoverDynamicListResponse, error)
	// 部落动态列表（由部落服务去实现）
	GetClubDynamicList(context.Context, *ClubDynamicListRequest) (*InfoResponse, error)
	// 指定用户动态列表
	GetUserDynamicList(context.Context, *UserDynamicListRequest) (*InfoResponse, error)
	// 我的动态列表
	GetMyDynamicList(context.Context, *UserDynamicListRequest) (*InfoResponse, error)
	// 动态详情
	DynamicInfo(context.Context, *InfoRequest) (*InfoResponse, error)
	// 删除动态
	DeleteDynamic(context.Context, *DeleteDynamicRequest) (*APICommonResponse, error)
	// 点赞动态/评论
	Praise(context.Context, *PraiseRequest) (*APICommonResponse, error)
	// 该用户是否已点赞动态或点赞动态下的评论
	HasPraise(context.Context, *HasPraiseRequest) (*HasPraiseResponse, error)
	// 收藏动态
	Collect(context.Context, *CollectRequest) (*APICommonResponse, error)
	// 该用户是否已收藏该动态
	HasCollect(context.Context, *CollectRequest) (*HasCollectResponse, error)
	// 用户收藏列表
	CollectList(context.Context, *CollectListRequest) (*CollectListResponse, error)
	// 关注动态作者
	Focus(context.Context, *FocusRequest) (*APICommonResponse, error)
	// 是否已经关注该作者
	HasFocus(context.Context, *FocusRequest) (*HasFocusResponse, error)
	// 动态分享数,只增不减 -- 客户端上报main/data/callback
	ShareDynamic(context.Context, *ShareDynamicRequest) (*APICommonResponse, error)
	// 用户关注列表
	FocusList(context.Context, *FocusListRequest) (*FocusListResponse, error)
	// 用户粉丝列表
	FansList(context.Context, *FansListRequest) (*FansListResponse, error)
	// 评论列表
	GetCommentList(context.Context, *CommentListRequest) (*CommentListResponse, error)
	// 子评论评论列表
	GetChildCommentList(context.Context, *ChildCommentListRequest) (*ChildCommentListResponse, error)
	// 评论
	Comment(context.Context, *CommentRequest) (*APICommonResponse, error)
	// 删除评论
	DeleteComment(context.Context, *DeleteCommentRequest) (*APICommonResponse, error)
	// 用户粉丝数和关注数
	GetUserFansCountAndFocusCount(context.Context, *UserFansCountAndFocusCountRequest) (*UserFansCountAndFocusCountResponse, error)
	// 获取多个用户的粉丝数和关注数
	GetUsersFansCountAndFocusCount(context.Context, *UsersFansCountAndFocusCountRequest) (*UsersFansCountAndFocusCountResponse, error)
	mustEmbedUnimplementedDynamicsrvServer()
}

// UnimplementedDynamicsrvServer must be embedded to have forward compatible implementations.
type UnimplementedDynamicsrvServer struct {
}

func (UnimplementedDynamicsrvServer) PublishDynamic(context.Context, *PublishDynamicRequest) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishDynamic not implemented")
}
func (UnimplementedDynamicsrvServer) UpdateDynamic(context.Context, *UpdateDynamicRequest) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDynamic not implemented")
}
func (UnimplementedDynamicsrvServer) GetDiscoverDynamicList(context.Context, *DiscoverDynamicListRequest) (*DiscoverDynamicListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoverDynamicList not implemented")
}
func (UnimplementedDynamicsrvServer) GetClubDynamicList(context.Context, *ClubDynamicListRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubDynamicList not implemented")
}
func (UnimplementedDynamicsrvServer) GetUserDynamicList(context.Context, *UserDynamicListRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDynamicList not implemented")
}
func (UnimplementedDynamicsrvServer) GetMyDynamicList(context.Context, *UserDynamicListRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyDynamicList not implemented")
}
func (UnimplementedDynamicsrvServer) DynamicInfo(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynamicInfo not implemented")
}
func (UnimplementedDynamicsrvServer) DeleteDynamic(context.Context, *DeleteDynamicRequest) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDynamic not implemented")
}
func (UnimplementedDynamicsrvServer) Praise(context.Context, *PraiseRequest) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Praise not implemented")
}
func (UnimplementedDynamicsrvServer) HasPraise(context.Context, *HasPraiseRequest) (*HasPraiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPraise not implemented")
}
func (UnimplementedDynamicsrvServer) Collect(context.Context, *CollectRequest) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedDynamicsrvServer) HasCollect(context.Context, *CollectRequest) (*HasCollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasCollect not implemented")
}
func (UnimplementedDynamicsrvServer) CollectList(context.Context, *CollectListRequest) (*CollectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectList not implemented")
}
func (UnimplementedDynamicsrvServer) Focus(context.Context, *FocusRequest) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Focus not implemented")
}
func (UnimplementedDynamicsrvServer) HasFocus(context.Context, *FocusRequest) (*HasFocusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasFocus not implemented")
}
func (UnimplementedDynamicsrvServer) ShareDynamic(context.Context, *ShareDynamicRequest) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareDynamic not implemented")
}
func (UnimplementedDynamicsrvServer) FocusList(context.Context, *FocusListRequest) (*FocusListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FocusList not implemented")
}
func (UnimplementedDynamicsrvServer) FansList(context.Context, *FansListRequest) (*FansListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FansList not implemented")
}
func (UnimplementedDynamicsrvServer) GetCommentList(context.Context, *CommentListRequest) (*CommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}
func (UnimplementedDynamicsrvServer) GetChildCommentList(context.Context, *ChildCommentListRequest) (*ChildCommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildCommentList not implemented")
}
func (UnimplementedDynamicsrvServer) Comment(context.Context, *CommentRequest) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Comment not implemented")
}
func (UnimplementedDynamicsrvServer) DeleteComment(context.Context, *DeleteCommentRequest) (*APICommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedDynamicsrvServer) GetUserFansCountAndFocusCount(context.Context, *UserFansCountAndFocusCountRequest) (*UserFansCountAndFocusCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFansCountAndFocusCount not implemented")
}
func (UnimplementedDynamicsrvServer) GetUsersFansCountAndFocusCount(context.Context, *UsersFansCountAndFocusCountRequest) (*UsersFansCountAndFocusCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersFansCountAndFocusCount not implemented")
}
func (UnimplementedDynamicsrvServer) mustEmbedUnimplementedDynamicsrvServer() {}

// UnsafeDynamicsrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicsrvServer will
// result in compilation errors.
type UnsafeDynamicsrvServer interface {
	mustEmbedUnimplementedDynamicsrvServer()
}

func RegisterDynamicsrvServer(s grpc.ServiceRegistrar, srv DynamicsrvServer) {
	s.RegisterService(&Dynamicsrv_ServiceDesc, srv)
}

func _Dynamicsrv_PublishDynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDynamicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).PublishDynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_PublishDynamic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).PublishDynamic(ctx, req.(*PublishDynamicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_UpdateDynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDynamicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).UpdateDynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_UpdateDynamic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).UpdateDynamic(ctx, req.(*UpdateDynamicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_GetDiscoverDynamicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverDynamicListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).GetDiscoverDynamicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_GetDiscoverDynamicList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).GetDiscoverDynamicList(ctx, req.(*DiscoverDynamicListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_GetClubDynamicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubDynamicListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).GetClubDynamicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_GetClubDynamicList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).GetClubDynamicList(ctx, req.(*ClubDynamicListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_GetUserDynamicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDynamicListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).GetUserDynamicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_GetUserDynamicList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).GetUserDynamicList(ctx, req.(*UserDynamicListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_GetMyDynamicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDynamicListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).GetMyDynamicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_GetMyDynamicList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).GetMyDynamicList(ctx, req.(*UserDynamicListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_DynamicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).DynamicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_DynamicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).DynamicInfo(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_DeleteDynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDynamicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).DeleteDynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_DeleteDynamic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).DeleteDynamic(ctx, req.(*DeleteDynamicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_Praise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PraiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).Praise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_Praise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).Praise(ctx, req.(*PraiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_HasPraise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasPraiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).HasPraise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_HasPraise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).HasPraise(ctx, req.(*HasPraiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_Collect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).Collect(ctx, req.(*CollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_HasCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).HasCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_HasCollect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).HasCollect(ctx, req.(*CollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_CollectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).CollectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_CollectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).CollectList(ctx, req.(*CollectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_Focus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FocusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).Focus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_Focus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).Focus(ctx, req.(*FocusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_HasFocus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FocusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).HasFocus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_HasFocus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).HasFocus(ctx, req.(*FocusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_ShareDynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareDynamicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).ShareDynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_ShareDynamic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).ShareDynamic(ctx, req.(*ShareDynamicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_FocusList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FocusListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).FocusList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_FocusList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).FocusList(ctx, req.(*FocusListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_FansList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FansListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).FansList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_FansList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).FansList(ctx, req.(*FansListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_GetCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).GetCommentList(ctx, req.(*CommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_GetChildCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChildCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).GetChildCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_GetChildCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).GetChildCommentList(ctx, req.(*ChildCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_Comment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).Comment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_Comment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).Comment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_GetUserFansCountAndFocusCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFansCountAndFocusCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).GetUserFansCountAndFocusCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_GetUserFansCountAndFocusCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).GetUserFansCountAndFocusCount(ctx, req.(*UserFansCountAndFocusCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamicsrv_GetUsersFansCountAndFocusCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersFansCountAndFocusCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsrvServer).GetUsersFansCountAndFocusCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamicsrv_GetUsersFansCountAndFocusCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsrvServer).GetUsersFansCountAndFocusCount(ctx, req.(*UsersFansCountAndFocusCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dynamicsrv_ServiceDesc is the grpc.ServiceDesc for Dynamicsrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dynamicsrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dynamicsrv.Dynamicsrv",
	HandlerType: (*DynamicsrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishDynamic",
			Handler:    _Dynamicsrv_PublishDynamic_Handler,
		},
		{
			MethodName: "UpdateDynamic",
			Handler:    _Dynamicsrv_UpdateDynamic_Handler,
		},
		{
			MethodName: "GetDiscoverDynamicList",
			Handler:    _Dynamicsrv_GetDiscoverDynamicList_Handler,
		},
		{
			MethodName: "GetClubDynamicList",
			Handler:    _Dynamicsrv_GetClubDynamicList_Handler,
		},
		{
			MethodName: "GetUserDynamicList",
			Handler:    _Dynamicsrv_GetUserDynamicList_Handler,
		},
		{
			MethodName: "GetMyDynamicList",
			Handler:    _Dynamicsrv_GetMyDynamicList_Handler,
		},
		{
			MethodName: "DynamicInfo",
			Handler:    _Dynamicsrv_DynamicInfo_Handler,
		},
		{
			MethodName: "DeleteDynamic",
			Handler:    _Dynamicsrv_DeleteDynamic_Handler,
		},
		{
			MethodName: "Praise",
			Handler:    _Dynamicsrv_Praise_Handler,
		},
		{
			MethodName: "HasPraise",
			Handler:    _Dynamicsrv_HasPraise_Handler,
		},
		{
			MethodName: "Collect",
			Handler:    _Dynamicsrv_Collect_Handler,
		},
		{
			MethodName: "HasCollect",
			Handler:    _Dynamicsrv_HasCollect_Handler,
		},
		{
			MethodName: "CollectList",
			Handler:    _Dynamicsrv_CollectList_Handler,
		},
		{
			MethodName: "Focus",
			Handler:    _Dynamicsrv_Focus_Handler,
		},
		{
			MethodName: "HasFocus",
			Handler:    _Dynamicsrv_HasFocus_Handler,
		},
		{
			MethodName: "ShareDynamic",
			Handler:    _Dynamicsrv_ShareDynamic_Handler,
		},
		{
			MethodName: "FocusList",
			Handler:    _Dynamicsrv_FocusList_Handler,
		},
		{
			MethodName: "FansList",
			Handler:    _Dynamicsrv_FansList_Handler,
		},
		{
			MethodName: "GetCommentList",
			Handler:    _Dynamicsrv_GetCommentList_Handler,
		},
		{
			MethodName: "GetChildCommentList",
			Handler:    _Dynamicsrv_GetChildCommentList_Handler,
		},
		{
			MethodName: "Comment",
			Handler:    _Dynamicsrv_Comment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Dynamicsrv_DeleteComment_Handler,
		},
		{
			MethodName: "GetUserFansCountAndFocusCount",
			Handler:    _Dynamicsrv_GetUserFansCountAndFocusCount_Handler,
		},
		{
			MethodName: "GetUsersFansCountAndFocusCount",
			Handler:    _Dynamicsrv_GetUsersFansCountAndFocusCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/dynamicsrv.proto",
}
