// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: define/dapp.proto

package dapp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DappServer_GetList_FullMethodName            = "/dapp.dappServer/GetList"
	DappServer_SaveItem_FullMethodName           = "/dapp.dappServer/SaveItem"
	DappServer_DeleteItem_FullMethodName         = "/dapp.dappServer/DeleteItem"
	DappServer_UpdateItemRelation_FullMethodName = "/dapp.dappServer/UpdateItemRelation"
	DappServer_GetRelationByRelID_FullMethodName = "/dapp.dappServer/GetRelationByRelID"
	DappServer_DelRelationByRelID_FullMethodName = "/dapp.dappServer/DelRelationByRelID"
)

// DappServerClient is the client API for DappServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DappServerClient interface {
	// 获取列表
	GetList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
	// 更新/新增dapp
	SaveItem(ctx context.Context, in *SaveItemReq, opts ...grpc.CallOption) (*SaveItemResp, error)
	// 删除dapp
	DeleteItem(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
	// 关联dapp
	UpdateItemRelation(ctx context.Context, in *RelationReq, opts ...grpc.CallOption) (*RelationResp, error)
	// 获取对应关联的dapp
	GetRelationByRelID(ctx context.Context, in *GetRelationReq, opts ...grpc.CallOption) (*GetRelationResp, error)
	// 删除关联dapp
	DelRelationByRelID(ctx context.Context, in *DelRelationReq, opts ...grpc.CallOption) (*DelRelationResp, error)
}

type dappServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDappServerClient(cc grpc.ClientConnInterface) DappServerClient {
	return &dappServerClient{cc}
}

func (c *dappServerClient) GetList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, DappServer_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dappServerClient) SaveItem(ctx context.Context, in *SaveItemReq, opts ...grpc.CallOption) (*SaveItemResp, error) {
	out := new(SaveItemResp)
	err := c.cc.Invoke(ctx, DappServer_SaveItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dappServerClient) DeleteItem(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, DappServer_DeleteItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dappServerClient) UpdateItemRelation(ctx context.Context, in *RelationReq, opts ...grpc.CallOption) (*RelationResp, error) {
	out := new(RelationResp)
	err := c.cc.Invoke(ctx, DappServer_UpdateItemRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dappServerClient) GetRelationByRelID(ctx context.Context, in *GetRelationReq, opts ...grpc.CallOption) (*GetRelationResp, error) {
	out := new(GetRelationResp)
	err := c.cc.Invoke(ctx, DappServer_GetRelationByRelID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dappServerClient) DelRelationByRelID(ctx context.Context, in *DelRelationReq, opts ...grpc.CallOption) (*DelRelationResp, error) {
	out := new(DelRelationResp)
	err := c.cc.Invoke(ctx, DappServer_DelRelationByRelID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DappServerServer is the server API for DappServer service.
// All implementations must embed UnimplementedDappServerServer
// for forward compatibility
type DappServerServer interface {
	// 获取列表
	GetList(context.Context, *ListReq) (*ListResp, error)
	// 更新/新增dapp
	SaveItem(context.Context, *SaveItemReq) (*SaveItemResp, error)
	// 删除dapp
	DeleteItem(context.Context, *DeleteReq) (*DeleteResp, error)
	// 关联dapp
	UpdateItemRelation(context.Context, *RelationReq) (*RelationResp, error)
	// 获取对应关联的dapp
	GetRelationByRelID(context.Context, *GetRelationReq) (*GetRelationResp, error)
	// 删除关联dapp
	DelRelationByRelID(context.Context, *DelRelationReq) (*DelRelationResp, error)
	mustEmbedUnimplementedDappServerServer()
}

// UnimplementedDappServerServer must be embedded to have forward compatible implementations.
type UnimplementedDappServerServer struct {
}

func (UnimplementedDappServerServer) GetList(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedDappServerServer) SaveItem(context.Context, *SaveItemReq) (*SaveItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveItem not implemented")
}
func (UnimplementedDappServerServer) DeleteItem(context.Context, *DeleteReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedDappServerServer) UpdateItemRelation(context.Context, *RelationReq) (*RelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemRelation not implemented")
}
func (UnimplementedDappServerServer) GetRelationByRelID(context.Context, *GetRelationReq) (*GetRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationByRelID not implemented")
}
func (UnimplementedDappServerServer) DelRelationByRelID(context.Context, *DelRelationReq) (*DelRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRelationByRelID not implemented")
}
func (UnimplementedDappServerServer) mustEmbedUnimplementedDappServerServer() {}

// UnsafeDappServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DappServerServer will
// result in compilation errors.
type UnsafeDappServerServer interface {
	mustEmbedUnimplementedDappServerServer()
}

func RegisterDappServerServer(s grpc.ServiceRegistrar, srv DappServerServer) {
	s.RegisterService(&DappServer_ServiceDesc, srv)
}

func _DappServer_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DappServerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DappServer_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DappServerServer).GetList(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DappServer_SaveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DappServerServer).SaveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DappServer_SaveItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DappServerServer).SaveItem(ctx, req.(*SaveItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DappServer_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DappServerServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DappServer_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DappServerServer).DeleteItem(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DappServer_UpdateItemRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DappServerServer).UpdateItemRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DappServer_UpdateItemRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DappServerServer).UpdateItemRelation(ctx, req.(*RelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DappServer_GetRelationByRelID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DappServerServer).GetRelationByRelID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DappServer_GetRelationByRelID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DappServerServer).GetRelationByRelID(ctx, req.(*GetRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DappServer_DelRelationByRelID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DappServerServer).DelRelationByRelID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DappServer_DelRelationByRelID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DappServerServer).DelRelationByRelID(ctx, req.(*DelRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DappServer_ServiceDesc is the grpc.ServiceDesc for DappServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DappServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dapp.dappServer",
	HandlerType: (*DappServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _DappServer_GetList_Handler,
		},
		{
			MethodName: "SaveItem",
			Handler:    _DappServer_SaveItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _DappServer_DeleteItem_Handler,
		},
		{
			MethodName: "UpdateItemRelation",
			Handler:    _DappServer_UpdateItemRelation_Handler,
		},
		{
			MethodName: "GetRelationByRelID",
			Handler:    _DappServer_GetRelationByRelID_Handler,
		},
		{
			MethodName: "DelRelationByRelID",
			Handler:    _DappServer_DelRelationByRelID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define/dapp.proto",
}
